{"version":3,"sources":["injector.js","event-emitter.js","array-extenstions.js","class-names.js","event-emitter-extensions.js","key-mirror.js","object-assign.js","string-extensions.js","notifications-constants.js","page-constants.js","team-constants.js","user-constants.js","user-status-constants.js","actions/notifiactions-actions.js","actions/page-actions.js","actions/team-actions.js","actions/user-actions.js","actions/user-status-actions.js","requests/home-request.js","requests/team-request.js","stores/notifications-store.js","stores/page-store.js","stores/team-store.js","stores/user-status-store.js","stores/user-store.js","dispatcher.js","realtime.js","router.js","storage.js","utils.js","miit-app.js","team/component/clock-face.js","team/component/clock.js","team/component/dropdown.js","team/component/if.js","team/component/link.js","team/component/loading.js","www/component/create-team.js","www/component/news-letter.js","team/page/miit-home.js","team/page/miit-login.js","team/page/miit-not-found.js","team/page/miit-team-settings.js","team/page/miit-user-settings.js","team/component/menu/menu-header.js","team/component/menu/menu-label.js","team/component/menu/menu-team.js","team/component/menu/menu-user-profile.js","team/component/notifications/miit-notification.js","team/component/notifications/miit-notifications-container.js","team/component/team/team-update.js","team/component/user/user-avatar.js","team/component/user/user-change-password.js","team/component/user/user-list-header.js","team/component/user/user-list-invite.js","team/component/user/user-list-item-roles.js","team/component/user/user-list-item.js","team/component/user/user-list.js","team/component/user/user-login.js","team/component/user/user-update.js","team/team-app.js","app.concat.js"],"names":["React","Flux","Router","window","MiitComponents","injector","Injector","dependencies","instances","this","register","key","value","resolve","func","deps","scope","args","arguments","replace","split","Array","isArray","toString","match","a","prototype","slice","call","i","length","d","push","shift","apply","get","serviceName","proxyService","service","EventEmitter","indexOfListener","listeners","listener","alias","name","proto","exports","originalGlobalValue","getListeners","evt","response","events","_getEvents","RegExp","hasOwnProperty","test","flattenListeners","flatListeners","getListenersAsObject","addListener","listenerIsWrapped","once","on","addOnceListener","defineEvent","defineEvents","evts","removeListener","index","splice","off","addListeners","manipulateListeners","removeListeners","remove","single","multiple","removeEvent","type","_events","removeAllListeners","emitEvent","_getOnceReturnValue","trigger","emit","setOnceReturnValue","_onceReturnValue","noConflict","define","amd","module","what","ax","L","indexOf","indexBy","prop","findBy","sortBy","order","sort","b","removeBy","removeAll","values","forEach","bind","merge","classNames","classes","arg","argType","substr","addListenerName","eventName","dashToCapitalize","removeListenerName","emitEventName","generateNamedFunctions","self","callback","keyMirror","obj","ret","Object","Error","ToObject","val","undefined","TypeError","ObjectAssign","assign","target","source","from","keys","to","s","String","capitalize","toLowerCase","m","toUpperCase","MiitNotifiactionsConstants","KeyMirror","ActionTypes","NEW_NOTIFICATION","MiitPageConstants","CHANGE_MAIN_PAGE_COMPLETED","CHANGE_MIIT_PAGE_COMPLETED","CHANGE_APPLICATION_PAGE_COMPLETED","MiitTeamConstants","REFRESH_USERS_COMPLETED","UPDATE_TEAM_COMPLETED","UPDATE_TEAM_ERROR","INVITE_USER_COMPLETED","INVITE_USER_ERROR","DEMOTE_USER_COMPLETED","DEMOTE_USER_ERROR","PROMOTE_USER_COMPLETED","PROMOTE_USER_ERROR","REMOVE_USER_COMPLETED","REMOVE_USER_ERROR","MiitUserConstants","REFRESH_USER_COMPLETED","LOGIN_USER_COMPLETED","LOGIN_USER_ERROR","LOGOUT_USER_COMPLETED","CHANGE_PASSWORD_USER_COMPLETED","CHANGE_PASSWORD_USER_ERROR","UPDATE_USER_COMPLETED","UPDATE_USER_ERROR","MiitUserStatusConstants","REFRESH_USER_STATUS","UPDATE_USER_STATUS","NotificationsActions","MiitDispatcher","MiitNotificationsConstants","new","text","action","category","dispatch","PageActions","changeMainPage","main","mainPage","changeApplicationPage","miit","application","applicationPage","TeamActions","MiitRealtime","MiitTeamRequest","onPromoted","id","roles","data","onDemoted","onRemoved","onInvited","user","onUpdated","publix","public","onRefresh","users","refresh","send","update","invite","email","promote","demote","UserActions","token","login","password","logout","check","changePassword","password_old","password_new","old","UserStatusActions","onStatusUpdate","status","onStatusRefresh","sending","MiitNewsLetterRequest","MiitUtils","newsletter","cb","ajax","registration","team","MiitTeam","user_id","user_roles","_addNotification","notification","Notifications","setTimeout","MiitNotificationsStore","NOTIFICATION_ADDED","NOTIFICATION_REMOVED","NotificationsStore","getNotifications","dispatchToken","generator","guid","emitNotificationRemoved","emitNotificationAdded","MiitPageStore","MiitStorage","MiitRouter","MiitUserStore","MiitTeamStore","CurrentMainPage","CurrentApplicationPage","PageStorage","create","MAIN_PAGE_CHANGED","APPLICATION_PAGE_CHANGED","PageStore","getCurrentMainPage","page","isPublic","isLoggedIn","getCurrentApplicationPage","registerMainPage","component","set","registerApplicationPage","handleChangeMainPage","emitMainPageChanged","handleChangeApplicationPage","emitApplicationPageChanged","_update","Team","_addUser","Users","_replaceUsers","_filterbyRoleUser","role","inverse","filter","result","_getUserById","_removeUser","_promoteUser","_demoteUser","TEAM_UPDATED","TEAM_NOT_UPDATED","REFRESHED","NOT_REFRESHED","INVITED","NOT_INVITED","PROMOTED","NOT_PROMOTED","DEMOTED","NOT_DEMOTED","REMOVED","NOT_REMOVED","TeamStore","getTeam","shared","getUser","getUsers","getUsersByRole","emitRefreshed","emitTeamUpdated","emitTeamNotUpdated","emitInvited","emitNotInvited","emitPromoted","emitNotPromoted","emitDemoted","emitNotDemoted","emitRemoved","emitNotRemoved","_changeStatus","count","UserStatus","userId","_getStatusOf","_replaceStatus","MiitUserStatusStore","STATUS_CHANGED","UserStatusStore","getUserStatus","getUserStatusByUserId","emitStatusChanged","_isUserGenerator","Me","_isAnonymous","_isItMe","me","you","_getName","_connect","Token","LoggedIn","localStorage","setItem","_disconnect","removeItem","LOGGED_IN","LOGIN_ERROR","PASSWORD_CHANGED","PASSWORD_NOT_CHANGED","USER_UPDATED","USER_NOT_UPDATED","UserStore","getToken","getItem","isOwner","isAdmin","isUser","isAnonym","isItMe","getName","emitLoggedIn","emitLoginError","location","href","emitPasswordChanged","emitPasswordNotChanged","emitUserUpdated","emitUserNotUpdated","Dispatcher","primus","Primus","connect","onData","console","log","reserved","event","write","sendIn","roomName","router","routes","init","getData","configure","html5history","run_handler_in_init","convert_hash_in_init","setRoute","path","Database","timeoutId","internal","expire","delay","clearTimeout","clear","createXMLHTTPObject","xmlhttp","XMLHttpFactories","e","RegexEmail","RegexTeamName","RegexPassword","RegexUserName","validatorGenerator","re","guidGenerator","s4","Math","floor","random","substring","XMLHttpRequest","ActiveXObject","sendRequest","url","postData","headers","req","method","open","setRequestHeader","header","onreadystatechange","readyState","JSON","parse","responseText","stringify","validator","MiitApp","VERSION","COPYRIGTH","ClockFace","createClass","displayName","render","props","date","prefix","getMinutes","minutes","hours","getHours","createElement","className","ClockIntervalId","Clock","getInitialState","Date","componentDidMount","tick","setInterval","componentWillUnmount","clearInterval","setState","state","If","propTypes","label","PropTypes","string","isRequired","getDefaultProps","angle","toggleAngle","_onLeave","isMounted","onLeave","onEnter","onClick","icon","clIcon","clDropdown","onMouseLeave","onMouseEnter","children","ActiveGroups","Link","onLinkClick","external","preventDefault","setActive","activeGroup","activeName","__spread","Loading","loading","src","Utils","HomeRequest","CreateTeam","placeholder","submit","getDefaultErrors","missing_email","missing_team","invalid_email","invalid_team","componentWillMount","handleSubmit","findDOMNode","refs","trim","done","classes_email","invalid","classes_team","onSubmit","ref","NewsLetter","MiitHome","title","UserList","emails","filtered","MiitLogin","UserLogin","MiitNotFound","home","MiitTeamSettings","applications","informations","addTeamUpdatedListener","_onChange","removeTeamUpdatedListener","forceUpdate","TeamUpdate","autoload","MiitUserSettings","addUserUpdatedListener","removeUserUpdatedListener","UserUpdate","UserChangePassword","MenuHeader","_onChanged","MenuLabel","MenuTeam","user_label","my_account","disconnect","apps_label","MenuUserProfile","profile","UserAvatar","Notification","NotificationsContainer","addNotificationAddedListener","addNotificationRemovedListener","notifications","map","private","isPrivate","initial","value_name","missing_name","invalid_same","invalid_format","value_public","addTeamNotUpdatedListener","_onError","removeTeamNotUpdatedListener","handleChange","handlePublic","generateUrl","protocol","hostname","classes_name","onChange","defaultChecked","disabled","avatar","first","second","value_old","value_first","value_second","missing_old","missing_first","missing_second","invalid_old","invalid_repeated","addPasswordChangedListener","addPasswordNotChangedListener","removePasswordChangedListener","removePasswordNotChangedListener","classes_old","classes_first","classes_second","UserListHeader","UserListInvite","addInvitedListener","_onInvited","addNotInvitedListener","removeInvitedListener","removeNotInvitedListener","newValue","onInvite","classes_invalid","valueLinkEmail","requestChange","valueLink","UserListItemRoles","admin","addPromotedListener","_onPromoted","addNotPromotedListener","addDemotedListener","_onDemoted","addNotDemotedListener","removePromotedListener","removeNotPromotedListener","removeDemotedListener","removeNotDemotedListener","_stopLoading","toggleRole","handleClick","IAmAdmin","userIsOwner","userIsAdmin","userIsMe","userIsUser","remove_active","disable","active","checked","readOnly","UserListItem","addStatusChangedListener","removeStatusChangedListener","loaded","_refresh","addRemovedListener","addRefreshedListener","removeRemovedListener","removeRefreshedListener","allowRefresh","value_email","value_password","login_error","missing_password","addLoggedInListener","_onLoggedIn","addLoginErrorListener","removeLoggedInListener","removeLoginErrorListener","classes_password","addUserNotUpdatedListener","removeUserNotUpdatedListener","defaultPage","TeamApp","addMainPageChangedListener","removeMainPageChangedListener"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,GAAAC,OAAAC,iBACA,IAAAC,GAAA,WACA,QAAAC,KAEA,GAAAC,MACAC,IAGAC,MAAAC,SAAA,SAAAC,EAAAC,GACAL,EAAAI,GAAAC,GAIAH,KAAAI,QAAA,WACA,GAAAC,GAAAC,EAAAC,EAAAC,IAqBA,OAnBA,gBAAAC,WAAA,IAEAJ,EAAAI,UAAA,GACAH,EAAAG,UAAA,GAAAC,QAAA,KAAA,IAAAC,MAAA,KACAJ,EAAAE,UAAA,QAEAG,MAAAC,QAAAJ,UAAA,KAEAJ,EAAAI,UAAA,GACAH,EAAAG,UAAA,GACAF,EAAAE,UAAA,SAIAJ,EAAAI,UAAA,GACAH,EAAAD,EAAAS,WAAAC,MAAA,sCAAA,GAAAL,QAAA,KAAA,IAAAC,MAAA,KACAJ,EAAAE,UAAA,QAGA,WAGA,IAAA,GAFAO,GAAAJ,MAAAK,UAAAC,MAAAC,KAAAV,UAAA,GAEAW,EAAA,EAAAA,EAAAd,EAAAe,OAAAD,IAAA,CACA,GAAAE,GAAAhB,EAAAc,EAEArB,GAAAuB,IAAA,kBAAAxB,GAAAwB,KACAvB,EAAAuB,GAAAxB,EAAAwB,MAGAd,EAAAe,KAAAxB,EAAAuB,IAAA,KAAAA,EAAAvB,EAAAuB,GAAAN,EAAAQ,SAGA,MAAAnB,GAAAoB,MAAAlB,MAAAC,KAKAR,KAAA0B,IAAA,SAAAC,GACA,GAAAC,GAAA5B,KAAAI,QAAAuB,EAAA,SAAAE,GACA,MAAAA,IAGA,OAAAD,MAIA,MAAA,IAAA/B,OCtDA,WACA,YAQA,SAAAiC,MAeA,QAAAC,GAAAC,EAAAC,GAEA,IADA,GAAAb,GAAAY,EAAAX,OACAD,KACA,GAAAY,EAAAZ,GAAAa,WAAAA,EACA,MAAAb,EAIA,OAAA,GAUA,QAAAc,GAAAC,GACA,MAAA,YACA,MAAAnC,MAAAmC,GAAAV,MAAAzB,KAAAS,YAhCA,GAAA2B,GAAAN,EAAAb,UACAoB,EAAArC,KACAsC,EAAAD,EAAAP,YA2CAM,GAAAG,aAAA,SAAAC,GACA,GACAC,GACAvC,EAFAwC,EAAA1C,KAAA2C,YAMA,IAAAH,YAAAI,QAAA,CACAH,IACA,KAAAvC,IAAAwC,GACAA,EAAAG,eAAA3C,IAAAsC,EAAAM,KAAA5C,KACAuC,EAAAvC,GAAAwC,EAAAxC,QAKAuC,GAAAC,EAAAF,KAAAE,EAAAF,MAGA,OAAAC,IASAL,EAAAW,iBAAA,SAAAf,GACA,GACAZ,GADA4B,IAGA,KAAA5B,EAAA,EAAAA,EAAAY,EAAAX,OAAAD,GAAA,EACA4B,EAAAzB,KAAAS,EAAAZ,GAAAa,SAGA,OAAAe,IASAZ,EAAAa,qBAAA,SAAAT,GACA,GACAC,GADAT,EAAAhC,KAAAuC,aAAAC,EAQA,OALAR,aAAApB,SACA6B,KACAA,EAAAD,GAAAR,GAGAS,GAAAT,GAaAI,EAAAc,YAAA,SAAAV,EAAAP,GACA,GAEA/B,GAFA8B,EAAAhC,KAAAiD,qBAAAT,GACAW,EAAA,gBAAAlB,EAGA,KAAA/B,IAAA8B,GACAA,EAAAa,eAAA3C,IAAA,KAAA6B,EAAAC,EAAA9B,GAAA+B,IACAD,EAAA9B,GAAAqB,KAAA4B,EAAAlB,GACAA,SAAAA,EACAmB,MAAA,GAKA,OAAApD,OAMAoC,EAAAiB,GAAAnB,EAAA,eAUAE,EAAAkB,gBAAA,SAAAd,EAAAP,GACA,MAAAjC,MAAAkD,YAAAV,GACAP,SAAAA,EACAmB,MAAA,KAOAhB,EAAAgB,KAAAlB,EAAA,mBASAE,EAAAmB,YAAA,SAAAf,GAEA,MADAxC,MAAAuC,aAAAC,GACAxC,MASAoC,EAAAoB,aAAA,SAAAC,GACA,IAAA,GAAArC,GAAA,EAAAA,EAAAqC,EAAApC,OAAAD,GAAA,EACApB,KAAAuD,YAAAE,EAAArC,GAEA,OAAApB,OAWAoC,EAAAsB,eAAA,SAAAlB,EAAAP,GACA,GACA0B,GACAzD,EAFA8B,EAAAhC,KAAAiD,qBAAAT,EAIA,KAAAtC,IAAA8B,GACAA,EAAAa,eAAA3C,KACAyD,EAAA5B,EAAAC,EAAA9B,GAAA+B,GAEA,KAAA0B,GACA3B,EAAA9B,GAAA0D,OAAAD,EAAA,GAKA,OAAA3D,OAMAoC,EAAAyB,IAAA3B,EAAA,kBAYAE,EAAA0B,aAAA,SAAAtB,EAAAR,GAEA,MAAAhC,MAAA+D,qBAAA,EAAAvB,EAAAR,IAaAI,EAAA4B,gBAAA,SAAAxB,EAAAR,GAEA,MAAAhC,MAAA+D,qBAAA,EAAAvB,EAAAR,IAeAI,EAAA2B,oBAAA,SAAAE,EAAAzB,EAAAR,GACA,GAAAZ,GACAjB,EACA+D,EAAAD,EAAAjE,KAAA0D,eAAA1D,KAAAkD,YACAiB,EAAAF,EAAAjE,KAAAgE,gBAAAhE,KAAA8D,YAGA,IAAA,gBAAAtB,IAAAA,YAAAI,QAmBA,IADAxB,EAAAY,EAAAX,OACAD,KACA8C,EAAA/C,KAAAnB,KAAAwC,EAAAR,EAAAZ,QAnBA,KAAAA,IAAAoB,GACAA,EAAAK,eAAAzB,KAAAjB,EAAAqC,EAAApB,MAEA,kBAAAjB,GACA+D,EAAA/C,KAAAnB,KAAAoB,EAAAjB,GAIAgE,EAAAhD,KAAAnB,KAAAoB,EAAAjB,GAeA,OAAAH,OAYAoC,EAAAgC,YAAA,SAAA5B,GACA,GAEAtC,GAFAmE,QAAA7B,GACAE,EAAA1C,KAAA2C,YAIA,IAAA,WAAA0B,QAEA3B,GAAAF,OAEA,IAAAA,YAAAI,QAEA,IAAA1C,IAAAwC,GACAA,EAAAG,eAAA3C,IAAAsC,EAAAM,KAAA5C,UACAwC,GAAAxC,cAMAF,MAAAsE,OAGA,OAAAtE,OAQAoC,EAAAmC,mBAAArC,EAAA,eAcAE,EAAAoC,UAAA,SAAAhC,EAAAhC,GACA,GACAyB,GACAb,EACAlB,EACAuC,EAJAT,EAAAhC,KAAAiD,qBAAAT,EAMA,KAAAtC,IAAA8B,GACA,GAAAA,EAAAa,eAAA3C,GAGA,IAFAkB,EAAAY,EAAA9B,GAAAmB,OAEAD,KAGAa,EAAAD,EAAA9B,GAAAkB,GAEAa,EAAAmB,QAAA,GACApD,KAAA0D,eAAAlB,EAAAP,EAAAA,UAGAQ,EAAAR,EAAAA,SAAAR,MAAAzB,KAAAQ,OAEAiC,IAAAzC,KAAAyE,uBACAzE,KAAA0D,eAAAlB,EAAAP,EAAAA,SAMA,OAAAjC,OAMAoC,EAAAsC,QAAAxC,EAAA,aAUAE,EAAAuC,KAAA,SAAAnC,GACA,GAAAhC,GAAAI,MAAAK,UAAAC,MAAAC,KAAAV,UAAA,EACA,OAAAT,MAAAwE,UAAAhC,EAAAhC,IAWA4B,EAAAwC,mBAAA,SAAAzE,GAEA,MADAH,MAAA6E,iBAAA1E,EACAH,MAWAoC,EAAAqC,oBAAA,WACA,MAAAzE,MAAA6C,eAAA,oBACA7C,KAAA6E,kBAGA,GAUAzC,EAAAO,WAAA,WACA,MAAA3C,MAAAsE,UAAAtE,KAAAsE,aAQAxC,EAAAgD,WAAA,WAEA,MADAzC,GAAAP,aAAAQ,EACAR,GAIA,kBAAAiD,SAAAA,OAAAC,IACAD,OAAA,WACA,MAAAjD,KAGA,gBAAAmD,SAAAA,OAAA5C,QACA4C,OAAA5C,QAAAP,EAGAO,EAAAP,aAAAA,ICtdAX,KAAAnB,MACA,WACAY,MAAAK,UAAAgD,OAAA,WAEA,IADA,GAAAiB,GAAAC,EAAAnE,EAAAP,UAAA2E,EAAApE,EAAAK,OACA+D,GAAApF,KAAAqB,QAEA,IADA6D,EAAAlE,IAAAoE,GACA,MAAAD,EAAAnF,KAAAqF,QAAAH,KACAlF,KAAA4D,OAAAuB,EAAA,EAGA,OAAAnF,OAGAY,MAAAK,UAAAqE,QAAA,SAAAC,EAAApF,GACA,IAAA,GAAAwD,KAAA3D,MACA,GAAAA,KAAA2D,IAAA3D,KAAA2D,GAAA4B,KAAApF,EACA,MAAAwD,EAGA,OAAA,IAGA/C,MAAAK,UAAAuE,OAAA,SAAAD,EAAApF,GACA,GAAAwD,GAAA3D,KAAAsF,QAAAC,EAAApF,EAEA,OAAAwD,IAAA,EACA3D,KAAA2D,GAEA,MAGA/C,MAAAK,UAAAwE,OAAA,SAAAF,EAAAG,GAkBA,MAjBA1F,MAAA2F,KAAA,SAAA3E,EAAA4E,GAGA,GAAA5E,GAAA4E,EAGA,MAAA5E,GAAAuE,GAAAK,EAAAL,GAEA,SAAAG,EAAA,EAAA,GAEA1E,EAAAuE,GAAAK,EAAAL,GAEA,SAAAG,EAAA,GAAA,EAGA,IAEA1F,MAGAY,MAAAK,UAAA4E,SAAA,SAAAN,EAAApF,GAEA,IADA,GAAAwD,GAAA3D,KAAAsF,QAAAC,EAAApF,GACAwD,GAAA,EAAAA,EAAA3D,KAAAsF,QAAAC,EAAApF,SACAH,MAAA2D,IAIA/C,MAAAK,UAAAgD,OAAA,SAAA9D,GAEA,IADA,GAAAwD,GAAA3D,KAAAqF,QAAAlF,GACAwD,GAAA,EAAAA,EAAA3D,KAAAqF,QAAAlF,SACAH,MAAA2D,IAIA/C,MAAAK,UAAA6E,UAAA,SAAAC,GACAnF,MAAAC,QAAAkF,KACAA,GAAAA,IAGAA,EAAAC,QAAA,SAAA7F,GACAH,KAAAiE,OAAA9D,IACA8F,KAAAjG,QAGAY,MAAAK,UAAAiF,MAAA,SAAAH,GACAnF,MAAAC,QAAAkF,KACAA,GAAAA,IAGAA,EAAAC,QAAA,SAAA7F,GACAH,KAAAqF,QAAAlF,GAAA,GACAH,KAAAuB,KAAApB,IAEA8F,KAAAjG,WCpFAN,OAAAyG,WAAA,WACA,YAIA,KAAA,GAFAC,GAAA,GAEAhF,EAAA,EAAAA,EAAAX,UAAAY,OAAAD,IAAA,CACA,GAAAiF,GAAA5F,UAAAW,EACA,IAAAiF,EAAA,CAEA,GAAAC,SAAAD,EAEA,IAAA,WAAAC,GAAA,WAAAA,EACAF,GAAA,IAAAC,MAEA,IAAAzF,MAAAC,QAAAwF,GACAD,GAAA,IAAAD,WAAA1E,MAAA,KAAA4E,OAEA,IAAA,WAAAC,EACA,IAAA,GAAApG,KAAAmG,GACAA,EAAAxD,eAAA3C,IAAAmG,EAAAnG,KACAkG,GAAA,IAAAlG,IAMA,MAAAkG,GAAAG,OAAA,IC1BA,WAEA,QAAAC,GAAAC,GACA,MAAA,MAAAA,EAAAC,mBAAA,WAGA,QAAAC,GAAAF,GACA,MAAA,SAAAA,EAAAC,mBAAA,WAGA,QAAAE,GAAAH,GACA,MAAA,OAAAA,EAAAC,mBAGA5E,aAAAb,UAAA4F,uBAAA,SAAAJ,GACA,GAAAK,GAAA9G,IAEAA,MAAAwG,EAAAC,IAAA,SAAAM,GACAD,EAAAzD,GAAAoD,EAAAM,IAGA/G,KAAA2G,EAAAF,IAAA,SAAAM,GACAD,EAAApD,eAAA+C,EAAAM,IAGA/G,KAAA4G,EAAAH,IAAA,WACAK,EAAAnC,KAAA8B,QCTA,WACA,GAAAO,GAAApH,EAAAQ,WAAA,WAmBA,MAAA,UAAA6G,GACA,GACA/G,GADAgH,IAGA,MAAAD,YAAAE,UAAAvG,MAAAC,QAAAoG,GACA,KAAA,IAAAG,OAAA,8CAGA,KAAAlH,IAAA+G,GACAA,EAAApE,eAAA3C,KACAgH,EAAAhH,GAAAA,EAIA,OAAAgH,KAIAtH,GAAAK,SAAA,aAAA+G,MCvDA,WACA,QAAAK,GAAAC,GACA,GAAA,OAAAA,GAAAC,SAAAD,EACA,KAAA,IAAAE,WAAA,wDAGA,OAAAL,QAAAG,GAGA,GAAAG,GAAA7H,EAAAQ,WAAA,WACA,MAAA+G,QAAAO,QAAA,SAAAC,EAAAC,GAKA,IAAA,GAJAC,GACAC,EACAC,EAAAV,EAAAM,GAEAK,EAAA,EAAAA,EAAAvH,UAAAY,OAAA2G,IAAA,CACAH,EAAApH,UAAAuH,GACAF,EAAAX,OAAAW,KAAAX,OAAAU,GAEA,KAAA,GAAAzG,GAAA,EAAAA,EAAA0G,EAAAzG,OAAAD,IACA2G,EAAAD,EAAA1G,IAAAyG,EAAAC,EAAA1G,IAIA,MAAA2G,KAIAnI,GAAAK,SAAA,gBAAAwH,MC5BA,WACAQ,OAAAhH,UAAAiH,WAAA,WACA,MAAAlI,MAAAmI,cAAAzH,QAAA,QAAA,SAAA0H,GACA,MAAAA,GAAAC,iBAIAJ,OAAAhH,UAAAyF,iBAAA,WACA,MAAA1G,MAAAU,QAAA,KAAA,KAAAwH,aAAAxH,QAAA,KAAA,QCRA,WACA,GAAA4H,GAAA1I,EAAAQ,SACA,cACA,SAAAmI,GACA,OACAC,YAAAD,GAEAE,iBAAA,SAMA7I,GAAAK,SAAA,+BAAAqI,MCbA,WACA,GAAAI,GAAA9I,EAAAQ,SACA,cACA,SAAAmI,GACA,OACAC,YAAAD,GAEAI,2BAAA,KACAC,2BAAA,KACAC,kCAAA,SAMAjJ,GAAAK,SAAA,sBAAAyI,MCfA,WACA,GAAAI,GAAAlJ,EAAAQ,SACA,cACA,SAAAmI,GACA,OACAC,YAAAD,GACAQ,wBAAA,KAEAC,sBAAA,KACAC,kBAAA,KAEAC,sBAAA,KACAC,kBAAA,KAEAC,sBAAA,KACAC,kBAAA,KAEAC,uBAAA,KACAC,mBAAA,KAEAC,sBAAA,KACAC,kBAAA,SAMA7J,GAAAK,SAAA,sBAAA6I,MC3BA,WACA,GAAAY,GAAA9J,EAAAQ,SACA,cACA,SAAAmI,GACA,OACAC,YAAAD,GAEAoB,uBAAA,KAEAC,qBAAA,KACAC,iBAAA,KAEAC,sBAAA,KAEAC,+BAAA,KACAC,2BAAA,KAEAC,sBAAA,KACAC,kBAAA,SAMAtK,GAAAK,SAAA,sBAAAyJ,MCxBA,WACA,GAAAS,GAAAvK,EAAAQ,SACA,cACA,SAAAmI,GACA,OACAC,YAAAD,GAEA6B,oBAAA,KACAC,mBAAA,SAMAzK,GAAAK,SAAA,6BAAAkK,MCdA,WACA,GAAAG,GAAA1K,EAAAQ,SACA,kBAAA,gCACA,SAAAmK,EAAAC,GACA,GAAAhC,GAAAgC,EAAAhC,WAEA,QACAiC,MAAA,SAAApG,EAAAqG,GACA,GAAAC,IACAtG,KAAAmE,EAAAC,iBACAmC,SAAAvG,GAAA,OACAqG,KAAAA,EAGAH,GAAAM,SAAAF,MAMA/K,GAAAK,SAAA,6BAAAqK,MCpBA,WACA,GAAAQ,GAAAlL,EAAAQ,SACA,kBAAA,uBACA,SAAAmK,EAAA7B,GACA,GAAAF,GAAAE,EAAAF,WAEA,QACAuC,eAAA,SAAAC,GACA,GAAAL,IACAtG,KAAAmE,EAAAG,2BACAsC,SAAAD,EAGAT,GAAAM,SAAAF,IAGAO,sBAAA,SAAAF,EAAAG,EAAAC,GACA,GAAAT,IACAtG,KAAAmE,EAAAK,kCACAoC,SAAAD,EACAK,gBAAAD,EAGAb,GAAAM,SAAAF,MAMA/K,GAAAK,SAAA,oBAAA6K,MC7BA,WACA,GAAAQ,GAAA1L,EAAAQ,SACA,kBAAA,sBAAA,gBAAA,qBACA,SAAAmK,EAAAzB,EAAAyC,EAAAC,GACA,GAAAhD,GAAAM,EAAAN,YAGAiD,EAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAjB,IACAtG,KAAAuH,EAAA,KAAApD,EAAAc,uBACAd,EAAAe,mBACAmC,GAAAA,EACAC,MAAAA,EAGApB,GAAAM,SAAAF,IAIAkB,EAAA,SAAAH,EAAAC,EAAAC,GACA,GAAAjB,IACAtG,KAAAuH,EAAA,KAAApD,EAAAY,sBACAZ,EAAAa,kBACAqC,GAAAA,EACAC,MAAAA,EAGApB,GAAAM,SAAAF,IAIAmB,EAAA,SAAAJ,EAAAE,GACA,GAAAjB,IACAtG,KAAAuH,EAAA,KAAApD,EAAAgB,sBACAhB,EAAAiB,kBACAiC,GAAAA,EAGAnB,GAAAM,SAAAF,IAIAoB,EAAA,SAAAH,GACA,GAAAjB,IACAtG,KAAAuH,EAAA,KAAApD,EAAAU,sBACAV,EAAAW,kBACA6C,KAAAJ,EAAAI,KAGAzB,GAAAM,SAAAF,IAIAsB,EAAA,SAAA9J,EAAA+J,EAAAN,GACA,GAAAjB,IACAtG,KAAAuH,EAAA,KAAApD,EAAAQ,sBACAR,EAAAS,kBACA9G,KAAAA,EACAgK,SAAAD,EAGA3B,GAAAM,SAAAF,IAIAyB,EAAA,SAAAR,GACA,GAAAjB,IACAtG,KAAAmE,EAAAO,wBACAsD,MAAAT,EAAAS,MAGA9B,GAAAM,SAAAF,GAGAY,GAAAlI,GAAA,aAAA+I,EAEA,IAAAnF,IACAqF,QAAA,WACAf,EAAAgB,KAAA,eAGAC,OAAA,SAAArK,EAAA+J,GACAV,EAAAgB,OAAArK,EAAA+J,EAAAD,EAAAhG,QAAA9D,EAAA+J,KAGAO,OAAA,SAAAC,GACAlB,EAAAiB,OAAAC,EAAAX,IAGAY,QAAA,SAAAjB,EAAAC,GACAH,EAAAmB,QAAAjB,EAAAC,EAAAF,EAAAxF,QAAAyF,EAAAC,KAGAiB,OAAA,SAAAlB,EAAAC,GACAH,EAAAoB,OAAAlB,EAAAC,EAAAE,EAAA5F,QAAAyF,EAAAC,KAGA1H,OAAA,SAAAyH,GACAF,EAAAvH,OAAAyH,EAAAI,EAAA7F,QAAAyF,KAIA,OAAAzE,IAIArH,GAAAK,SAAA,oBAAAqL,MC1GA,WACA,GAAAuB,GAAAjN,EAAAQ,SACA,kBAAA,gBAAA,uBACA,SAAAmK,EAAAgB,EAAA7B,GACA,GAAAlB,GAAAkB,EAAAlB,WAgDA,OA7CA+C,GAAAlI,GAAA,cAAA,SAAAuI,GACA,GAAAA,EAAAI,KAAA,CACA,GAAArB,IACAtG,KAAAmE,EAAAmB,uBACAmD,MAAAlB,EAAAkB,MACAd,KAAAJ,EAAAI,KAGAzB,GAAAM,SAAAF,MAKAY,EAAAlI,GAAA,iBAAA,SAAAuI,GACA,GAAAjB,IACAtG,KAAAuH,EAAA,KAAApD,EAAAoB,qBACApB,EAAAqB,iBACAmC,KAAAJ,EAAAI,KACAc,MAAAlB,EAAAkB,MAGAvC,GAAAM,SAAAF,KAIAY,EAAAlI,GAAA,gBAAA,SAAAuI,GACA,GAAAjB,IACAtG,KAAAuH,EAAA,KAAApD,EAAAuB,+BACAvB,EAAAwB,2BAGAO,GAAAM,SAAAF,KAIAY,EAAAlI,GAAA,cAAA,SAAAuI,GACA,GAAAjB,IACAtG,KAAAuH,EAAA,KAAApD,EAAAyB,sBACAzB,EAAA0B,kBACA/H,KAAAyJ,EAAAzJ,KAGAoI,GAAAM,SAAAF,MAIAoC,MAAA,SAAAL,EAAAM,GAEAzB,EAAAgB,KAAA,kBACAG,MAAAA,EACAM,SAAAA,KAIAC,OAAA,WACA,GAAAtC,IACAtG,KAAAmE,EAAAsB,sBAGAS,GAAAM,SAAAF,IAGAuC,MAAA,SAAAJ,GACAA,GAEAvB,EAAAgB,KAAA,eACAO,MAAAA,KAKAK,eAAA,SAAAC,EAAAC,GAEA9B,EAAAgB,KAAA,iBACAe,IAAAF,EACA3C,MAAA4C,KAIAb,OAAA,SAAArK,GAEAoJ,EAAAgB,KAAA,eACApK,KAAAA,OAOAvC,GAAAK,SAAA,oBAAA4M,MChGA,WACA,GAAAU,GAAA3N,EAAAQ,SACA,kBAAA,6BAAA,iBACA,SAAAmK,EAAAJ,EAAAoB,GAKA,QAAAiC,GAAA5B,GACA,GAAAjB,IACAtG,KAAAmE,EAAA6B,mBACAoD,OAAA7B,EAAA6B,OAGAlD,GAAAM,SAAAF,GAGA,QAAA+C,GAAA9B,GACA+B,GAAA,CAEA,IAAAhD,IACAtG,KAAAmE,EAAA4B,oBACAqD,OAAA7B,EAAA6B,OAGAlD,GAAAM,SAAAF,GArBA,GAAAnC,GAAA2B,EAAA3B,YAEAmF,GAAA,CAsBApC,GAAAlI,GAAA,cAAAmK,GAEAjC,EAAAlI,GAAA,eAAAqK,EAEA,IAAAzG,IACAqF,QAAA,YACA,IAAAqB,IACAA,GAAA,EAEApC,EAAAgB,KAAA,kBAQA,OAFAtF,GAAAqF,UAEArF,GAIArH,GAAAK,SAAA,2BAAAsN,MCjDA,WACA,GAAAK,GAAAhO,EAAAQ,SACA,cACA,SAAAyN,GACA,OACAC,WAAA,SAAApB,EAAAqB,GAGAF,EAAAG,KAAAzB,KAAA,eACAG,MAAAA,GACAqB,IAGAE,aAAA,SAAAvB,EAAAwB,EAAAH,GAGAF,EAAAG,KAAAzB,KAAA,aACAG,MAAAA,EACAvK,KAAA+L,GACAH,MAMAnO,GAAAK,SAAA,oBAAA2N,MCzBA,WACA,GAAAO,GAAAvO,EAAAQ,SACA,cACA,SAAAyN,GACA,OACAxB,MAAA,SAAA0B,GAEAF,EAAAG,KAAAzB,KAAA,kBAAAwB,IAGAtB,OAAA,SAAAC,EAAAqB,GAEAF,EAAAG,KAAAzB,KAAA,oBACAG,MAAAA,GACAqB,IAGAvB,OAAA,SAAArK,EAAA+J,EAAA6B,GACA,GAAAnC,IACAzJ,KAAAA,EAGA+J,KACAN,EAAAA,UAAA,UAIAiC,EAAAG,KAAAzB,KAAA,mBAAAX,EAAAmC,IAGApB,QAAA,SAAAyB,EAAAC,EAAAN,GAEAF,EAAAG,KAAAzB,KAAA,qBACAb,GAAA0C,EACAzC,MAAA0C,GACAN,IAGAnB,OAAA,SAAAwB,EAAAC,EAAAN,GAEAF,EAAAG,KAAAzB,KAAA,oBACAb,GAAA0C,EACAzC,MAAA0C,GACAN,IAGA9J,OAAA,SAAAmK,EAAAL,GAEAF,EAAAG,KAAAzB,KAAA,oBACAb,GAAA0C,GACAL,MAMAnO,GAAAK,SAAA,oBAAAkO,MCxDA,WAGA,QAAAG,GAAAC,EAAAzC,GACA0C,EAAAjN,KAAAgN,GAEAE,WAAA,WAEAD,EAAAhN,QAEAsK,KACA,KAVA,GAAA0C,MAaAE,EAAA9O,EAAAQ,SACA,gBAAA,aAAA,aAAA,kBAAA,gCACA,SAAAqH,EAAAc,EAAAsF,EAAAtD,EAAAC,GAEA,GAAAhC,GAAAgC,EAAAhC,YAEA9F,EAAA6F,GACAoG,mBAAA,KACAC,qBAAA,OAIAC,EAAApH,KAAA3F,aAAAb,WACA6N,iBAAA,WACA,MAAAN,KA4BA,OAvBAK,GAAAhI,uBAAAnE,EAAAiM,oBACAE,EAAAhI,uBAAAnE,EAAAkM,sBAGAC,EAAAE,cAAAxE,EAAAtK,SAAA,SAAA0K,GACA,OAAAA,EAAAtG,MACA,IAAAmE,GAAAC,iBAEA,GAAA8F,IACA7C,GAAAmC,EAAAmB,UAAAC,OACA5K,KAAAsG,EAAAC,SACAF,KAAAC,EAAAD,KAIA4D,GAAAC,EAAAM,EAAAK,yBAGAL,EAAAM,2BAKAN,GAIAjP,GAAAK,SAAA,2BAAAyO,MC5DA,WACA,GAAAU,GAAAxP,EAAAQ,SACA,gBAAA,aAAA,kBAAA,eAAA,cAAA,sBAAA,kBAAA,mBACA,SAAAqH,EAAAc,EAAAgC,EAAA8E,EAAAC,EAAA5G,EAAA6G,EAAAC,GAEA,GAGAC,GAAAC,EAHAlH,EAAAE,EAAAF,YAMAmH,EAAAN,EAAAO,OAAA,SAEAlN,EAAA6F,GAEAsH,kBAAA,KACAC,yBAAA,OAIAC,EAAAtI,KAAA3F,aAAAb,WACA+O,mBAAA,WACA,GAAAC,GAAAR,CAcA,QAXA,IAAAD,EAAAU,aACA,IAAAX,EAAAY,aAEAF,EAAA,SAGA,IAAAV,EAAAY,cAAA,UAAAF,IAEAA,EAAA,QAGAN,EAAAjO,IAAA,QAAAuO,IAGAG,0BAAA,WACA,MAAAT,GAAAjO,IAAA,eAAAgO,IAGAW,iBAAA,SAAAlO,EAAAmO,GACAX,EAAAY,IAAA,QAAApO,EAAAmO,IAGAE,wBAAA,SAAArO,EAAAmO,GACAX,EAAAY,IAAA,eAAApO,EAAAmO,KAKAP,GAAAlJ,uBAAAnE,EAAAmN,mBACAE,EAAAlJ,uBAAAnE,EAAAoN,yBAEA,IAAAW,GAAA,SAAA9F,GAEAA,EAAAM,UACAN,EAAAM,WAAAwE,IAGAA,EAAA9E,EAAAM,SAEA8E,EAAAW,wBAIAC,EAAA,SAAAhG,GAEAA,EAAAU,iBACAV,EAAAU,kBAAAqE,IAGAA,EAAA/E,EAAAU,gBAEA0E,EAAAa,8BAEAH,EAAA9F,GAgBA,OAZAoF,GAAAhB,cAAAxE,EAAAtK,SAAA,SAAA0K,GACA,OAAAA,EAAAtG,MACA,IAAAmE,GAAAK,kCACA8H,EAAAhG,EACA,MAEA,KAAAnC,GAAAG,2BACA8H,EAAA9F,MAKAoF,GAIAnQ,GAAAK,SAAA,kBAAAmP,MClGA,WAGA,QAAAyB,GAAA1O,EAAA+J,GACA4E,EAAA3O,KAAAA,EACA2O,EAAAA,UAAA5E,EAGA,QAAA6E,GAAA/E,GACA,GAAAA,EAAA,CAIA,GAAArI,GAAAqN,EAAA1L,QAAA,KAAA0G,EAAAN,IAAA,GAEA,GAAA/H,GACAqN,EAAAzP,KAAAyK,IAIA,QAAAiF,GAAA5E,GACA2E,EAAA3E,MAGA,QAAA6E,GAAAC,EAAAC,GACA,MAAAJ,GAAAK,OAAA,SAAArF,GACA,GAAAsF,IAAA,CAUA,OAHAA,GALAF,EAKApF,EAAAL,MAAAtG,QAAA8L,GAAA,EAJAnF,EAAAL,MAAAtG,QAAA8L,IAAA,IAWA,QAAAI,GAAA7F,GACA,MAAAsF,GAAAxL,OAAA,KAAAkG,GAGA,QAAA8F,GAAA9F,GACA,GAAA/H,GAAAqN,EAAA1L,QAAA,KAAAoG,EAEA/H,IAAA,SACAqN,GAAArN,GAIA,QAAA8N,GAAA/F,EAAAC,GACA,GAAAhI,GAAAqN,EAAA1L,QAAA,KAAAoG,EAEAsF,GAAArN,IAAA/C,MAAAC,QAAAmQ,EAAArN,GAAAgI,QAEAqF,EAAArN,GAAAgI,MAAAzF,MAAAyF,GAIA,QAAA+F,GAAAhG,EAAAC,GACA,GAAAhI,GAAAqN,EAAA1L,QAAA,KAAAoG,EAEAsF,GAAArN,IAAA/C,MAAAC,QAAAmQ,EAAArN,GAAAgI,QAEAqF,EAAArN,GAAAgI,MAAA7F,UAAA6F,GAjEA,GAAAmF,GAAAE,KAqEAxB,EAAA5P,EAAAQ,SACA,gBAAA,aAAA,eAAA,kBAAA,kBAAA,uBACA,SAAAqH,EAAAc,EAAA8G,EAAA9E,EAAAgF,EAAAzG,GACA,GAAAN,GAAAM,EAAAN,YAEA9F,EAAA6F,GAEAoJ,aAAA,KACAC,iBAAA,KAEAC,UAAA,KACAC,cAAA,KAEAC,QAAA,KACAC,YAAA,KAEAC,SAAA,KACAC,aAAA,KAEAC,QAAA,KACAC,YAAA,KAEAC,QAAA,KACAC,YAAA,OAGAC,EAAA9K,KAAA3F,aAAAb,WACAuR,QAAA,WAIA,MAHA1B,KACAA,EAAAzB,EAAAoD,OAAA/Q,IAAA,SAEAoP,OAGAZ,SAAA,WACA,OAAA,IAAAlQ,KAAAwS,UAAAxS,WAGA0S,QAAA,SAAAhH,GACA,MAAA6F,GAAA7F,IAGAiH,SAAA,WACA,MAAA3B,IAGA4B,eAAA,SAAAzB,EAAAC,GACA,MAAAF,GAAAC,EAAAC,KAyEA,OArEAmB,GAAA1L,uBAAAnE,EAAAmP,WACAU,EAAA1L,uBAAAnE,EAAAoP,eAEAS,EAAA1L,uBAAAnE,EAAAiP,cACAY,EAAA1L,uBAAAnE,EAAAkP,kBAEAW,EAAA1L,uBAAAnE,EAAAqP,SACAQ,EAAA1L,uBAAAnE,EAAAsP,aAEAO,EAAA1L,uBAAAnE,EAAAuP,UACAM,EAAA1L,uBAAAnE,EAAAwP,cAEAK,EAAA1L,uBAAAnE,EAAAyP,SACAI,EAAA1L,uBAAAnE,EAAA0P,aAEAG,EAAA1L,uBAAAnE,EAAA2P,SACAE,EAAA1L,uBAAAnE,EAAA4P,aAEAC,EAAAxD,cAAAxE,EAAAtK,SAAA,SAAA0K,GAEA,OAAAA,EAAAtG,MACA,IAAAmE,GAAAO,wBACAkI,EAAAtG,EAAA0B,OACAkG,EAAAM,eACA,MAEA,KAAArK,GAAAQ,sBACA6H,EAAAlG,EAAAxI,KAAAwI,EAAAA,WACA4H,EAAAO,iBACA,MACA,KAAAtK,GAAAS,kBACAsJ,EAAAQ,oBACA,MAEA,KAAAvK,GAAAU,sBACA6H,EAAApG,EAAAqB,MACAuG,EAAAS,aACA,MACA,KAAAxK,GAAAW,kBACAoJ,EAAAU,gBACA,MAEA,KAAAzK,GAAAc,uBACAmI,EAAA9G,EAAAe,GAAAf,EAAAgB,OACA4G,EAAAW,cACA,MACA,KAAA1K,GAAAe,mBACAgJ,EAAAY,iBACA,MAEA,KAAA3K,GAAAY,sBACAsI,EAAA/G,EAAAe,GAAAf,EAAAgB,OACA4G,EAAAa,aACA,MACA,KAAA5K,GAAAa,kBACAkJ,EAAAc,gBACA,MAEA,KAAA7K,GAAAgB,sBACAgI,EAAA7G,EAAAe,IACA6G,EAAAe,aACA,MACA,KAAA9K,GAAAiB,kBACA8I,EAAAgB,oBAMAhB,GAIA3S,GAAAK,SAAA,kBAAAuP,MClMA,WAGA,QAAAgE,GAAA/F,GAGA,IAAA,GAFAgG,GAAAC,EAAArS,OAEAD,EAAA,EAAAqS,EAAArS,EAAAA,IAEA,GAAAsS,EAAAtS,GAAAuS,SAAAlG,EAAAkG,OAGA,YADAD,EAAAtS,GAAAqM,OAAAA,EAAAA,OAMAiG,GAAAnS,KAAAkM,GAGA,QAAAmG,GAAAD,GAGA,IAAA,GAFAF,GAAAC,EAAArS,OAEAD,EAAA,EAAAqS,EAAArS,EAAAA,IAEA,GAAAsS,EAAAtS,GAAAuS,SAAAA,EAEA,MAAAD,GAAAtS,GAAAqM,MAIA,OAAA,UAGA,QAAAoG,GAAApG,GACA7M,MAAAC,QAAA4M,KAEAiG,EAAAjG,GAnCA,GAAAiG,MAuCAI,EAAAlU,EAAAQ,SACA,gBAAA,aAAA,aAAA,kBAAA,8BACA,SAAAqH,EAAAc,EAAAsF,EAAAtD,EAAAJ,GAEA,GAAA3B,GAAA2B,EAAA3B,YAEA9F,EAAA6F,GACAwL,eAAA,OAIAC,EAAAvM,KAAA3F,aAAAb,WACAgT,cAAA,WACA,MAAAP,IAGAQ,sBAAA,SAAAP,GACA,MAAAC,GAAAD,KA8BA,OAzBAK,GAAAnN,uBAAAnE,EAAAqR,gBAGAC,EAAAjF,cAAAxE,EAAAtK,SAAA,SAAA0K,GACA,OAAAA,EAAAtG,MACA,IAAAmE,GAAA4B,oBAGAyJ,EAAAlJ,EAAA8C,QAGAuG,EAAAG,mBACA,MAEA,KAAA3L,GAAA6B,mBAGAmJ,EAAA7I,EAAA8C,QAGAuG,EAAAG,uBAKAH,GAIApU,GAAAK,SAAA,yBAAA6T,MC3FA,WAIA,QAAAM,GAAAjD,GACA,MAAA,UAAAnF,GACA,GAAAL,IAAAK,GAAAqI,OAAA1I,SAEA,OAAAA,GAAAtG,QAAA8L,IAAA,GAIA,QAAAmD,GAAAtI,GACA,MAAAoI,GAAA,UAAApI,GAIA,QAAAuI,GAAAvI,GACA,GAAAwI,IAAAH,OAAA3I,IAAA,KACA+I,GAAAzI,OAAAN,IAAA,IAEA,OAAA8I,KAAAC,EAGA,QAAAC,GAAA1I,GAIA,MAFAA,GAAAA,GAAAqI,MAEAC,EAAAtI,GACA,UAEAA,EAAA7J,KAGA,QAAA0O,GAAA1O,GACAkS,EAAAlS,KAAAA,EAGA,QAAAwS,GAAA7H,EAAAd,GACAqI,EAAArI,EACA4I,EAAA9H,EACA+H,GAAA,EAGAC,aAAAC,QAAA,QAAAH,GAGA,QAAAI,KACAX,EAAA,KACAO,EAAA,KACAC,GAAA,EAGAC,aAAAG,WAAA,SApDA,GAAAZ,GAAAO,EAAAC,GAAA,EAuDAtF,EAAA3P,EAAAQ,SACA,gBAAA,aAAA,eAAA,kBAAA,uBACA,SAAAqH,EAAAc,EAAA8G,EAAA9E,EAAAb,GACA,GAAAlB,GAAAkB,EAAAlB,YAEA9F,EAAA6F,GAEA2M,UAAA,KACAC,YAAA,KAEAC,iBAAA,KACAC,qBAAA,KAEAC,aAAA,KACAC,iBAAA,OAGAC,EAAA/N,KAAA3F,aAAAb,WACAkP,WAAA,WACA,MAAA0E,IAGAnC,QAAA,WAIA,MAHA2B,KACAA,EAAAhF,EAAAoD,OAAA/Q,IAAA,SAEA2S,GAGAoB,SAAA,WAIA,MAHAb,KACAA,EAAAE,aAAAY,QAAA,UAEAd,GAGAe,QAAAvB,EAAA,SAEAwB,QAAAxB,EAAA,SAEAyB,OAAAzB,EAAA,QAEA0B,SAAAxB,EAEAyB,OAAAxB,EAEAyB,QAAAtB,GAkDA,OA/CAc,GAAA3O,uBAAAnE,EAAAwS,WACAM,EAAA3O,uBAAAnE,EAAAyS,aAEAK,EAAA3O,uBAAAnE,EAAA0S,kBACAI,EAAA3O,uBAAAnE,EAAA2S,sBAEAG,EAAA3O,uBAAAnE,EAAA4S,cACAE,EAAA3O,uBAAAnE,EAAA6S,kBAEAC,EAAAzG,cAAAxE,EAAAtK,SAAA,SAAA0K,GAEA,OAAAA,EAAAtG,MACA,IAAAmE,GAAAmB,uBACAgL,EAAAhK,EAAAmC,MAAAnC,EAAAqB,MACAwJ,EAAAS,cACA,MAEA,KAAAzN,GAAAoB,qBACA+K,EAAAhK,EAAAmC,MAAAnC,EAAAqB,MACAwJ,EAAAS,cACA,MACA,KAAAzN,GAAAqB,iBACA2L,EAAAU,gBACA,MAEA,KAAA1N,GAAAsB,sBACAkL,IACAtV,OAAAyW,SAAAC,KAAA,GACA,MAEA,KAAA5N,GAAAuB,+BACAyL,EAAAa,qBACA,MACA,KAAA7N,GAAAwB,2BACAwL,EAAAc,wBACA,MAEA,KAAA9N,GAAAyB,sBACA4G,EAAAlG,EAAAxI,MACAqT,EAAAe,iBACA,MACA,KAAA/N,GAAA0B,kBACAsL,EAAAgB,wBAKAhB,GAIA5V,GAAAK,SAAA,kBAAAsP,MC5JA,WACA,GAAAhF,GAAA,WACA,MAAA,IAAA/K,GAAAiX,WAGA7W,GAAAK,SAAA,kBAAAsK,MCLA,WACA,GAAAgB,GAAA3L,EAAAQ,SACA,eAAA,kBAAA,mBACA,SAAAiP,EAAAE,EAAAC,GAGA,GAAAkH,GAAAC,OAAAC,UAGAC,EAAA,SAAAjL,GACAkL,QAAAC,IAAAnL,GAEA8K,EAAAM,SAAApL,EAAAqL,QAEAP,EAAA/R,KAAAxD,KAAAuV,EAAA9K,EAAAqL,MAAArL,GAMA,OAFA8K,GAAArT,GAAA,OAAAwT,IAGAtK,KAAA,SAAA9F,EAAAmF,GACAA,IACAA,MAGAA,EAAAqL,MAAAxQ,EAEAiQ,EAAAQ,MAAAtL,IAGAuL,OAAA,SAAAC,EAAA3Q,EAAAmF,GACAA,IACAA,MAGAA,EAAAqL,MAAAxQ,EAEAiQ,EAAAA,MAAAU,GAAAF,MAAAtL,IAGAvI,GAAA,SAAAoD,EAAAsH,GACA2I,EAAArT,GAAAoD,EAAAsH,MAMAnO,GAAAK,SAAA,gBAAAsL,MChDA,WACA,GAAA+D,GAAA1P,EAAAQ,SACA,gBACA,SAAAiP,GACA,GAAAgI,GAAAC,EAAAjI,EAAAO,OAAA,SAEA,QACA2H,KAAA,WACAF,EAAA5X,EAAA6X,EAAAE,WAEAH,EAAAI,WACAC,cAAA,EACAC,qBAAA,EACAC,sBAAA,IAGAP,EAAAE,QAGAD,OAAAA,EAEAO,SAAA,SAAAC,GACAT,GACAA,EAAAQ,SAAAC,MAOAlY,GAAAK,SAAA,cAAAqP,MC9BA,WAEA,QAAAyI,GAAA5V,GACA,GAAA6V,MACAC,IAEAjY,MAAAuQ,IAAA,SAAArQ,EAAAC,EAAA+X,GAKA,MAJAD,GAAA/X,GAAAC,EACAoH,SAAA2Q,GAAA,OAAAA,GACAlY,KAAAkY,OAAAhY,EAAAgY,GAEAlY,MAGAA,KAAA0B,IAAA,SAAAxB,GACA,MAAA+X,GAAA/X,IAGAF,KAAAkY,OAAA,SAAAhY,EAAAiY,GACAH,EAAA9X,IACAkY,aAAAJ,EAAA9X,IAGAqH,SAAA4Q,GAAA,OAAAA,EAEAH,EAAA9X,GAAAuO,WAAA,WACAzO,KAAAiE,OAAA/D,IACA+F,KAAAjG,MAAAmY,GAEAnY,KAAAiE,OAAA/D,IAIAF,KAAAiE,OAAA,SAAA/D,GAGA,aAFA+X,GAAA/X,SACA8X,GAAA9X,GACAF,MAGAA,KAAAqY,MAAA,WAEA,IAAA,GAAAjX,KAAA4W,GACAI,aAAAJ,EAAA5W,GAKA,OAFA6W,MACAD,KACAhY,MAGAA,KAAAgW,QAAA,WACA,MAAA7T,IAGAnC,KAAAwX,QAAA,WACA,MAAAS,IAIA,GAAA5I,GAAAzP,EAAAQ,QACA,WACA,OACAwP,OAAA,SAAAzN,GACA,MAAA,IAAA4V,GAAA5V,IAEAsQ,OAAA,GAAAsF,GAAA,YAKAnY,GAAAK,SAAA,eAAAoP,MCtEA,WACA,GAAAxB,GAAAjO,EAAAQ,SACA,gBACA,SAAAiP,GA+CA,QAAAiJ,KAEA,IAAA,GADAC,IAAA,EACAnX,EAAA,EAAAA,EAAAoX,EAAAnX,OAAAD,IAAA,CACA,IACAmX,EAAAC,EAAApX,KAEA,MAAAqX,GACA,SAEA,MAEA,MAAAF,GApDA,GAAAG,GAAA,qFAGAC,EAAA,kBAGAC,EAAA,YAGAC,EAAA,+BAGAC,EAAA,SAAAC,GAEA,MAAA,UAAA5Y,GAEA,MAAA4Y,GAAAjW,KAAA3C,KAIA6Y,EAAA,WACA,QAAAC,KACA,MAAAC,MAAAC,MAAA,OAAA,EAAAD,KAAAE,WAAAtY,SAAA,IAAAuY,UAAA,GAGA,MAAAJ,KAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAAA,IAAAA,KAQAT,GACA,WAAA,MAAA,IAAAc,iBACA,WAAA,MAAA,IAAAC,eAAA,mBACA,WAAA,MAAA,IAAAA,eAAA,mBACA,WAAA,MAAA,IAAAA,eAAA,uBAmBAC,EAAA,SAAAC,EAAAC,EAAAC,EAAA5L,GACA,GAAA6L,GAAAtB,GAEA,IAAAsB,EAAA,CAEA,kBAAAD,IACA5L,EAAA4L,EACAA,EAAA,MAEA,kBAAAD,KACA3L,EAAA2L,EACAA,EAAA,KAGA,IAAAG,GAAA,EAAA,OAAA,KAQA,IANAD,EAAAE,KAAAD,EAAAJ,GAAA,GAEAC,GACAE,EAAAG,iBAAA,eAAA,oBAGAJ,EAEA,IAAA,GAAAK,KAAAL,GAEAC,EAAAG,iBAAAC,EAAAL,EAAAK,GAIAJ,GAAAK,mBAAA,WACA,GAAA,GAAAL,EAAAM,WAAA,CACA,GAAA5I,EAEA,KACAA,EAAA6I,KAAAC,MAAAR,EAAAS,cACA,MAAA5B,IAEA,kBAAA1K,IACAA,EAAAuD,MAAAsI,KAIA,GAAAA,EAAAM,YAEAN,EAAArN,KAAA4N,KAAAG,UAAAZ,KAIA,QACA1L,MACAzB,KAAAiN,GAGAe,WACA7N,MAAAoM,EAAAJ,GACA1L,SAAA8L,EAAAF,GACA1K,KAAA4K,EAAAH,GACA3M,KAAA8M,EAAAD,IAGA7J,WACAC,KAAA+J,KAMApZ,GAAAK,SAAA,aAAA4N,MCrIAnO,OAAA8a,QAAA,WACA,GAAAA,GAAA5a,EAAAQ,SACA,eACA,SAAAkP,EAAA/D,GACA,GAAAkP,GAAA,QACAC,EAAA,kCAEA,QACAA,UAAAA,EACAD,QAAAA,EACA/Y,IAAA,SAAAC,GACA,MAAA/B,GAAA8B,IAAAC,IAEA4V,KAAA,WAEAjI,EAAAiI,UAMA,OAAAiD,OCrBA,IAAAG,GAAApb,EAAAqb,aAAAC,YAAA,YACAC,OAAA,WACA,GAAAxZ,GAAAtB,KAAA+a,MAAAC,KACAC,EAAA3Z,EAAA4Z,aAAA,GAAA,IAAA,GACAC,EAAAF,EAAA3Z,EAAA4Z,aACAE,EAAA9Z,EAAA+Z,UAEA,OACA9b,GAAA+b,cAAA,OAAAC,UAAA,wBACAhc,EAAA+b,cAAA,KAAAC,UAAA,4BACAhc,EAAA+b,cAAA,OAAA,KAAAF,EAAA,KACA7b,EAAA+b,cAAA,OAAA,KAAAH,QCXA,WACA,GAAAK,EAEA7b,gBAAA8b,MAAAlc,EAAAqb,aAAAC,YAAA,QACAa,gBAAA,WACA,OACAV,KAAA,GAAAW,QAIAC,kBAAA,WACA5b,KAAA6b,OACAL,EAAAM,YAAA,WACA9b,KAAA6b,QACA5V,KAAAjG,MAAA,MAGA+b,qBAAA,WACAC,cAAAR,IAGAK,KAAA,WACA7b,KAAAic,UACAjB,KAAA,GAAAW,SAIAb,OAAA,WACA,MACAvb,GAAA+b,cAAAX,GAAAK,KAAAhb,KAAAkc,MAAAlB,YC7BA,ICAAmB,IDAA5c,EAAAqb,aAAAC,YAAA,WACA7C,UAAA,KAEAoE,WACAC,MAAA9c,EAAA+c,UAAAC,OAAAC,YAGAC,gBAAA,WACA,OACAC,MAAA,SAIAhB,gBAAA,WACA,OACA5B,MAAA,IAIA6C,YAAA,WACA,GAAAD,GAAA1c,KAAA+a,MAAA2B,KACA,OAAA1c,MAAAkc,MAAApC,KACA,OAAA4C,EAAA,OAAA,KAEAA,GAGAE,SAAA,WACA5c,KAAA6c,aACA7c,KAAAic,UACAnC,MAAA,KAKAgD,QAAA,WACA9c,KAAAgY,UAAAvJ,WAAAzO,KAAA4c,SAAA,MAGAG,QAAA,WACA3E,aAAApY,KAAAgY,YAGAgF,QAAA,WACAhd,KAAA+c,UACA/c,KAAAic,UACAnC,MAAA9Z,KAAAkc,MAAApC,QAIAgB,OAAA,WACA,GAAAmC,GAAA,YAAAjd,KAAA2c,cACA7C,GAAAA,KAAA9Z,KAAAkc,MAAApC,MAEAoD,EAAA/W,WAAA,aAAA,KAAA8W,GACAE,EAAAhX,WAAA,iBAAA,WAAA2T,EAEA,OACAva,GAAA+b,cAAA,QAAA8B,aAAApd,KAAA8c,QAAAO,aAAArd,KAAA+c,QAAAC,QAAAhd,KAAAgd,QAAAzB,UAAA4B,GACA5d,EAAA+b,cAAA,QAAAC,UAAA,kBACAvb,KAAA+a,MAAAsB,MACA9c,EAAA+b,cAAA,KAAAC,UAAA2B,KAGA3d,EAAA+b,cAAAa,GAAArZ,KAAA9C,KAAAkc,MAAApC,MACAva,EAAA+b,cAAA,OAAAC,UAAA,kBACAvb,KAAA+a,MAAAuC,eClEA/d,EAAAqb,aAAAC,YAAA,KACAC,OAAA,WACA,MAAA9a,MAAA+a,MAAAjY,KACA9C,KAAA+a,MAAAuC,SAEA,SCLAC,KAEAC,EAAAje,EAAAqb,aAAAC,YAAA,OACAmC,QAAA,SAAAvE,GAKA,GAJAzY,KAAA+a,MAAA0C,aACAzd,KAAA+a,MAAA0C,YAAAhF,IAGAzY,KAAA+a,MAAA2C,SAAA,CAEAjF,EAAAkF,gBAGA,IAAAhW,GAAA3H,KAAA+a,MAAA3E,MAAA,EACAzO,GAAAA,EAAApB,OAAAoB,EAAAtC,QAAA,KAAA,GAGAzF,EAAA8B,IAAA,eAAAmW,SAAAlQ,GAEA3H,KAAA4d,cAIAA,UAAA,WACA5d,KAAA+a,MAAA8C,aAAA7d,KAAA+a,MAAA+C,aAEAP,EAAAvd,KAAA+a,MAAA8C,aAAA7d,KAAA+a,MAAA+C,aAIAhD,OAAA,WACA,GAAAS,GAAAvb,KAAA+a,MAAAQ,SAEA,IAAAvb,KAAA+a,MAAA8C,aAAA7d,KAAA+a,MAAA+C,WAAA,CAEA,GAAAD,GAAA7d,KAAA+a,MAAA8C,YACAC,EAAA9d,KAAA+a,MAAA+C,UAGAP,GAAAM,KAAAC,IACAvC,EAAApV,WAAAoV,EAAA,WAIA,MACAhc,GAAA+b,cAAA,IAAA/b,EAAAwe,YAAA/d,KAAA+a,OAAAiC,QAAAhd,KAAAgd,QAAAzB,UAAAA,IACAvb,KAAA+a,MAAAuC,cC9CA,WACA3d,eAAAqe,QAAAze,EAAAqb,aAAAC,YAAA,UAEA4B,gBAAA,WACA,OACAwB,QAAA,kBAIAnD,OAAA,WACA,MACAvb,GAAA+b,cAAA,OAAAC,UAAA,oCACAhc,EAAA+b,cAAA,OAAAC,UAAA,WACAhc,EAAA+b,cAAA,OAAA4C,IAAA,8BACA3e,EAAA+b,cAAA,OAAAC,UAAA,QAAA2C,IAAA,8BAEAle,KAAA+a,MAAAkD,eChBA,WACA,GAAAE,GAAAC,CAOAze,gBAAA0e,WAAA9e,EAAAqb,aAAAC,YAAA,aACA4B,gBAAA,WACA,OACA6B,aACA5R,MAAA,sBACAwB,KAAA,0BAEAqQ,OAAA,qBAIA7C,gBAAA,WAEA,MAAA1b,MAAAwe,oBAGAA,iBAAA,WACA,OACAC,eAAA,EACAC,cAAA,EACAC,eAAA,EACAC,cAAA,IAIAC,mBAAA,WACAV,IACAA,EAAA3D,QAAA9Y,IAAA,eAEA0c,IACAA,EAAA5D,QAAA9Y,IAAA,uBAIAod,aAAA,SAAArG,GACAA,EAAAkF,gBAEA,IAAAjR,GAAAnN,EAAAwf,YAAA/e,KAAAgf,KAAAtS,OAAAvM,MAAA8e,OACA/Q,EAAA3O,EAAAwf,YAAA/e,KAAAgf,KAAA9Q,MAAA/N,MAAA8e,MAKA,OAHAjf,MAAAic,SAAAjc,KAAAwe,oBAGA9R,GAAAwB,EASAiQ,EAAA5D,UAAA7N,MAAAA,GAQAyR,EAAA5D,UAAArM,KAAAA,OAOAkQ,GAAAnQ,aAAAvB,EAAAwB,EAAA,SAAAtC,GACAA,EAAAsT,WAPAlf,MAAAic,UACA2C,cAAA,QATA5e,MAAAic,UACA0C,eAAA,QAVA3e,MAAAic,UACAwC,eAAA/R,EACAgS,cAAAxQ,KAqCA4M,OAAA,WACA,GAAAqE,GAAAhZ,YACAiZ,QAAApf,KAAAkc,MAAAuC,eACAze,KAAAkc,MAAAyC,gBAGAU,EAAAlZ,YACAiZ,QAAApf,KAAAkc,MAAAwC,cACA1e,KAAAkc,MAAA0C,cAGA,OACArf,GAAA+b,cAAA,QAAAC,UAAA,6BAAA+D,SAAAtf,KAAA8e,cAEAvf,EAAA+b,cAAA,OAAAC,UAAA,iBACAhc,EAAA+b,cAAA,OAAAC,UAAA,iBACAhc,EAAA+b,cAAA,OAAAC,UAAA,gDACAhc,EAAA+b,cAAA,KAAAC,UAAA,qBACAhc,EAAA+b,cAAA,SAAAjX,KAAA,OAAAkX,UAAA4D,EAAAb,YAAAte,KAAA+a,MAAAuD,YAAA5R,MAAA6S,IAAA,YAIAhgB,EAAA+b,cAAA,OAAAC,UAAA,YACAhc,EAAA+b,cAAA,OAAAC,UAAA,+CACAhc,EAAA+b,cAAA,KAAAC,UAAA,gBACAhc,EAAA+b,cAAA,SAAAjX,KAAA,OAAAkX,UAAA8D,EAAAf,YAAAte,KAAA+a,MAAAuD,YAAApQ,KAAAqR,IAAA,YAKAhgB,EAAA+b,cAAA,UAAAjX,KAAA,SAAAkX,UAAA,oBAAAvb,KAAA+a,MAAAwD,eCzHA,WACA,GAAAJ,GAAAC,CAEAze,gBAAA6f,WAAAjgB,EAAAqb,aAAAC,YAAA,aACA4B,gBAAA,WACA,OACA6B,aACA5R,MAAA,uBAEA6R,OAAA,+BAIA7C,gBAAA,WACA,GAAAQ,GAAAlc,KAAAwe,kBAIA,OAFAtC,GAAAgD,MAAA,EAEAhD,GAGAsC,iBAAA,WACA,OACAC,eAAA,EACAE,eAAA,IAIAE,mBAAA,WACAV,IACAA,EAAA3D,QAAA9Y,IAAA,eAEA0c,IACAA,EAAA5D,QAAA9Y,IAAA,uBAIAod,aAAA,SAAArG,GACAA,EAAAkF,gBAEA,IAAAjR,GAAAnN,EAAAwf,YAAA/e,KAAAgf,KAAAtS,OAAAvM,MAAA8e,MAKA,OAHAjf,MAAAic,SAAAjc,KAAAwe,oBAGA9R,EAQAyR,EAAA5D,UAAA7N,MAAAA,OAOA0R,GAAAnQ,aAAAvB,EAAA,SAAAd,GACAA,EAAAsT,MACAlf,KAAAic,UACAiD,MAAA,KAGAjZ,KAAAjG,WAZAA,MAAAic,UACA0C,eAAA,QATA3e,MAAAic,UACAwC,eAAA/R,KAwBAoO,OAAA,WACA,GAAAqE,GAAAhZ,YACAiZ,QAAApf,KAAAkc,MAAAuC,eACAze,KAAAkc,MAAAyC,gBAGAO,EAAAlf,KAAAkc,MAAAgD,IAEA,OACA3f,GAAA+b,cAAA,QAAAC,UAAA,6BAAA+D,SAAAtf,KAAA8e,cACAvf,EAAA+b,cAAAa,GAAArZ,MAAAoc,GACA3f,EAAA+b,cAAA,OAAAC,UAAA,iBACAhc,EAAA+b,cAAA,OAAAC,UAAA,iBACAhc,EAAA+b,cAAA,OAAAC,UAAA4D,EAAA,yDACA5f,EAAA+b,cAAA,KAAAC,UAAA,iCACAhc,EAAA+b,cAAA,SAAAjX,KAAA,OAAAia,YAAAte,KAAA+a,MAAAuD,YAAA5R,MAAA6S,IAAA,YAGAhgB,EAAA+b,cAAA,OAAAC,UAAA,iBACAhc,EAAA+b,cAAA,UAAAjX,KAAA,SAAAkX,UAAA,oCAAAvb,KAAA+a,MAAAwD,WAIAhf,EAAA+b,cAAAa,GAAArZ,KAAAoc,GACA3f,EAAA+b,cAAA,OAAAC,UAAA,QAAA,gDC/FA,WACA5b,eAAA8f,SAAAlgB,EAAAqb,aAAAC,YAAA,WACA4B,gBAAA,WACA,OACAiD,MAAA,UACAhV,MACA2B,MAAA,kBAKAyO,OAAA,WACA,MACAvb,GAAA+b,cAAA,OAAAC,UAAA,mBACAhc,EAAA+b,cAAA,OAAAC,UAAA,eACAhc,EAAA+b,cAAA,KAAAlF,KAAA,IAAAmF,UAAA,iBACAhc,EAAA+b,cAAA,KAAAC,UAAA,gBAEAhc,EAAA+b,cAAA,KAAA,KAAAtb,KAAA+a,MAAA2E,OACAngB,EAAA+b,cAAA3b,eAAA8b,MAAA,OAGAlc,EAAA+b,cAAA,OAAAC,UAAA,cACAhc,EAAA+b,cAAA,QAAAC,UAAA,YAAAvb,KAAA+a,MAAArQ,KAAA2B,OACA9M,EAAA+b,cAAA3b,eAAAggB,UAAAhG,SAAA,EAAAlN,QAAA,EAAAd,OAAA,EAAAiU,QAAA,EAAAC,UAAA,EAAApS,QAAA,SAOA+M,QACA9Y,IAAA,mBACA2O,iBAAA,OAAA9Q,EAAA+b,cAAA3b,eAAA8f,SAAA,UCjCA,WACA9f,eAAAmgB,UAAAvgB,EAAAqb,aAAAC,YAAA,YACA4B,gBAAA,WACA,OACAiD,MAAA,cAIA5E,OAAA,WACA,MACAvb,GAAA+b,cAAA,OAAAC,UAAA,mBACAhc,EAAA+b,cAAA,OAAAC,UAAA,eACAhc,EAAA+b,cAAA,KAAAlF,KAAA,IAAAmF,UAAA,iBACAhc,EAAA+b,cAAA,KAAAC,UAAA,gBAEAhc,EAAA+b,cAAA,KAAA,KAAAtb,KAAA+a,MAAA2E,OACAngB,EAAA+b,cAAA3b,eAAA8b,MAAA,OAGAlc,EAAA+b,cAAA3b,eAAAogB,UAAA,UAMAvF,QACA9Y,IAAA,mBACA2O,iBAAA,QAAA9Q,EAAA+b,cAAA3b,eAAAmgB,UAAA,UC3BA,WACAngB,eAAAqgB,aAAAzgB,EAAAqb,aAAAC,YAAA,eACA4B,gBAAA,WACA,OACAiD,MAAA,2BACAhV,MACAuV,KAAA,wBAKAnF,OAAA,WACA,MACAvb,GAAA+b,cAAA,OAAAC,UAAA,mBACAhc,EAAA+b,cAAA,MAAAC,UAAA,QAAAvb,KAAA+a,MAAA2E,OAEAngB,EAAA+b,cAAA,OAAAC,UAAA,QACAhc,EAAA+b,cAAAkC,GAAApH,KAAA,KAAApW,KAAA+a,MAAArQ,KAAAuV,WAOAzF,QACA9Y,IAAA,mBACA2O,iBAAA,YAAA9Q,EAAA+b,cAAA3b,eAAAqgB,aAAA,UC1BA,WACA,GAAAxK,GAAAjD,CAEA5S,gBAAAugB,iBAAA3gB,EAAAqb,aAAAC,YAAA,mBACA4B,gBAAA,WACA,OACA/R,MACAyV,aAAA,eACAC,aAAA,kBAKAvB,mBAAA,WACArJ,IACAA,EAAAgF,QAAA9Y,IAAA,oBAEA6Q,IACAA,EAAAiI,QAAA9Y,IAAA,qBAIAka,kBAAA,WACArJ,EAAA8N,uBAAArgB,KAAAsgB,YAGAvE,qBAAA,WACAxJ,EAAAgO,0BAAAvgB,KAAAsgB,YAGAA,UAAA,WACAtgB,KAAAwgB,eAGA1F,OAAA,WACA,IAAAtF,EAAAI,UACA,MAAArW,GAAA+b,cAAA3b,eAAAqgB,aAAA,KAGA,IAAA9R,GAAAqE,EAAAC,SAEA,OACAjT,GAAA+b,cAAA,OAAAC,UAAA,mBACAhc,EAAA+b,cAAA,OAAAC,UAAA,eACAhc,EAAA+b,cAAA,KAAAlF,KAAA,IAAAmF,UAAA,iBACAhc,EAAA+b,cAAA,KAAAC,UAAA,gBAEAhc,EAAA+b,cAAA,KAAA,KAAApN,EAAA/L,MACA5C,EAAA+b,cAAA3b,eAAA8b,MAAA,OAGAlc,EAAA+b,cAAA,OAAAC,UAAA,mBACAhc,EAAA+b,cAAA,MAAAC,UAAA,eAAAhc,EAAA+b,cAAA,KAAAC,UAAA,wBAAA,IAAAvb,KAAA+a,MAAArQ,KAAAyV,cACA5gB,EAAA+b,cAAA,OAAAC,UAAA,iBACAhc,EAAA+b,cAAA,OAAAC,UAAA,OACAhc,EAAA+b,cAAA,MAAAC,UAAA,sBAEAhc,EAAA+b,cAAA,KAAA,KACA/b,EAAA+b,cAAA,IAAA,KACA/b,EAAA+b,cAAA,KAAAC,UAAA,yBACAhc,EAAA+b,cAAA,OAAA,KAAA,UAIA/b,EAAA+b,cAAA,KAAA,KACA/b,EAAA+b,cAAA,IAAA,KACA/b,EAAA+b,cAAA,KAAAC,UAAA,4BACAhc,EAAA+b,cAAA,OAAA,KAAA,WAIA/b,EAAA+b,cAAA,KAAA,KACA/b,EAAA+b,cAAA,KAAAC,UAAA,WACAhc,EAAA+b,cAAA,KAAAC,UAAA,4BACAhc,EAAA+b,cAAA,OAAA,KAAA,yBASA/b,EAAA+b,cAAA,OAAAC,UAAA,cACAhc,EAAA+b,cAAA,MAAAC,UAAA,eAAAhc,EAAA+b,cAAA,KAAAC,UAAA,0BAAAvb,KAAA+a,MAAArQ,KAAA0V,cACA7gB,EAAA+b,cAAA,OAAAC,UAAA,iBACAhc,EAAA+b,cAAA,MAAAC,UAAA,QAAAhc,EAAA+b,cAAA,KAAAC,UAAA,wBAAA,8BACAhc,EAAA+b,cAAA3b,eAAA8gB,WAAA,MAEAlhB,EAAA+b,cAAA,MAAAC,UAAA,aAAAhc,EAAA+b,cAAA,KAAAC,UAAA,0BAAA,2BACAhc,EAAA+b,cAAA3b,eAAAggB,UAAAe,UAAA,UAQAlG,QACA9Y,IAAA,mBACA2O,iBAAA,WAAA9Q,EAAA+b,cAAA3b,eAAAugB,iBAAA;;ICpGA,WACA,GAAA1K,EAEA7V,gBAAAghB,iBAAAphB,EAAAqb,aAAAC,YAAA,mBACA4B,gBAAA,WACA,OACA/R,MACA0V,aAAA,kBAKAvB,mBAAA,WACArJ,IACAA,EAAAgF,QAAA9Y,IAAA,qBAIAka,kBAAA,WACApG,EAAAoL,uBAAA5gB,KAAAsgB,YAGAvE,qBAAA,WACAvG,EAAAqL,0BAAA7gB,KAAAsgB,YAGAA,UAAA,WACAtgB,KAAAwgB,eAGA1F,OAAA,WACA,GAAAtF,EAAAM,WACA,MAAAvW,GAAA+b,cAAA3b,eAAAqgB,aAAA,KAGA,IAAAhU,GAAAwJ,EAAA9C,UACAvQ,EAAAqT,EAAAQ,QAAAhK,EAEA,OACAzM,GAAA+b,cAAA,OAAAC,UAAA,mBACAhc,EAAA+b,cAAA,OAAAC,UAAA,eACAhc,EAAA+b,cAAA,KAAAlF,KAAA,IAAAmF,UAAA,iBACAhc,EAAA+b,cAAA,KAAAC,UAAA,gBAEAhc,EAAA+b,cAAA,KAAA,KAAAnZ,GACA5C,EAAA+b,cAAA3b,eAAA8b,MAAA,OAGAlc,EAAA+b,cAAA,OAAAC,UAAA,cACAhc,EAAA+b,cAAA,MAAAC,UAAA,eAAAhc,EAAA+b,cAAA,KAAAC,UAAA,wBAAAvb,KAAA+a,MAAArQ,KAAA0V,cACA7gB,EAAA+b,cAAA,OAAAC,UAAA,iBACAhc,EAAA+b,cAAA,OAAAC,UAAA,OACAhc,EAAA+b,cAAA,OAAAC,UAAA,iBACAhc,EAAA+b,cAAA,MAAAC,UAAA,QAAAhc,EAAA+b,cAAA,KAAAC,UAAA,wBAAA,8BACAhc,EAAA+b,cAAA3b,eAAAmhB,WAAA,OAGAvhB,EAAA+b,cAAA,OAAAC,UAAA,YACAhc,EAAA+b,cAAA,MAAAC,UAAA,QAAAhc,EAAA+b,cAAA,KAAAC,UAAA,wBAAA,4BACAhc,EAAA+b,cAAA3b,eAAAohB,mBAAA,cAUAvG,QACA9Y,IAAA,mBACA2O,iBAAA,KAAA9Q,EAAA+b,cAAA3b,eAAAghB,iBAAA,UCvEA,WACA,GAAApO,GAAAiD,CAEA7V,gBAAAqhB,WAAAzhB,EAAAqb,aAAAC,YAAA,aACAgE,mBAAA,WACAtM,IACAA,EAAAiI,QAAA9Y,IAAA,oBAEA8T,IACAA,EAAAgF,QAAA9Y,IAAA,qBAIAka,kBAAA,WACArJ,EAAA8N,uBAAArgB,KAAAihB,aAGAlF,qBAAA,WACAxJ,EAAAgO,0BAAAvgB,KAAAihB,aAGAA,WAAA,WACAjhB,KAAAwgB,eAGA1F,OAAA,WACA,GAAA5M,GAAAqE,EAAAC,SAEA,OACAjT,GAAA+b,cAAA,OAAAC,UAAA,wCACAhc,EAAA+b,cAAAa,GAAArZ,KAAA0S,EAAAI,WACArW,EAAA+b,cAAAkC,GAAApH,KAAA,cACAlI,EAAA/L,KAAA,IAAA5C,EAAA+b,cAAA,KAAAC,UAAA,4BAGAhc,EAAA+b,cAAAa,GAAArZ,MAAA0S,EAAAI,WACArW,EAAA+b,cAAA,MAAA,KACApN,EAAA/L,cCrCA,WACAxC,eAAAuhB,UAAA3hB,EAAAqb,aAAAC,YAAA,YACAC,OAAA,WACA,GAAA1U,GAAAD,WAAA,YAAA,KAAAnG,KAAA+a,MAAAkC,MAAA,GAEA,OACA1d,GAAA+b,cAAA,QAAAC,UAAA,sCACAhc,EAAA+b,cAAA,KAAAC,UAAAnV,IACApG,KAAA+a,MAAAsB,aCRA,WACA,GAAA7G,GAAA3I,CAEAlN,gBAAAwhB,SAAA5hB,EAAAqb,aAAAC,YAAA,WACA4B,gBAAA,WACA,OACA/R,MACA0W,WAAA,cACAC,WAAA,aACAC,WAAA,cACA1K,QAAA,YACA2K,WAAA,kBAKA1C,mBAAA,WAEArJ,IACAA,EAAAgF,QAAA9Y,IAAA,oBAGAmL,IACAA,EAAA2N,QAAA9Y,IAAA,uBAIAoZ,OAAA,WACA,MACAvb,GAAA+b,cAAA,OAAAC,UAAA,0BACAhc,EAAA+b,cAAA,OAAAC,UAAA,cACAhc,EAAA+b,cAAA3b,eAAAqhB,WAAA,MAEAzhB,EAAA+b,cAAA3b,eAAAuhB,WAAA7E,MAAArc,KAAA+a,MAAArQ,KAAA0W,aACA7hB,EAAA+b,cAAA3b,eAAA6hB,gBAAA,MAEAjiB,EAAA+b,cAAA,MAAAC,UAAA,gBACAhc,EAAA+b,cAAAa,GAAArZ,MAAA0S,EAAAM,YACAvW,EAAA+b,cAAA,KAAA,KACA/b,EAAA+b,cAAAkC,GAAApH,KAAA,OAAAyH,YAAA,YAAAC,WAAA,MACAve,EAAA+b,cAAA,KAAAC,UAAA,yBAAA,IAAAvb,KAAA+a,MAAArQ,KAAA2W,cAIA9hB,EAAA+b,cAAAa,GAAArZ,MAAA0S,EAAAM,YACAvW,EAAA+b,cAAA,KAAA,KACA/b,EAAA+b,cAAAkC,GAAApH,KAAA,WAAAqH,YAAA5Q,EAAAI,QACA1N,EAAA+b,cAAA,KAAAC,UAAA,6BAAA,IAAAvb,KAAA+a,MAAArQ,KAAA4W,cAIA/hB,EAAA+b,cAAAa,GAAArZ,KAAA0S,EAAAM,YACAvW,EAAA+b,cAAA,KAAA,KACA/b,EAAA+b,cAAAkC,GAAApH,KAAA,WACA7W,EAAA+b,cAAA,KAAAC,UAAA,4BAAA,IAAAvb,KAAA+a,MAAArQ,KAAAkM,YAMArX,EAAA+b,cAAA3b,eAAAuhB,WAAA7E,MAAArc,KAAA+a,MAAArQ,KAAA6W,aAEAhiB,EAAA+b,cAAA,MAAAC,UAAA,WACAhc,EAAA+b,cAAA,KAAA,KACA/b,EAAA+b,cAAAkC,GAAApH,KAAA,SAAAyH,YAAA,YAAAC,WAAA,QACAve,EAAA+b,cAAA,KAAAC,UAAA,2BAAA,QACAhc,EAAA+b,cAAA,QAAAC,UAAA,gBAAA,OAGAhc,EAAA+b,cAAA,KAAA,KACA/b,EAAA+b,cAAAkC,GAAApH,KAAA,UAAAyH,YAAA,YAAAC,WAAA,SACAve,EAAA+b,cAAA,KAAAC,UAAA,6BAAA,WAGAhc,EAAA+b,cAAA,KAAA,KACA/b,EAAA+b,cAAAkC,GAAApH,KAAA,gBACA7W,EAAA+b,cAAA,KAAAC,UAAA,6BAAA,aACAhc,EAAA+b,cAAA,QAAAC,UAAA,gBAAA,QAGAhc,EAAA+b,cAAAa,GAAArZ,KAAA0S,EAAAI,WACArW,EAAA+b,cAAA,KAAA,KACA/b,EAAA+b,cAAAkC,GAAApH,KAAA,eACA7W,EAAA+b,cAAA,KAAAC,UAAA,yBAAA,+BCnFA,WACA,GAAA/F,EAEA7V,gBAAA6hB,gBAAAjiB,EAAAqb,aAAAC,YAAA,kBACA4B,gBAAA,WACA,OACA/R,MACAuC,OAAA,cACAF,MAAA,YACA0U,QAAA,uBACAvT,KAAA,uBAKA2Q,mBAAA,WACArJ,IACAA,EAAAgF,QAAA9Y,IAAA,qBAIAka,kBAAA,WACApG,EAAAoL,uBAAA5gB,KAAAihB,aAGAlF,qBAAA,WACAvG,EAAAqL,0BAAA7gB,KAAAihB,aAGAA,WAAA,WACAjhB,KAAAwgB,eAGA1F,OAAA,WACA,GAAA9O,GAAAwJ,EAAA9C,UACAvQ,EAAAqT,EAAAQ,QAAAhK,EAEA,OACAzM,GAAA+b,cAAA,QAAAC,UAAA,+BACAhc,EAAA+b,cAAA,OAAAC,UAAA,UACAhc,EAAA+b,cAAA3b,eAAA+hB,YAAA1V,KAAAA,KAEAzM,EAAA+b,cAAA,QAAAC,UAAA,YAAApZ,GACA5C,EAAA+b,cAAA,OAAA,KAAA/b,EAAA+b,cAAA,KAAAC,UAAA,oCAAA,oBC3CA,WACA5b,eAAAgiB,aAAApiB,EAAAqb,aAAAC,YAAA,eACA4B,gBAAA,WACA,OACAlO,cACAlK,KAAA,OACAqG,KAAA,yDAKAoQ,OAAA,WACA,GAAA1U,GAAAD,WAAA,iBAAA,0BAAA,sBAAA,MAAAnG,KAAA+a,MAAAxM,aAAAlK,KAEA,OACA9E,GAAA+b,cAAA,OAAAC,UAAAnV,GACA7G,EAAA+b,cAAA,OAAA,KAAAtb,KAAA+a,MAAAxM,aAAA7D,aChBA,WACA,GAAAmE,EAEAlP,gBAAAiiB,uBAAAriB,EAAAqb,aAAAC,YAAA,yBACAgE,mBAAA,WACAhQ,IACAA,EAAA2L,QAAA9Y,IAAA,8BAIAka,kBAAA,WACA/M,EAAAgT,6BAAA7hB,KAAAihB,YACApS,EAAAiT,+BAAA9hB,KAAAihB,aAGAlF,qBAAA,WACAlN,EAAAiT,+BAAA9hB,KAAAihB,aAGAA,WAAA,WACAjhB,KAAAwgB,eAGA1F,OAAA,WACA,GAAAiH,GAAAlT,EAAAC,sBAEA,OACAvP,GAAA+b,cAAA,OAAAC,UAAA,2DACAwG,EAAAC,IAAA,SAAAzT,GACA,MAAAhP,GAAA+b,cAAA3b,eAAAgiB,cAAAzhB,IAAAqO,EAAA7C,GAAA6C,aAAAA,aC7BA,WACA,GAAA4P,GAAA7S,EAAAiH,CAEA5S,gBAAA8gB,WAAAlhB,EAAAqb,aAAAC,YAAA,aACA4B,gBAAA,WACA,OACA6B,aACAnc,KAAA,mBAEAuI,MACAyB,SAAA,WACA+D,SAAA,2EACA+R,UAAA,QACAC,UAAA,8EAEA3D,OAAA,aAIA7C,gBAAA,WACA,GAAAyG,GAAAniB,KAAAwe,kBAIA,OAFA2D,GAAAC,WAAA,GAEAD,GAGA3D,iBAAA,WACA,OACA6D,cAAA,EACAC,cAAA,EACAC,gBAAA,IAIA1D,mBAAA,WACAV,IACAA,EAAA3D,QAAA9Y,IAAA,eAEA6Q,IACAA,EAAAiI,QAAA9Y,IAAA,oBAEA4J,IACAA,EAAAkP,QAAA9Y,IAAA,qBAGA,IAAAwM,GAAAqE,EAAAC,SAEAxS,MAAAic,UACAmG,WAAAlU,EAAA/L,KACAqgB,aAAAtU,EAAAA,aAIA0N,kBAAA,WACArJ,EAAA8N,uBAAArgB,KAAAihB,YACA1O,EAAAkQ,0BAAAziB,KAAA0iB,WAGA3G,qBAAA,WACAxJ,EAAAgO,0BAAAvgB,KAAAihB,YACA1O,EAAAoQ,6BAAA3iB,KAAA0iB,WAGAzB,WAAA,WACA,GAAAjhB,KAAA6c,YAAA,CAEA,GAAA3O,GAAAqE,EAAAC,SAEAxS,MAAAic,UACAmG,WAAAlU,EAAA/L,KACAqgB,aAAAtU,EAAAA,cAKAwU,SAAA,WACA5L,QAAAC,IAAA,sBAGA6L,aAAA,SAAAnK,GACA,GAAAA,EAAA9Q,QAAA8Q,EAAA9Q,OAAAxF,KAAA,CACA,GAAAqK,MACArK,EAAA,SAAAsW,EAAA9Q,OAAAxF,KACAhC,EAAAsY,EAAA9Q,OAAAxH,OAAA,EAEAqM,GAAArK,GAAAhC,EAEAH,KAAAic,SAAAzP,KAIAqW,aAAA,SAAA1iB,GACAH,KAAAic,UACAuG,aAAAriB,KAIA2iB,YAAA,WACA,MAAApjB,QAAAyW,SAAA4M,SAAA,KAAArjB,OAAAyW,SAAA6M,SAAA,KAGAlE,aAAA,SAAArG,GACAA,EAAAkF,gBAEA,IAAAxb,GAAAnC,KAAAkc,MAAAkG,WACAlW,EAAAlM,KAAAkc,MAAAsG,aACAtU,EAAAqE,EAAAC,SAKA,OAHAxS,MAAAic,SAAAjc,KAAAwe,oBAGArc,EAQA+J,IAAAgC,EAAAA,WAAA/L,IAAA+L,EAAA/L,SACAnC,MAAAic,UACAqG,cAAA,IAMAnE,EAAA5D,UAAArM,KAAA/L,OAOAmJ,GAAAkB,OAAArK,EAAA+J,OANAlM,MAAAic,UACAsG,gBAAA,QAjBAviB,MAAAic,UACAoG,cAAAlgB,KA0BA2Y,OAAA,WACA,GAAAsH,GAAApiB,KAAAkc,MAAAkG,WACAa,EAAA9c,YACAiZ,QAAApf,KAAAkc,MAAAmG,cACAriB,KAAAkc,MAAAoG,cACAtiB,KAAAkc,MAAAqG,iBAGAC,EAAAxiB,KAAAkc,MAAAsG,YAEA,OACAjjB,GAAA+b,cAAA,QAAAC,UAAA,6BAAA+D,SAAAtf,KAAA8e,cACAvf,EAAA+b,cAAA,OAAAC,UAAA,QACAhc,EAAA+b,cAAA,SAAAjX,KAAA,OAAAkX,UAAA0H,EAAA9iB,MAAAiiB,EAAA9D,YAAAte,KAAA+a,MAAAuD,YAAAnc,KAAA+gB,SAAAljB,KAAA4iB,aAAAzgB,KAAA,UAGA5C,EAAA+b,cAAA,OAAAC,UAAA,uBACAhc,EAAA+b,cAAA,QAAA,KACA/b,EAAA+b,cAAA,SAAAjX,KAAA,QAAAlC,KAAA,SAAAoZ,UAAA,qBAAA4H,eAAAX,EAAAU,SAAAljB,KAAA6iB,aAAA5c,KAAAjG,MAAA,KACAA,KAAA+a,MAAArQ,KAAA1K,WAEAT,EAAA+b,cAAA,SAAAC,UAAA,QACAhc,EAAA+b,cAAA,SAAAjX,KAAA,QAAAlC,KAAA,SAAAoZ,UAAA,qBAAA4H,gBAAAX,EAAAU,SAAAljB,KAAA6iB,aAAA5c,KAAAjG,MAAA,KACAA,KAAA+a,MAAArQ,KAAA1K,aAIAT,EAAA+b,cAAAa,GAAArZ,KAAA0f,GACAjjB,EAAA+b,cAAA,OAAAC,UAAA,QACAhc,EAAA+b,cAAA,KAAAC,UAAA,QAAAvb,KAAA+a,MAAArQ,KAAAwF,UAEA3Q,EAAA+b,cAAA,OAAAC,UAAA,iBACAhc,EAAA+b,cAAA,OAAAC,UAAA,yBACAhc,EAAA+b,cAAA,KAAAC,UAAA,eACAhc,EAAA+b,cAAA,SAAAnb,MAAAH,KAAA8iB,cAAAze,KAAA,OAAA+e,UAAA,QAMA7jB,EAAA+b,cAAAa,GAAArZ,MAAA0f,GACAjjB,EAAA+b,cAAA,KAAAC,UAAA,QAAAvb,KAAA+a,MAAArQ,KAAAwX,YAGA3iB,EAAA+b,cAAA,MAAA,KACA/b,EAAA+b,cAAA,UAAAjX,KAAA,SAAAkX,UAAA,qBACAvb,KAAA+a,MAAAwD,gBC1LA,WACA,GAAA/I,EAEA7V,gBAAA+hB,WAAAniB,EAAAqb,aAAAC,YAAA,aACAgE,mBAAA,WACArJ,IACAA,EAAAgF,QAAA9Y,IAAA,qBAIAoZ,OAAA,WACA,GACAuI,GADArX,EAAAhM,KAAA+a,MAAA/O,MAAAwJ,EAAA9C,SASA,OANA1G,GAAAqX,SACAA,EAAA,kCAAArX,EAAAqX,OAAA,sBAGAA,EAAAA,GAAA,2BAGA9jB,EAAA+b,cAAA,QAAAC,UAAA,8BACAhc,EAAA+b,cAAA,MAAA/b,EAAAwe,UAAAG,IAAAmF,GAAArjB,KAAA+a,eCtBA,WACA,GAAAoD,GAAAtR,EAAA2I,CAEA7V,gBAAAohB,mBAAAxhB,EAAAqb,aAAAC,YAAA,qBACA4B,gBAAA,WACA,OACA6B,aACAhR,IAAA,qBACAgW,MAAA,0BACAC,OAAA,oCAEAhF,OAAA,4BAIA7C,gBAAA,WACA,GAAAyG,GAAAniB,KAAAwe,kBAMA,OAJA2D,GAAAqB,UAAA,GACArB,EAAAsB,YAAA,GACAtB,EAAAuB,aAAA,GAEAvB,GAGA3D,iBAAA,WACA,OACAmF,aAAA,EACAC,eAAA,EACAC,gBAAA,EACAC,aAAA,EACAxB,cAAA,EACAyB,kBAAA,EACAxB,gBAAA,IAIA1D,mBAAA,WACAV,IACAA,EAAA3D,QAAA9Y,IAAA,eAEA8T,IACAA,EAAAgF,QAAA9Y,IAAA,oBAEAmL,IACAA,EAAA2N,QAAA9Y,IAAA,uBAIAka,kBAAA,WACApG,EAAAwO,2BAAAhkB,KAAAihB,YACAzL,EAAAyO,8BAAAjkB,KAAA0iB,WAGA3G,qBAAA,WACAvG,EAAA0O,8BAAAlkB,KAAAihB,YACAzL,EAAA2O,iCAAAnkB,KAAA0iB,WAGAzB,WAAA,WACAjhB,KAAA6c,aAEA7c,KAAAic,UACAuH,UAAA,GACAC,YAAA,GACAC,aAAA,MAKAhB,SAAA,WACA5L,QAAAC,IAAA,0BAGA6L,aAAA,SAAAnK,GACA,GAAAA,EAAA9Q,QAAA8Q,EAAA9Q,OAAAxF,KAAA,CACA,GAAAqK,MACArK,EAAA,SAAAsW,EAAA9Q,OAAAxF,KACAhC,EAAAsY,EAAA9Q,OAAAxH,OAAA,EAEAqM,GAAArK,GAAAhC,EAEAH,KAAAic,SAAAzP,KAIAsS,aAAA,SAAArG,GACAA,EAAAkF,gBAEA,IAAArQ,GAAAtN,KAAAkc,MAAAsH,UACAF,EAAAtjB,KAAAkc,MAAAuH,YACAF,EAAAvjB,KAAAkc,MAAAwH,YAKA,OAHA1jB,MAAAic,SAAAjc,KAAAwe,oBAGAlR,GAAAgW,GAAAC,EAUAD,IAAAC,MACAvjB,MAAAic,UACA8H,kBAAA,IAMAT,IAAAhW,MACAtN,MAAAic,UACAqG,cAAA,IAMAnE,EAAA5D,UAAAvN,SAAAsW,OAOAzW,GAAAM,eAAAG,EAAAgW,OANAtjB,MAAAic,UACAsG,gBAAA,QA3BAviB,MAAAic,UACA0H,aAAArW,EACAsW,eAAAN,EACAO,gBAAAN,KAkCAzI,OAAA,WACA,GAAA0I,GAAAxjB,KAAAkc,MAAAsH,UACAY,EAAAje,YACAiZ,QAAApf,KAAAkc,MAAAyH,aACA3jB,KAAAkc,MAAA4H,cAGAL,EAAAzjB,KAAAkc,MAAAuH,YACAY,EAAAle,YACAiZ,QAAApf,KAAAkc,MAAA0H,eACA5jB,KAAAkc,MAAAoG,cACAtiB,KAAAkc,MAAAqG,iBAGAmB,EAAA1jB,KAAAkc,MAAAwH,aACAY,EAAAne,YACAiZ,QAAApf,KAAAkc,MAAA2H,gBACA7jB,KAAAkc,MAAA6H,kBAGA,OACAxkB,GAAA+b,cAAA,QAAAC,UAAA,iCAAA+D,SAAAtf,KAAA8e,cACAvf,EAAA+b,cAAA,SAAAjX,KAAA,WAAAkX,UAAA6I,EAAA,QAAAjkB,MAAAqjB,EAAAlF,YAAAte,KAAA+a,MAAAuD,YAAAhR,IAAA4V,SAAAljB,KAAA4iB,aAAAzgB,KAAA,QACA5C,EAAA+b,cAAA,SAAAjX,KAAA,WAAAkX,UAAA8I,EAAA,QAAAlkB,MAAAsjB,EAAAnF,YAAAte,KAAA+a,MAAAuD,YAAAgF,MAAAJ,SAAAljB,KAAA4iB,aAAAzgB,KAAA,UACA5C,EAAA+b,cAAA,SAAAjX,KAAA,WAAAkX,UAAA+I,EAAA,QAAAnkB,MAAAujB,EAAApF,YAAAte,KAAA+a,MAAAuD,YAAAiF,OAAAL,SAAAljB,KAAA4iB,aAAAzgB,KAAA,WACA5C,EAAA+b,cAAA,UAAAC,UAAA,kBAAAlX,KAAA,UAAArE,KAAA+a,MAAAwD,eC/JA,WACA,GAAA/I,EAEA7V,gBAAA4kB,eAAAhlB,EAAAqb,aAAAC,YAAA,iBACA4B,gBAAA,WACA,OACA/R,MACA2Y,OAAA,SACAlhB,KAAA,OACAuK,MAAA,QACA/B,OAAA,UAEA+B,OAAA,EACAf,OAAA,IAIAkT,mBAAA,WACArJ,IACAA,EAAAgF,QAAA9Y,IAAA,qBAIAoZ,OAAA,WACA,MACAvb,GAAA+b,cAAA,OAAAC,UAAA,mCACAhc,EAAA+b,cAAA,OAAA,KAAAtb,KAAA+a,MAAArQ,KAAA2Y,QACA9jB,EAAA+b,cAAA,OAAA,KAAAtb,KAAA+a,MAAArQ,KAAAvI,MACA5C,EAAA+b,cAAAa,GAAArZ,KAAA9C,KAAA+a,MAAArO,OAAA8I,EAAAK,UACAtW,EAAA+b,cAAA,OAAA,KAAAtb,KAAA+a,MAAArQ,KAAAgC,QAEAnN,EAAA+b,cAAAa,GAAArZ,KAAA9C,KAAA+a,MAAApP,OAAA6J,EAAAI,WACArW,EAAA+b,cAAA,OAAA,KAAAtb,KAAA+a,MAAArQ,KAAAC,gBChCA,WACA,GAAAwT,GAAA3I,EAAAjD,EAAAjH,CAEA3L,gBAAA6kB,eAAAjlB,EAAAqb,aAAAC,YAAA,iBACA4B,gBAAA,WACA,OACA6B,aACA5R,MAAA,iBAEA6R,OAAA,0BAIA7C,gBAAA,WACA,GAAAyG,GAAAniB,KAAAwe,kBAIA,OAFA2D,GAAAzV,MAAA,GAEAyV,GAGA3D,iBAAA,WACA,OACAC,eAAA,EACAE,eAAA,IAIAE,mBAAA,WACAV,IACAA,EAAA3D,QAAA9Y,IAAA,eAEA8T,IACAA,EAAAgF,QAAA9Y,IAAA,oBAEA6Q,IACAA,EAAAiI,QAAA9Y,IAAA,oBAEA4J,IACAA,EAAAkP,QAAA9Y,IAAA,uBAIAka,kBAAA,WACArJ,EAAAkS,mBAAAzkB,KAAA0kB,YACAnS,EAAAoS,sBAAA3kB,KAAA0iB,WAGA3G,qBAAA,WACAxJ,EAAAqS,sBAAA5kB,KAAA0kB,YACAnS,EAAAsS,yBAAA7kB,KAAA0iB,WAGAE,aAAA,SAAAkC,GACA9kB,KAAAic,UACAvP,MAAAoY,EAAA7F,UAIAH,aAAA,SAAArG,GACAA,EAAAkF,gBAEA,IAAAjR,GAAA1M,KAAAkc,MAAAxP,KAKA,OAHA1M,MAAAic,SAAAjc,KAAAwe,oBAGAhJ,EAAAI,UAKAlJ,EAQAyR,EAAA5D,UAAA7N,MAAAA,OAOApB,GAAAmB,OAAAC,OANA1M,MAAAic,UACA0C,eAAA,QATA3e,MAAAic,UACAwC,eAAA,IAPA,QAyBAiG,WAAA,WACA1kB,KAAAic,UACAvP,MAAA,KAGA,kBAAA1M,MAAA+a,MAAAgK,UACA/kB,KAAA+a,MAAAgK,SAAArY,QAIAgW,SAAA,WACA5L,QAAAC,IAAA,6BAGA+D,OAAA,WAEA,IAAAtF,EAAAI,UACA,MAAA,KAGA,IAAAoP,GAAA7e,YACAiZ,QAAApf,KAAAkc,MAAAuC,eACAze,KAAAkc,MAAAyC,gBAGAsG,GACA9kB,MAAAH,KAAAkc,MAAAxP,MACAwY,cAAAllB,KAAA4iB,aAGA,OACArjB,GAAA+b,cAAA,OAAAC,UAAA,wCACAhc,EAAA+b,cAAA,QAAAgE,SAAAtf,KAAA8e,cAEAvf,EAAA+b,cAAA,OAAAC,UAAA,uCACAhc,EAAA+b,cAAA,KAAAC,UAAA,oBACAhc,EAAA+b,cAAA,SAAAjX,KAAA,OAAAkX,UAAAyJ,EAAA1G,YAAAte,KAAA+a,MAAAuD,YAAA5R,MAAAyY,UAAAF,KAGA1lB,EAAA+b,cAAA,UAAAjX,KAAA,SAAAkX,UAAA,+BAAAvb,KAAA+a,MAAAwD,gBCnIA,WACA,GAAA/I,GAAAjD,EAAAjH,CAEA3L,gBAAAylB,kBAAA7lB,EAAAqb,aAAAC,YAAA,oBACA4B,gBAAA,WACA,OACA/R,MACA2a,MAAA,iBACArZ,KAAA,cACA/H,OAAA,aAEA+H,MACAN,GAAA,GACAC,YAKA+P,gBAAA,WACA,OACAuC,SAAA,IAIAY,mBAAA,WACArJ,IACAA,EAAAgF,QAAA9Y,IAAA,oBAEA6Q,IACAA,EAAAiI,QAAA9Y,IAAA,oBAEA4J,IACAA,EAAAkP,QAAA9Y,IAAA,uBAIAka,kBAAA,WAEArJ,EAAA+S,oBAAAtlB,KAAAulB,aACAhT,EAAAiT,uBAAAxlB,KAAA0iB,UAEAnQ,EAAAkT,mBAAAzlB,KAAA0lB,YACAnT,EAAAoT,sBAAA3lB,KAAA0iB,WAGA3G,qBAAA,WAEAxJ,EAAAqT,uBAAA5lB,KAAAulB,aACAhT,EAAAsT,0BAAA7lB,KAAA0iB,UAEAnQ,EAAAuT,sBAAA9lB,KAAA0lB,YACAnT,EAAAwT,yBAAA/lB,KAAA0iB,WAGAsD,aAAA,WACAhmB,KAAA6c,aACA7c,KAAAic,UACAgC,SAAA,KAKAsH,YAAA,WACAvlB,KAAAgmB,gBAGAN,WAAA,WACA1lB,KAAAgmB,gBAGAtD,SAAA,WACA1iB,KAAAgmB,eACAlP,QAAAC,IAAA,wCAGAkP,WAAA,SAAA9U,EAAApD,GACA,GAAApD,GAAA,SAEA3K,MAAA+a,MAAA/O,KAAAL,MAAAtG,QAAA8L,IAAA,IACAxG,EAAA,UAGAW,EAAAX,GAAA3K,KAAA+a,MAAA/O,KAAAN,IAAAyF,KAGA+U,YAAA,SAAAvb,EAAA8N,GAIA,GAHAA,EAAAkF,kBAGA3d,KAAAkc,MAAA+B,QAAA,CAGA,GAAAkI,GAAA3Q,EAAAI,UACAwQ,EAAA5Q,EAAAG,QAAA3V,KAAA+a,MAAA/O,MACAqa,EAAA7Q,EAAAI,QAAA5V,KAAA+a,MAAA/O,MACAsa,EAAA9Q,EAAAO,OAAA/V,KAAA+a,MAAA/O,KAGA,OAAAma,GAAAG,GAAAF,GAIA,WAAAzb,GAAA0b,GAOA,OAJArmB,KAAAic,UACAgC,SAAA,IAGAtT,GACA,IAAA,QACA,IAAA,OACA3K,KAAAimB,WAAAtb,EACA,MAEA,KAAA,SACAW,EAAArH,OAAAjE,KAAA+a,MAAA/O,KAAAN,OAKAoP,OAAA,WACA,GAAAqL,GAAA3Q,EAAAI,SAEA,KAAA,IAAAuQ,EACA,MAAA,KAGA,IAAAE,GAAA7Q,EAAAI,QAAA5V,KAAA+a,MAAA/O,MACAua,EAAA/Q,EAAAK,OAAA7V,KAAA+a,MAAA/O,MACAsa,EAAA9Q,EAAAO,OAAA/V,KAAA+a,MAAA/O,MAYAwa,GAVArgB,YACAsgB,SAAAN,GAAAG,GAAAD,EACAK,OAAAH,IAGApgB,YACAsgB,SAAAN,GAAAG,EACAI,OAAAL,IAGAlgB,YACAsgB,SAAAN,GAAAG,GAAAD,IAGA,OACA9mB,GAAA+b,cAAA,QAAAC,UAAA,uCACAhc,EAAA+b,cAAA,OAAAC,UAAA,2BAAAyB,QAAAhd,KAAAkmB,YAAAjgB,KAAAjG,KAAA,SACAT,EAAA+b,cAAA,QAAA,KACA/b,EAAA+b,cAAA,SAAAjX,KAAA,WAAAkX,UAAA,wBAAAoL,QAAAJ,EAAAK,UAAA,IACA5mB,KAAA+a,MAAArQ,KAAAsB,OAIAzM,EAAA+b,cAAA,OAAAC,UAAA,gCAAAyB,QAAAhd,KAAAkmB,YAAAjgB,KAAAjG,KAAA,UACAT,EAAA+b,cAAA,QAAA,KACA/b,EAAA+b,cAAA,SAAAjX,KAAA,WAAAkX,UAAA,wBAAAoL,QAAAN,EAAAO,UAAA,IACA5mB,KAAA+a,MAAArQ,KAAA2a,QAIA9lB,EAAA+b,cAAA,UAAA0B,QAAAhd,KAAAkmB,YAAAjgB,KAAAjG,KAAA,UAAAub,UAAA,sBAAA6H,SAAAoD,GACAjnB,EAAA+b,cAAA,KAAAC,UAAA,0BCnKA,WACA,GAAA/F,GAAAxB,CAEArU,gBAAAknB,aAAAtnB,EAAAqb,aAAAC,YAAA,eACA4B,gBAAA,WACA,OACAzQ,MACAN,GAAA,GACAvJ,KAAA,SACAwJ,UAEAe,OAAA,EACAf,OAAA,EACA8B,QAAA,IAIAoR,mBAAA,WACArJ,IACAA,EAAAgF,QAAA9Y,IAAA,oBAEAsS,IACAA,EAAAwG,QAAA9Y,IAAA,4BAIAka,kBAAA,WACA5H,EAAA8S,yBAAA9mB,KAAAihB,aAGAlF,qBAAA,WACA/H,EAAA+S,4BAAA/mB,KAAAihB,aAGAA,WAAA,WACAjhB,KAAAwgB,eAGA1F,OAAA,WACA,GAAA1U,GACAjE,EAAAqT,EAAAQ,QAAAhW,KAAA+a,MAAA/O,KAEA,IAAAhM,KAAA+a,MAAAtN,OAAA,CACA,GAAAkG,GAAA3T,KAAA+a,MAAA/O,KAAAN,GACA+B,EAAAuG,EAAAE,sBAAAP,EAEAvN,GAAAD,WAAA,cAAAsH,EAAAtF,eAGA,MACA5I,GAAA+b,cAAA,OAAAC,UAAA,iCACAhc,EAAA+b,cAAA3b,eAAA+hB,YAAA1V,KAAAhM,KAAA+a,MAAA/O,OACAzM,EAAA+b,cAAA,QAAAC,UAAA,QAAApZ,GAEA5C,EAAA+b,cAAAa,GAAArZ,KAAA9C,KAAA+a,MAAAtN,QACAlO,EAAA+b,cAAA,QAAAC,UAAAnV,GAAA7G,EAAA+b,cAAA,KAAAC,UAAA,qBAGAhc,EAAA+b,cAAAa,GAAArZ,KAAA9C,KAAA+a,MAAArO,OAAA8I,EAAAK,UACAtW,EAAA+b,cAAA,QAAAC,UAAA,QAAAvb,KAAA+a,MAAA/O,KAAAU,QAGAnN,EAAA+b,cAAAa,GAAArZ,KAAA9C,KAAA+a,MAAApP,OAAA6J,EAAAI,WACArW,EAAA+b,cAAA3b,eAAAylB,mBAAApZ,KAAAhM,KAAA+a,MAAA/O,eC/DA,WACA,GAAAuG,GAAAjH,EAAA0I,EAAAzG,CAEA5N,gBAAAggB,SAAApgB,EAAAqb,aAAAC,YAAA,WACA4B,gBAAA,WACA,OACApQ,SACA4R,QAAA,gBACAtE,SAAA,EACAlN,QAAA,EACAd,OAAA,EACAiU,QAAA,EACAC,UAAA,EACApS,QAAA,IAIAiO,gBAAA,WACA,OACArP,SACA2a,QAAA,IAIAnI,mBAAA,WACAtM,IACAA,EAAAiI,QAAA9Y,IAAA,oBAEA4J,IACAA,EAAAkP,QAAA9Y,IAAA,sBAEAsS,IACAA,EAAAwG,QAAA9Y,IAAA,2BAEA6L,IACAA,EAAAiN,QAAA9Y,IAAA,6BAEA1B,KAAAic,UACA5P,MAAAkG,EAAAI,SAAA3S,KAAA+a,MAAA8E,aAIAjE,kBAAA,WAEArJ,EAAAkS,mBAAAzkB,KAAAinB,UAEA1U,EAAA+S,oBAAAtlB,KAAAinB,UAEA1U,EAAAkT,mBAAAzlB,KAAAinB,UAEA1U,EAAA2U,mBAAAlnB,KAAAinB,UAEA1U,EAAA4U,qBAAAnnB,KAAAinB,UAEA3b,EAAAgB,WAGAyP,qBAAA,WAEAxJ,EAAAqS,sBAAA5kB,KAAAinB,UAEA1U,EAAAqT,uBAAA5lB,KAAAinB,UAEA1U,EAAAuT,sBAAA9lB,KAAAinB,UAEA1U,EAAA6U,sBAAApnB,KAAAinB,UAEA1U,EAAA8U,wBAAArnB,KAAAinB,WAGAA,SAAA,WACAjnB,KAAA6c,aACA7c,KAAAic,UACA5P,MAAAkG,EAAAI,SAAA3S,KAAA+a,MAAA8E,UAAApa,OAAA,QACAuhB,QAAA,KAKAlM,OAAA,WACA,MACAvb,GAAA+b,cAAA,OAAAC,UAAA,4BACAhc,EAAA+b,cAAAa,GAAArZ,KAAA9C,KAAA+a,MAAApB,SACApa,EAAA+b,cAAA3b,eAAA4kB,gBAAA7X,MAAA1M,KAAA+a,MAAA6E,OAAAjU,MAAA3L,KAAA+a,MAAApP,SAEA3L,KAAAkc,MAAA7P,MAAA2V,IAAA,SAAAhW,GACA,MAAAzM,GAAA+b,cAAA3b,eAAAknB,cAAA3mB,IAAA8L,EAAAN,GAAAM,KAAAA,EAAAU,MAAA1M,KAAA+a,MAAA6E,OAAAjU,MAAA3L,KAAA+a,MAAApP,MAAA8B,OAAAzN,KAAA+a,MAAAtN,UACAxH,KAAAjG,OACAT,EAAA+b,cAAAa,GAAArZ,MAAA9C,KAAAkc,MAAA8K,QACAznB,EAAA+b,cAAA3b,eAAAqe,QAAA,OAEAze,EAAA+b,cAAAa,GAAArZ,KAAA9C,KAAA+a,MAAAtO,QACAlN,EAAA+b,cAAA3b,eAAA6kB,gBAAAO,SAAA/kB,KAAAsnB,uBC5FA,WACA,GAAAnJ,GAAA5L,EAAAiD,EAAA3I,CAEAlN,gBAAAogB,UAAAxgB,EAAAqb,aAAAC,YAAA,YACA4B,gBAAA,WACA,OACA/R,MACAgV,MAAA,qBAEApB,aACA5R,MAAA,gBACAM,SAAA,gBAEAuR,OAAA,iBAIA7C,gBAAA,WACA,GAAAyG,GAAAniB,KAAAwe,kBAKA,OAHA2D,GAAAoF,YAAA,GACApF,EAAAqF,eAAA,GAEArF,GAGA3D,iBAAA,WACA,OACAiJ,aAAA,EACAhJ,eAAA,EACAiJ,kBAAA,EACAnF,gBAAA,IAIA1D,mBAAA,WACAV,IACAA,EAAA3D,QAAA9Y,IAAA,eAEA6Q,IACAA,EAAAiI,QAAA9Y,IAAA,oBAEA8T,IACAA,EAAAgF,QAAA9Y,IAAA,oBAEAmL,IACAA,EAAA2N,QAAA9Y,IAAA,uBAIAka,kBAAA,WACApG,EAAAmS,oBAAA3nB,KAAA4nB,aACApS,EAAAqS,sBAAA7nB,KAAA0iB,WAGA3G,qBAAA,WACAvG,EAAAsS,uBAAA9nB,KAAA4nB,aACApS,EAAAuS,yBAAA/nB,KAAA0iB,WAGAkF,YAAA,WACA5nB,KAAA6c,aACA7c,KAAAwgB,eAIAkC,SAAA,WACA1iB,KAAA6c,aACA7c,KAAAic,UACAwL,aAAA,EACAD,eAAA,MAKA5E,aAAA,SAAAnK,GACA,GAAAA,EAAA9Q,QAAA8Q,EAAA9Q,OAAAxF,KAAA,CACA,GAAAqK,MACArK,EAAA,SAAAsW,EAAA9Q,OAAAxF,KACAhC,EAAAsY,EAAA9Q,OAAAxH,OAAA,EAEAqM,GAAArK,GAAAhC,EAEAH,KAAAic,SAAAzP,KAIAsS,aAAA,SAAArG,GACAA,EAAAkF,gBAEA,IAAAjR,GAAA1M,KAAAkc,MAAAqL,YACAva,EAAAhN,KAAAkc,MAAAsL,cAKA,OAHAxnB,MAAAic,SAAAjc,KAAAwe,oBAGA9R,GAAAM,EASAmR,EAAA5D,UAAA7N,MAAAA,OAOAG,GAAAE,MAAAL,EAAAM,OANAhN,MAAAic,UACAsG,gBAAA,QAVAviB,MAAAic,UACAwC,eAAA/R,EACAgb,kBAAA1a,KAkBA8N,OAAA,WAEA,GAAAtF,EAAArF,aACA,MAAA,KAGA,IAAAoX,GAAAvnB,KAAAkc,MAAAqL,YACApI,EAAAhZ,YACAiZ,QAAApf,KAAAkc,MAAAuC,eACAze,KAAAkc,MAAAqG,iBAGAiF,EAAAxnB,KAAAkc,MAAAsL,eACAQ,EAAA7hB,YACAiZ,QAAApf,KAAAkc,MAAAwL,kBAGA,OACAnoB,GAAA+b,cAAA,QAAAC,UAAA,6BACAhc,EAAA+b,cAAA,OAAAC,UAAA,mBACAhc,EAAA+b,cAAA,MAAAC,UAAA,eAAAhc,EAAA+b,cAAA,KAAAC,UAAA,0BAAA,IAAAvb,KAAA+a,MAAArQ,KAAAgV,OACAngB,EAAA+b,cAAA,OAAAC,UAAA,iBACAhc,EAAA+b,cAAA,QAAAgE,SAAAtf,KAAA8e,cACAvf,EAAA+b,cAAA,SAAAjX,KAAA,OAAAkX,UAAA4D,EAAA,QAAAhf,MAAAonB,EAAAjJ,YAAAte,KAAA+a,MAAAuD,YAAA5R,MAAAwW,SAAAljB,KAAA4iB,aAAAzgB,KAAA,UACA5C,EAAA+b,cAAA,SAAAjX,KAAA,WAAAkX,UAAAyM,EAAA,QAAA7nB,MAAAqnB,EAAAlJ,YAAAte,KAAA+a,MAAAuD,YAAAtR,SAAAkW,SAAAljB,KAAA4iB,aAAAzgB,KAAA,aACA5C,EAAA+b,cAAA,UAAAC,UAAA,kBAAAlX,KAAA,UAAArE,KAAA+a,MAAAwD,kBC9IA,WACA,GAAAJ,GAAAtR,EAAA2I,CAEA7V,gBAAAmhB,WAAAvhB,EAAAqb,aAAAC,YAAA,aACA4B,gBAAA,WACA,OACA6B,aACAnc,KAAA,aAEAoc,OAAA,aAIA7C,gBAAA,WACA,GAAAyG,GAAAniB,KAAAwe,kBAIA,OAFA2D,GAAAC,WAAA,GAEAD,GAGA3D,iBAAA,WACA,OACA6D,cAAA,EACAC,cAAA,EACAC,gBAAA,IAIA1D,mBAAA,WACAV,IACAA,EAAA3D,QAAA9Y,IAAA,eAEA8T,IACAA,EAAAgF,QAAA9Y,IAAA,oBAEAmL,IACAA,EAAA2N,QAAA9Y,IAAA,qBAGA,IAAAsK,GAAAwJ,EAAA9C,SAGA1S,MAAAic,UACAmG,WAAApW,EAAA7J,QAIAyZ,kBAAA,WACApG,EAAAoL,uBAAA5gB,KAAAihB,YACAzL,EAAAyS,0BAAAjoB,KAAA0iB,WAGA3G,qBAAA,WACAvG,EAAAqL,0BAAA7gB,KAAAihB,YACAzL,EAAA0S,6BAAAloB,KAAA0iB,WAGAzB,WAAA,WACA,GAAAjhB,KAAA6c,YAAA,CACA,GAAA7Q,GAAAwJ,EAAA9C,SAGA1S,MAAAic,UACAmG,WAAApW,EAAA7J,SAKAugB,SAAA,WACA5L,QAAAC,IAAA,sBAGA6L,aAAA,SAAAnK,GACA,GAAAA,EAAA9Q,QAAA8Q,EAAA9Q,OAAAxF,KAAA,CACA,GAAAqK,MACArK,EAAA,SAAAsW,EAAA9Q,OAAAxF,KACAhC,EAAAsY,EAAA9Q,OAAAxH,OAAA,EAEAqM,GAAArK,GAAAhC,EAEAH,KAAAic,SAAAzP,KAIAsS,aAAA,SAAArG,GACAA,EAAAkF,gBAEA,IAAAxb,GAAAnC,KAAAkc,MAAAkG,WACApW,EAAAwJ,EAAA9C,SAKA,OAHA1S,MAAAic,SAAAjc,KAAAwe,oBAGArc,EAQAA,IAAA6J,EAAA7J,SACAnC,MAAAic,UACAqG,cAAA,IAMAnE,EAAA5D,UAAAvO,KAAA7J,OAOA0K,GAAAL,OAAArK,OANAnC,MAAAic,UACAsG,gBAAA,QAjBAviB,MAAAic,UACAoG,cAAAlgB,KA0BA2Y,OAAA,WACA,GAAAsH,GAAApiB,KAAAkc,MAAAkG,WACAa,EAAA9c,YACAiZ,QAAApf,KAAAkc,MAAAmG,cACAriB,KAAAkc,MAAAoG,cACAtiB,KAAAkc,MAAAqG,gBAGA,OACAhjB,GAAA+b,cAAA,QAAAC,UAAA,6BAAA+D,SAAAtf,KAAA8e,cACAvf,EAAA+b,cAAA,SAAAjX,KAAA,OAAAkX,UAAA0H,EAAA9iB,MAAAiiB,EAAA9D,YAAAte,KAAA+a,MAAAuD,YAAAnc,KAAA+gB,SAAAljB,KAAA4iB,aAAAzgB,KAAA,SACA5C,EAAA+b,cAAA,UAAAjX,KAAA,SAAAkX,UAAA,qBAAAvb,KAAA+a,MAAAwD,eCrIA,WACA,GAAA9e,GAAA+V,EAAA3I,EAAAkD,EAAAjF,EAEAqd,EAAA,MAEAxoB,gBAAAyoB,QAAA7oB,EAAAqb,aAAAC,YAAA,UACAa,gBAAA,WACA,OACAzL,KAAA,OAIA4O,mBAAA,WAEArJ,IACAA,EAAAgF,QAAA9Y,IAAA,oBAGAmL,IACAA,EAAA2N,QAAA9Y,IAAA,qBACAmL,EAAAK,MAAAsI,EAAAC,aAGA1F,IACAA,EAAAyK,QAAA9Y,IAAA,oBAGAoJ,IACAA,EAAA0P,QAAA9Y,IAAA,sBAGAjC,IACAA,EAAA+a,QAAA9Y,IAAA,eACAjC,EAAA6X,OAAA/G,IAAA,uBAAA,SAAAtF,GACA,GAAAgF,GAAAhF,GAAAkd,CAGA5K,GAAA,aAAAtN,EAGAnF,EAAAC,eAAAkF,OAKA2L,kBAAA,WACApG,EAAAmS,oBAAA3nB,KAAAsgB,WACAvQ,EAAAsY,2BAAAroB,KAAAsgB,YAGAvE,qBAAA,WACAvG,EAAAsS,uBAAA9nB,KAAAsgB,WACAvQ,EAAAuY,8BAAAtoB,KAAAsgB,YAGAA,UAAA,WACA,GAAArQ,GAAAF,EAAAC,oBAEAC,GAMAjQ,KAAA6c,aAEA7c,KAAAic,UACAhM,KAAAA,IAPAxB,WAAA,WACA3D,EAAAC,eAAA,gBAWA+P,OAAA,WACA,MACAvb,GAAA+b,cAAA,OAAAC,UAAA,0BACAhc,EAAA+b,cAAA3b,eAAAwhB,SAAA,MAEA5hB,EAAA+b,cAAA,OAAAC,UAAA,QACAvb,KAAAkc,MAAAjM,MAGA1Q,EAAA+b,cAAA3b,eAAAiiB,uBAAA,cCkzIGriB,MAAMC,KAAKC","file":"app.min.js","sourcesContent":["var injector = (function() {\n    function Injector() {\n    \n        var dependencies = {};\n        var instances = {};\n\n        // Register a service\n        this.register = function(key, value) {\n            dependencies[key] = value;\n        };\n\n        // Resolve all dependencies for a service\n        this.resolve = function() {\n            var func, deps, scope, args = [];\n\n            if(typeof arguments[0] === 'string')\n            {\n                func = arguments[1];\n                deps = arguments[0].replace(/ /g, '').split(',');\n                scope = arguments[2] || {};\n            }\n            else if(Array.isArray(arguments[0]))\n            {\n                func = arguments[1];\n                deps = arguments[0];\n                scope = arguments[2] || {};\n            }\n            else\n            {\n                func = arguments[0];\n                deps = func.toString().match(/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m)[1].replace(/ /g, '').split(',');\n                scope = arguments[1] || {};\n            }\n\n            return function() {\n                var a = Array.prototype.slice.call(arguments, 0);\n\n                for(var i=0; i<deps.length; i++) {\n                    var d = deps[i];\n\n                    if(!instances[d] && typeof dependencies[d] === 'function') {\n                        instances[d] = dependencies[d]();\n                    }\n\n                    args.push(instances[d] && d !== '' ? instances[d] : a.shift());\n                }\n\n                return func.apply(scope || {}, args);\n            };\n        };\n\n        // Get on service\n        this.get = function(serviceName) {\n            var proxyService = this.resolve(serviceName, function(service) {\n                return service;\n            });\n\n            return proxyService();\n        };\n    }\n\n    return new Injector();\n})();","/*!\n * EventEmitter v4.2.11 - git.io/ee\n * Unlicense - http://unlicense.org/\n * Oliver Caldwell - http://oli.me.uk/\n * @preserve\n */\n\n;(function () {\n    'use strict';\n\n    /**\n     * Class for managing events.\n     * Can be extended to provide event functionality in other classes.\n     *\n     * @class EventEmitter Manages event registering and emitting.\n     */\n    function EventEmitter() {}\n\n    // Shortcuts to improve speed and size\n    var proto = EventEmitter.prototype;\n    var exports = this;\n    var originalGlobalValue = exports.EventEmitter;\n\n    /**\n     * Finds the index of the listener for the event in its storage array.\n     *\n     * @param {Function[]} listeners Array of listeners to search through.\n     * @param {Function} listener Method to look for.\n     * @return {Number} Index of the specified listener, -1 if not found\n     * @api private\n     */\n    function indexOfListener(listeners, listener) {\n        var i = listeners.length;\n        while (i--) {\n            if (listeners[i].listener === listener) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Alias a method while keeping the context correct, to allow for overwriting of target method.\n     *\n     * @param {String} name The name of the target method.\n     * @return {Function} The aliased method\n     * @api private\n     */\n    function alias(name) {\n        return function aliasClosure() {\n            return this[name].apply(this, arguments);\n        };\n    }\n\n    /**\n     * Returns the listener array for the specified event.\n     * Will initialise the event object and listener arrays if required.\n     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.\n     * Each property in the object response is an array of listener functions.\n     *\n     * @param {String|RegExp} evt Name of the event to return the listeners from.\n     * @return {Function[]|Object} All listener functions for the event.\n     */\n    proto.getListeners = function getListeners(evt) {\n        var events = this._getEvents();\n        var response;\n        var key;\n\n        // Return a concatenated array of all matching events if\n        // the selector is a regular expression.\n        if (evt instanceof RegExp) {\n            response = {};\n            for (key in events) {\n                if (events.hasOwnProperty(key) && evt.test(key)) {\n                    response[key] = events[key];\n                }\n            }\n        }\n        else {\n            response = events[evt] || (events[evt] = []);\n        }\n\n        return response;\n    };\n\n    /**\n     * Takes a list of listener objects and flattens it into a list of listener functions.\n     *\n     * @param {Object[]} listeners Raw listener objects.\n     * @return {Function[]} Just the listener functions.\n     */\n    proto.flattenListeners = function flattenListeners(listeners) {\n        var flatListeners = [];\n        var i;\n\n        for (i = 0; i < listeners.length; i += 1) {\n            flatListeners.push(listeners[i].listener);\n        }\n\n        return flatListeners;\n    };\n\n    /**\n     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.\n     *\n     * @param {String|RegExp} evt Name of the event to return the listeners from.\n     * @return {Object} All listener functions for an event in an object.\n     */\n    proto.getListenersAsObject = function getListenersAsObject(evt) {\n        var listeners = this.getListeners(evt);\n        var response;\n\n        if (listeners instanceof Array) {\n            response = {};\n            response[evt] = listeners;\n        }\n\n        return response || listeners;\n    };\n\n    /**\n     * Adds a listener function to the specified event.\n     * The listener will not be added if it is a duplicate.\n     * If the listener returns true then it will be removed after it is called.\n     * If you pass a regular expression as the event name then the listener will be added to all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to attach the listener to.\n     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.addListener = function addListener(evt, listener) {\n        var listeners = this.getListenersAsObject(evt);\n        var listenerIsWrapped = typeof listener === 'object';\n        var key;\n\n        for (key in listeners) {\n            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {\n                listeners[key].push(listenerIsWrapped ? listener : {\n                    listener: listener,\n                    once: false\n                });\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of addListener\n     */\n    proto.on = alias('addListener');\n\n    /**\n     * Semi-alias of addListener. It will add a listener that will be\n     * automatically removed after its first execution.\n     *\n     * @param {String|RegExp} evt Name of the event to attach the listener to.\n     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.addOnceListener = function addOnceListener(evt, listener) {\n        return this.addListener(evt, {\n            listener: listener,\n            once: true\n        });\n    };\n\n    /**\n     * Alias of addOnceListener.\n     */\n    proto.once = alias('addOnceListener');\n\n    /**\n     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.\n     * You need to tell it what event names should be matched by a regex.\n     *\n     * @param {String} evt Name of the event to create.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.defineEvent = function defineEvent(evt) {\n        this.getListeners(evt);\n        return this;\n    };\n\n    /**\n     * Uses defineEvent to define multiple events.\n     *\n     * @param {String[]} evts An array of event names to define.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.defineEvents = function defineEvents(evts) {\n        for (var i = 0; i < evts.length; i += 1) {\n            this.defineEvent(evts[i]);\n        }\n        return this;\n    };\n\n    /**\n     * Removes a listener function from the specified event.\n     * When passed a regular expression as the event name, it will remove the listener from all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to remove the listener from.\n     * @param {Function} listener Method to remove from the event.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.removeListener = function removeListener(evt, listener) {\n        var listeners = this.getListenersAsObject(evt);\n        var index;\n        var key;\n\n        for (key in listeners) {\n            if (listeners.hasOwnProperty(key)) {\n                index = indexOfListener(listeners[key], listener);\n\n                if (index !== -1) {\n                    listeners[key].splice(index, 1);\n                }\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of removeListener\n     */\n    proto.off = alias('removeListener');\n\n    /**\n     * Adds listeners in bulk using the manipulateListeners method.\n     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.\n     * You can also pass it a regular expression to add the array of listeners to all events that match it.\n     * Yeah, this function does quite a bit. That's probably a bad thing.\n     *\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to add.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.addListeners = function addListeners(evt, listeners) {\n        // Pass through to manipulateListeners\n        return this.manipulateListeners(false, evt, listeners);\n    };\n\n    /**\n     * Removes listeners in bulk using the manipulateListeners method.\n     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\n     * You can also pass it an event name and an array of listeners to be removed.\n     * You can also pass it a regular expression to remove the listeners from all events that match it.\n     *\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to remove.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.removeListeners = function removeListeners(evt, listeners) {\n        // Pass through to manipulateListeners\n        return this.manipulateListeners(true, evt, listeners);\n    };\n\n    /**\n     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.\n     * The first argument will determine if the listeners are removed (true) or added (false).\n     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\n     * You can also pass it an event name and an array of listeners to be added/removed.\n     * You can also pass it a regular expression to manipulate the listeners of all events that match it.\n     *\n     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {\n        var i;\n        var value;\n        var single = remove ? this.removeListener : this.addListener;\n        var multiple = remove ? this.removeListeners : this.addListeners;\n\n        // If evt is an object then pass each of its properties to this method\n        if (typeof evt === 'object' && !(evt instanceof RegExp)) {\n            for (i in evt) {\n                if (evt.hasOwnProperty(i) && (value = evt[i])) {\n                    // Pass the single listener straight through to the singular method\n                    if (typeof value === 'function') {\n                        single.call(this, i, value);\n                    }\n                    else {\n                        // Otherwise pass back to the multiple function\n                        multiple.call(this, i, value);\n                    }\n                }\n            }\n        }\n        else {\n            // So evt must be a string\n            // And listeners must be an array of listeners\n            // Loop over it and pass each one to the multiple method\n            i = listeners.length;\n            while (i--) {\n                single.call(this, evt, listeners[i]);\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Removes all listeners from a specified event.\n     * If you do not specify an event then all listeners will be removed.\n     * That means every event will be emptied.\n     * You can also pass a regex to remove all events that match it.\n     *\n     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.removeEvent = function removeEvent(evt) {\n        var type = typeof evt;\n        var events = this._getEvents();\n        var key;\n\n        // Remove different things depending on the state of evt\n        if (type === 'string') {\n            // Remove all listeners for the specified event\n            delete events[evt];\n        }\n        else if (evt instanceof RegExp) {\n            // Remove all events matching the regex.\n            for (key in events) {\n                if (events.hasOwnProperty(key) && evt.test(key)) {\n                    delete events[key];\n                }\n            }\n        }\n        else {\n            // Remove all listeners in all events\n            delete this._events;\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of removeEvent.\n     *\n     * Added to mirror the node API.\n     */\n    proto.removeAllListeners = alias('removeEvent');\n\n    /**\n     * Emits an event of your choice.\n     * When emitted, every listener attached to that event will be executed.\n     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.\n     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.\n     * So they will not arrive within the array on the other side, they will be separate.\n     * You can also pass a regular expression to emit to all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.\n     * @param {Array} [args] Optional array of arguments to be passed to each listener.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.emitEvent = function emitEvent(evt, args) {\n        var listeners = this.getListenersAsObject(evt);\n        var listener;\n        var i;\n        var key;\n        var response;\n\n        for (key in listeners) {\n            if (listeners.hasOwnProperty(key)) {\n                i = listeners[key].length;\n\n                while (i--) {\n                    // If the listener returns true then it shall be removed from the event\n                    // The function is executed either with a basic call or an apply if there is an args array\n                    listener = listeners[key][i];\n\n                    if (listener.once === true) {\n                        this.removeListener(evt, listener.listener);\n                    }\n\n                    response = listener.listener.apply(this, args || []);\n\n                    if (response === this._getOnceReturnValue()) {\n                        this.removeListener(evt, listener.listener);\n                    }\n                }\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of emitEvent\n     */\n    proto.trigger = alias('emitEvent');\n\n    /**\n     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.\n     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.\n     * @param {...*} Optional additional arguments to be passed to each listener.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.emit = function emit(evt) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return this.emitEvent(evt, args);\n    };\n\n    /**\n     * Sets the current value to check against when executing listeners. If a\n     * listeners return value matches the one set here then it will be removed\n     * after execution. This value defaults to true.\n     *\n     * @param {*} value The new value to check for when executing listeners.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.setOnceReturnValue = function setOnceReturnValue(value) {\n        this._onceReturnValue = value;\n        return this;\n    };\n\n    /**\n     * Fetches the current value to check against when executing listeners. If\n     * the listeners return value matches this one then it should be removed\n     * automatically. It will return true by default.\n     *\n     * @return {*|Boolean} The current value to check for or the default, true.\n     * @api private\n     */\n    proto._getOnceReturnValue = function _getOnceReturnValue() {\n        if (this.hasOwnProperty('_onceReturnValue')) {\n            return this._onceReturnValue;\n        }\n        else {\n            return true;\n        }\n    };\n\n    /**\n     * Fetches the events object and creates one if required.\n     *\n     * @return {Object} The events storage object.\n     * @api private\n     */\n    proto._getEvents = function _getEvents() {\n        return this._events || (this._events = {});\n    };\n\n    /**\n     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.\n     *\n     * @return {Function} Non conflicting EventEmitter class.\n     */\n    EventEmitter.noConflict = function noConflict() {\n        exports.EventEmitter = originalGlobalValue;\n        return EventEmitter;\n    };\n\n    // Expose the class either via AMD, CommonJS or the global object\n    if (typeof define === 'function' && define.amd) {\n        define(function () {\n            return EventEmitter;\n        });\n    }\n    else if (typeof module === 'object' && module.exports){\n        module.exports = EventEmitter;\n    }\n    else {\n        exports.EventEmitter = EventEmitter;\n    }\n}.call(this));","(function(){\n    Array.prototype.remove = function() {\n        var what, a = arguments, L = a.length, ax;\n        while (L && this.length) {\n            what = a[--L];\n            while ((ax = this.indexOf(what)) !== -1) {\n                this.splice(ax, 1);\n            }\n        }\n        return this;\n    };\n\n    Array.prototype.indexBy = function(prop, value) {\n        for(var index in this) {\n            if(this[index] && this[index][prop] === value) {\n                return index;\n            }\n        }\n        return -1;\n    };\n\n    Array.prototype.findBy = function(prop, value) {\n        var index = this.indexBy(prop, value);\n\n        if(index >= 0) {\n            return this[index];\n        }\n        return null;\n    };\n\n    Array.prototype.sortBy = function(prop, order) {\n        this.sort(function(a, b){\n            var result;\n\n            if(!a || !b)\n                return;\n\n            if(a[prop] < b[prop])\n            {\n                return (order === 'desc') ? 1 : -1;\n            } \n            else if(a[prop] > b[prop])\n            {\n                return (order === 'desc') ? -1 : 1;\n            }\n            \n            return 0;\n        });\n        return this;\n    };\n\n    Array.prototype.removeBy = function(prop, value) {\n        var index = this.indexBy(prop, value);\n        for(; index >= 0; index = this.indexBy(prop, value)) {\n            delete this[index];\n        }\n    };\n\n    Array.prototype.remove = function(value) {\n        var index = this.indexOf(value);\n        for(;index >= 0;index = this.indexOf(value)) {\n            delete this[index];\n        }\n    };\n\n    Array.prototype.removeAll = function(values) {\n        if(!Array.isArray(values)) {\n            values = [values];\n        }\n\n        values.forEach(function(value) {\n            this.remove(value);\n        }.bind(this));\n    };\n\n    Array.prototype.merge = function(values) {\n        if(!Array.isArray(values)) {\n            values = [values];\n        }\n\n        values.forEach(function(value){\n            if(this.indexOf(value) < 0) {\n                this.push(value);\n            }\n        }.bind(this));\n    };\n})();","window.classNames = function() {\n    'use strict';\n\n    var classes = '';\n\n    for (var i = 0; i < arguments.length; i++) {\n        var arg = arguments[i];\n        if (!arg) continue;\n\n        var argType = typeof arg;\n\n        if ('string' === argType || 'number' === argType) {\n            classes += ' ' + arg;\n\n        } else if (Array.isArray(arg)) {\n            classes += ' ' + classNames.apply(null, arg);\n\n        } else if ('object' === argType) {\n            for (var key in arg) {\n                if (arg.hasOwnProperty(key) && arg[key]) {\n                    classes += ' ' + key;\n                }\n            }\n        }\n    }\n\n    return classes.substr(1);\n};","(function(){\n\n    function addListenerName(eventName) {\n        return 'add' + eventName.dashToCapitalize() + 'Listener';\n    }\n    \n    function removeListenerName(eventName) {\n        return 'remove' + eventName.dashToCapitalize() + 'Listener';\n    }\n\n    function emitEventName(eventName) {\n        return 'emit' + eventName.dashToCapitalize();\n    }\n\n    EventEmitter.prototype.generateNamedFunctions = function(eventName) {\n        var self = this;\n\n        this[addListenerName(eventName)] = function(callback) {\n            self.on(eventName, callback);\n        };\n        \n        this[removeListenerName(eventName)] = function(callback) {\n            self.removeListener(eventName, callback);\n        };\n\n        this[emitEventName(eventName)] = function() {\n            self.emit(eventName);\n        };\n    };\n\n})();","/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function() {\n    var keyMirror = injector.resolve([], function() {\n        /**\n         * Constructs an enumeration with keys equal to their value.\n         *\n         * For example:\n         *\n         *   var COLORS = keyMirror({blue: null, red: null});\n         *   var myColor = COLORS.blue;\n         *   var isColorValid = !!COLORS[myColor];\n         *\n         * The last line could not be performed if the values of the generated enum were\n         * not equal to their keys.\n         *\n         *   Input:  {key1: val1, key2: val2}\n         *   Output: {key1: key1, key2: key2}\n         *\n         * @param {object} obj\n         * @return {object}\n         */\n        return function(obj) {\n            var ret = {};\n            var key;\n            \n            if (!(obj instanceof Object && !Array.isArray(obj))) {\n                throw new Error('keyMirror(...): Argument must be an object.');\n            }\n\n            for (key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    ret[key] = key;\n                }\n            }\n            \n            return ret;\n        };\n    });\n\n    injector.register('key-mirror', keyMirror);\n})();","(function() {\n    function ToObject(val) {\n        if (val === null || val === undefined) {\n            throw new TypeError('Object.assign cannot be called with null or undefined');\n        }\n\n        return Object(val);\n    }\n\n    var ObjectAssign = injector.resolve([], function() {\n        return Object.assign || function (target, source) {\n            var from;\n            var keys;\n            var to = ToObject(target);\n\n            for (var s = 1; s < arguments.length; s++) {\n                from = arguments[s];\n                keys = Object.keys(Object(from));\n\n                for (var i = 0; i < keys.length; i++) {\n                    to[keys[i]] = from[keys[i]];\n                }\n            }\n\n            return to;\n        };\n    });\n\n    injector.register('object-assign', ObjectAssign);\n})();","(function(){\n    String.prototype.capitalize = function(){\n        return this.toLowerCase().replace(/\\b\\w/g, function (m) {\n            return m.toUpperCase();\n        });\n    };\n\n    String.prototype.dashToCapitalize = function(){\n        return this.replace(/_/g, ' ').capitalize().replace(/ /g, '');\n    };\n})();","(function(){\n    var MiitNotifiactionsConstants = injector.resolve(\n        ['key-mirror'],\n        function(KeyMirror) {\n            return {\n                ActionTypes: KeyMirror({\n                    // Session Actions\n                    NEW_NOTIFICATION:   null\n                })\n            };\n        }\n    );\n\n    injector.register('miit-notifications-constants', MiitNotifiactionsConstants);\n})();","(function(){\n    var MiitPageConstants = injector.resolve(\n        ['key-mirror'],\n        function(KeyMirror) {\n            return {\n                ActionTypes: KeyMirror({\n                    // Change Page Actions\n                    CHANGE_MAIN_PAGE_COMPLETED: null,\n                    CHANGE_MIIT_PAGE_COMPLETED: null,\n                    CHANGE_APPLICATION_PAGE_COMPLETED: null,\n                })\n            };\n        }\n    );\n\n    injector.register('miit-page-constants', MiitPageConstants);\n})();","(function(){\n    var MiitTeamConstants = injector.resolve(\n        ['key-mirror'],\n        function(KeyMirror) {\n            return {\n                ActionTypes: KeyMirror({\n                    REFRESH_USERS_COMPLETED: null,\n                    // Update Actions\n                    UPDATE_TEAM_COMPLETED: null,\n                    UPDATE_TEAM_ERROR: null,\n                    // Invite Actions\n                    INVITE_USER_COMPLETED: null,\n                    INVITE_USER_ERROR: null,\n                    // Demote Actions\n                    DEMOTE_USER_COMPLETED: null,\n                    DEMOTE_USER_ERROR: null,\n                    // Promote Actions\n                    PROMOTE_USER_COMPLETED: null,\n                    PROMOTE_USER_ERROR: null,\n                    // Remove Actions\n                    REMOVE_USER_COMPLETED: null,\n                    REMOVE_USER_ERROR: null\n                })\n            };\n        }\n    );\n\n    injector.register('miit-team-constants', MiitTeamConstants);\n})();","(function(){\n    var MiitUserConstants = injector.resolve(\n        ['key-mirror'],\n        function(KeyMirror) {\n            return {\n                ActionTypes: KeyMirror({\n                    // Refresh user from token\n                    REFRESH_USER_COMPLETED: null,\n                    // Login Actions\n                    LOGIN_USER_COMPLETED: null,\n                    LOGIN_USER_ERROR: null,\n                    // Logout Actions\n                    LOGOUT_USER_COMPLETED: null,\n                    // Change Password Actions\n                    CHANGE_PASSWORD_USER_COMPLETED: null,\n                    CHANGE_PASSWORD_USER_ERROR: null,\n                    // Update Actions\n                    UPDATE_USER_COMPLETED: null,\n                    UPDATE_USER_ERROR: null\n                })\n            };\n        }\n    );\n\n    injector.register('miit-user-constants', MiitUserConstants);\n})();","(function(){\n    var MiitUserStatusConstants = injector.resolve(\n        ['key-mirror'],\n        function(KeyMirror) {\n            return {\n                ActionTypes: KeyMirror({\n                    // Change status Actions\n                    REFRESH_USER_STATUS: null,\n                    UPDATE_USER_STATUS: null\n                })\n            };\n        }\n    );\n\n    injector.register('miit-user-status-constants', MiitUserStatusConstants);\n})();","(function(){\n    var NotificationsActions = injector.resolve(\n        ['miit-dispatcher', 'miit-notifications-constants'],\n        function(MiitDispatcher, MiitNotificationsConstants) {\n            var ActionTypes = MiitNotificationsConstants.ActionTypes;\n\n            return {\n                new: function(type, text) {\n                    var action = {\n                        type: ActionTypes.NEW_NOTIFICATION,\n                        category: type || 'info',\n                        text: text\n                    };\n\n                    MiitDispatcher.dispatch(action);\n                }\n            };\n        }\n    );\n\n    injector.register('miit-notifications-actions', NotificationsActions);\n})();","(function(){\n    var PageActions = injector.resolve(\n        ['miit-dispatcher', 'miit-page-constants'],\n        function(MiitDispatcher, MiitPageConstants) {\n            var ActionTypes = MiitPageConstants.ActionTypes;\n\n            return {\n                changeMainPage: function(main) {\n                    var action = {\n                        type: ActionTypes.CHANGE_MAIN_PAGE_COMPLETED,\n                        mainPage: main\n                    };\n\n                    MiitDispatcher.dispatch(action);\n                },\n\n                changeApplicationPage: function(main, miit, application) {\n                    var action = {\n                        type: ActionTypes.CHANGE_APPLICATION_PAGE_COMPLETED,\n                        mainPage: main,\n                        applicationPage: application\n                    };\n\n                    MiitDispatcher.dispatch(action);\n                }\n            };\n        }\n    );\n\n    injector.register('miit-page-actions', PageActions);\n})();","(function(){\n    var TeamActions = injector.resolve(\n        ['miit-dispatcher', 'miit-team-constants', 'miit-realtime', 'miit-team-request'],\n        function(MiitDispatcher, MiitTeamConstants, MiitRealtime, MiitTeamRequest) {\n            var ActionTypes = MiitTeamConstants.ActionTypes;\n\n            // Handle promote\n            var onPromoted = function(id, roles, data) {\n                var action = {\n                    type: (data.done) ? ActionTypes.PROMOTE_USER_COMPLETED :\n                                        ActionTypes.PROMOTE_USER_ERROR,\n                    id: id,\n                    roles: roles\n                };\n\n                MiitDispatcher.dispatch(action);\n            };\n\n            // Handle demote\n            var onDemoted = function(id, roles, data) {\n                var action = {\n                    type: (data.done) ? ActionTypes.DEMOTE_USER_COMPLETED :\n                                        ActionTypes.DEMOTE_USER_ERROR,\n                    id: id,\n                    roles: roles\n                };\n\n                MiitDispatcher.dispatch(action);\n            };\n\n            // Handle remove\n            var onRemoved = function(id, data) {\n                var action = {\n                    type: (data.done) ? ActionTypes.REMOVE_USER_COMPLETED :\n                                        ActionTypes.REMOVE_USER_ERROR,\n                    id: id\n                };\n\n                MiitDispatcher.dispatch(action);\n            };\n\n            // Handle invite\n            var onInvited = function(data) {\n                var action = {\n                    type: (data.done) ? ActionTypes.INVITE_USER_COMPLETED :\n                                        ActionTypes.INVITE_USER_ERROR,\n                    user: data.user\n                };\n\n                MiitDispatcher.dispatch(action);\n            };\n\n            // Handle update\n            var onUpdated = function(name, publix, data) {\n                var action = {\n                    type: (data.done) ? ActionTypes.UPDATE_TEAM_COMPLETED :\n                                        ActionTypes.UPDATE_TEAM_ERROR,\n                    name:   name,\n                    public: publix\n                };\n\n                MiitDispatcher.dispatch(action);\n            };\n\n            // Handle refresh\n            var onRefresh = function(data) {\n                var action = {\n                    type:  ActionTypes.REFRESH_USERS_COMPLETED,\n                    users: data.users\n                };\n\n                MiitDispatcher.dispatch(action);\n            };\n\n            MiitRealtime.on('team:users', onRefresh);\n\n            var obj = {\n                refresh: function() {\n                    MiitRealtime.send('team:users');\n                },\n\n                update: function(name, publix) {\n                    MiitTeamRequest.update(name, publix, onUpdated.bind({}, name, publix));\n                },\n\n                invite: function(email) {\n                    MiitTeamRequest.invite(email, onInvited);\n                },\n\n                promote: function(id, roles) {\n                    MiitTeamRequest.promote(id, roles, onPromoted.bind({}, id, roles));\n                },\n\n                demote: function(id, roles) {\n                    MiitTeamRequest.demote(id, roles, onDemoted.bind({}, id, roles));\n                },\n\n                remove: function(id) {\n                    MiitTeamRequest.remove(id, onRemoved.bind({}, id));\n                }\n            };\n\n            return obj;\n        }\n    );\n\n    injector.register('miit-team-actions', TeamActions);\n})();","(function(){\n    var UserActions = injector.resolve(\n        ['miit-dispatcher', 'miit-realtime', 'miit-user-constants'],\n        function(MiitDispatcher, MiitRealtime, MiitUserConstants) {\n            var ActionTypes = MiitUserConstants.ActionTypes;\n\n            // Handle login from token\n            MiitRealtime.on('login:token', function(data) {\n                if(data.user) {\n                    var action = {\n                        type:  ActionTypes.REFRESH_USER_COMPLETED,\n                        token: data.token,\n                        user:  data.user\n                    };\n\n                    MiitDispatcher.dispatch(action);\n                }\n            });\n\n            // Handle login\n            MiitRealtime.on('login:password', function(data) {\n                var action = {\n                    type: (data.done) ? ActionTypes.LOGIN_USER_COMPLETED :\n                                        ActionTypes.LOGIN_USER_ERROR,\n                    user:  data.user,\n                    token: data.token\n                };\n\n                MiitDispatcher.dispatch(action);\n            });\n\n            // Handle password change\n            MiitRealtime.on('user:password', function(data) {\n                var action = {\n                    type: (data.done) ? ActionTypes.CHANGE_PASSWORD_USER_COMPLETED :\n                                        ActionTypes.CHANGE_PASSWORD_USER_ERROR\n                };\n\n                MiitDispatcher.dispatch(action);\n            });\n\n            // Handle update\n            MiitRealtime.on('user:update', function(data) {\n                var action = {\n                    type: (data.done) ? ActionTypes.UPDATE_USER_COMPLETED :\n                                        ActionTypes.UPDATE_USER_ERROR,\n                    name: data.name\n                };\n\n                MiitDispatcher.dispatch(action);\n            });\n\n            return {\n                login: function(email, password) {\n                    // Request the server\n                    MiitRealtime.send('login:password', {\n                        email:    email,\n                        password: password\n                    });\n                },\n\n                logout: function() {\n                    var action = {\n                        type:  ActionTypes.LOGOUT_USER_COMPLETED\n                    };\n\n                    MiitDispatcher.dispatch(action);\n                },\n\n                check: function(token) {\n                    if(token) {\n                        // Request the server\n                        MiitRealtime.send('login:token', {\n                            token: token\n                        });\n                    }\n                },\n\n                changePassword: function(password_old, password_new) {\n                    // Request the server\n                    MiitRealtime.send('user:password', {\n                        'old': password_old,\n                        'new': password_new\n                    });\n                },\n\n                update: function(name) {\n                    // Request the server\n                    MiitRealtime.send('user:update', {\n                        name: name\n                    });\n                }\n            };\n        }\n    );\n\n    injector.register('miit-user-actions', UserActions);\n})();","(function(){\n    var UserStatusActions = injector.resolve(\n        ['miit-dispatcher', 'miit-user-status-constants', 'miit-realtime'],\n        function(MiitDispatcher, MiitUserStatusConstants, MiitRealtime) {\n            var ActionTypes = MiitUserStatusConstants.ActionTypes;\n\n            var sending = false;\n\n            function onStatusUpdate(data) {\n                var action = {\n                    type:   ActionTypes.UPDATE_USER_STATUS,\n                    status: data.status\n                };\n\n                MiitDispatcher.dispatch(action);\n            }\n\n            function onStatusRefresh(data) {\n                sending = false;\n\n                var action = {\n                    type:   ActionTypes.REFRESH_USER_STATUS,\n                    status: data.status\n                };\n\n                MiitDispatcher.dispatch(action);\n            }\n\n            MiitRealtime.on('user:status', onStatusUpdate);\n\n            MiitRealtime.on('users:status', onStatusRefresh);\n\n            var obj = {\n                refresh: function() {\n                    if(false === sending) {\n                        sending = true;\n\n                        MiitRealtime.send('users:status');\n                    }\n                }\n            };\n\n            // Refresh the whole list\n            obj.refresh();\n\n            return obj;\n        }\n    );\n\n    injector.register('miit-user-status-actions', UserStatusActions);\n})();\n","(function(){\n    var MiitNewsLetterRequest = injector.resolve(\n        ['miit-utils'],\n        function(MiitUtils) {\n            return {\n                newsletter: function(email, cb) {\n\n                    // Register the user\n                    MiitUtils.ajax.send('/newsletter', {\n                        'email':  email\n                    }, cb);\n                },\n\n                registration: function(email, team, cb) {\n\n                    // Register the user\n                    MiitUtils.ajax.send('/register', {\n                        'email': email,\n                        'name':  team\n                    }, cb);\n                }\n            };\n        }\n    );\n\n    injector.register('miit-home-request', MiitNewsLetterRequest);\n})();","(function(){\n    var MiitTeam = injector.resolve(\n        ['miit-utils'],\n        function(MiitUtils) {\n            return {\n                users: function(cb) {\n                    // List all users\n                    MiitUtils.ajax.send('/app/team/users', cb);\n                },\n\n                invite: function(email, cb) {\n                    // Register the user\n                    MiitUtils.ajax.send('/app/team/invite', {\n                        'email':  email\n                    }, cb);\n                },\n\n                update: function(name, publix, cb) { // Use \"publiX\" for reserved word \"public\"\n                    var data =  {\n                        'name':   name\n                    };\n\n                    if(publix) {\n                        data.public = 'public';\n                    }\n\n                    // Update the user\n                    MiitUtils.ajax.send('/app/team/update', data, cb);\n                },\n\n                promote: function(user_id, user_roles, cb) {\n                    // Promote the user\n                    MiitUtils.ajax.send('/app/team/promote', {\n                        'id':     user_id,\n                        'roles':  user_roles\n                    }, cb);\n                },\n\n                demote: function(user_id, user_roles, cb) {\n                    // Demote the user\n                    MiitUtils.ajax.send('/app/team/demote', {\n                        'id':     user_id,\n                        'roles':  user_roles\n                    }, cb);\n                },\n\n                remove: function(user_id, cb) {\n                    // Demote the user\n                    MiitUtils.ajax.send('/app/team/remove', {\n                        'id':  user_id\n                    }, cb);\n                }\n            };\n        }\n    );\n\n    injector.register('miit-team-request', MiitTeam);\n})();","(function(){\n    var Notifications = [];\n\n    function _addNotification(notification, onRemoved) {\n        Notifications.push(notification);\n\n        setTimeout(function(){\n            // Popout the notification\n            Notifications.shift();\n            // Emit the removed event\n            onRemoved();\n        }, 5000);\n    }\n\n    var MiitNotificationsStore = injector.resolve(\n        ['object-assign', 'key-mirror', 'miit-utils', 'miit-dispatcher', 'miit-notifications-constants'],\n        function(ObjectAssign, KeyMirror, MiitUtils, MiitDispatcher, MiitNotificationsConstants) {\n            // All action types\n            var ActionTypes = MiitNotificationsConstants.ActionTypes;\n\n            var events = KeyMirror({\n                NOTIFICATION_ADDED: null,\n                NOTIFICATION_REMOVED: null\n            });\n\n            // The NotificationsStore Object\n            var NotificationsStore = ObjectAssign({}, EventEmitter.prototype, {\n                getNotifications: function() {\n                    return Notifications;\n                }\n            });\n\n            // Register Functions based on event\n            NotificationsStore.generateNamedFunctions(events.NOTIFICATION_ADDED);\n            NotificationsStore.generateNamedFunctions(events.NOTIFICATION_REMOVED);\n\n            // Handle actions\n            NotificationsStore.dispatchToken = MiitDispatcher.register(function(action){\n                switch(action.type) {\n                    case ActionTypes.NEW_NOTIFICATION:\n                        // Create the notification object\n                        var notification = {\n                            id:   MiitUtils.generator.guid(),\n                            type: action.category,\n                            text: action.text\n                        };\n\n                        // Add the no\n                        _addNotification(notification, NotificationsStore.emitNotificationRemoved);\n\n                        // Emit the notification\n                        NotificationsStore.emitNotificationAdded(); \n                        break;\n                }\n            });\n\n            return NotificationsStore;\n        }\n    );\n\n    injector.register('miit-notifications-store', MiitNotificationsStore);\n})();","(function(){\n    var MiitPageStore = injector.resolve(\n        ['object-assign', 'key-mirror', 'miit-dispatcher', 'miit-storage', 'miit-router', 'miit-page-constants', 'miit-user-store', 'miit-team-store'],\n        function(ObjectAssign, KeyMirror, MiitDispatcher, MiitStorage, MiitRouter, MiitPageConstants, MiitUserStore, MiitTeamStore) {\n            // All action types\n            var ActionTypes = MiitPageConstants.ActionTypes;\n\n            // All needed pages variables\n            var CurrentMainPage, CurrentApplicationPage;\n\n            // A storage for all pages\n            var PageStorage = MiitStorage.create('pages');\n\n            var events = KeyMirror({\n                // Events on page Change\n                MAIN_PAGE_CHANGED: null,\n                APPLICATION_PAGE_CHANGED: null,\n            });\n\n            // The PageStore Object\n            var PageStore = ObjectAssign({}, EventEmitter.prototype, {\n                getCurrentMainPage: function() {\n                    var page = CurrentMainPage;\n\n                    if(\n                        false === MiitTeamStore.isPublic() && \n                        false === MiitUserStore.isLoggedIn()\n                    ) {\n                        page = 'login';\n                    }\n                    else if(\n                        true  === MiitUserStore.isLoggedIn() && 'login'  === page\n                    ) {\n                        page = 'home';\n                    }\n\n                    return PageStorage.get('main-' + page);\n                },\n\n                getCurrentApplicationPage: function() {\n                    return PageStorage.get('application-' + CurrentApplicationPage);\n                },\n\n                registerMainPage: function(name, component) {\n                    PageStorage.set('main-' + name, component);\n                },\n\n                registerApplicationPage: function(name, component) {\n                    PageStorage.set('application-' + name, component);\n                }\n            });\n\n            // Register Functions based on event\n            PageStore.generateNamedFunctions(events.MAIN_PAGE_CHANGED);\n            PageStore.generateNamedFunctions(events.APPLICATION_PAGE_CHANGED);\n\n            var handleChangeMainPage = function(action) {\n                // On page changed\n                if(action.mainPage &&\n                   action.mainPage !== CurrentMainPage)\n                {\n                    // Set the current main page\n                    CurrentMainPage = action.mainPage;\n                    // Emit the change\n                    PageStore.emitMainPageChanged();\n                }\n            };\n\n            var handleChangeApplicationPage = function(action) {\n                // On page changed\n                if(action.applicationPage && \n                   action.applicationPage !== CurrentApplicationPage)\n                {\n                    // Set the current application page\n                    CurrentApplicationPage = action.applicationPage;\n                    // Emit the change\n                    PageStore.emitApplicationPageChanged();\n                }\n                handleChangeMainPage(action);\n            };\n\n            // Handle actions\n            PageStore.dispatchToken = MiitDispatcher.register(function(action){\n                switch(action.type) {\n                    case ActionTypes.CHANGE_APPLICATION_PAGE_COMPLETED:\n                        handleChangeApplicationPage(action);\n                        break;\n\n                    case ActionTypes.CHANGE_MAIN_PAGE_COMPLETED:\n                        handleChangeMainPage(action);\n                        break;\n                }\n            });\n\n            return PageStore;\n        }\n    );\n\n    injector.register('miit-page-store', MiitPageStore);\n})();","(function(){\n    var Users = [], Team;\n\n    function _update(name, publix) {\n        Team.name   = name;\n        Team.public = publix;\n    }\n\n    function _addUser(user) {\n        if(!user) {\n            return;\n        }\n\n        var index = Users.indexBy('id', user.id || '');\n        \n        if(index < 0) {\n            Users.push(user);\n        }\n    }\n\n    function _replaceUsers(users) {\n        Users = users || [];\n    }\n\n    function _filterbyRoleUser(role, inverse) {\n        return Users.filter(function(user) {\n            var result = false;\n\n            if(!inverse) {\n                result = user.roles.indexOf(role) >= 0;\n            }\n            else\n            {\n                result = user.roles.indexOf(role) < 0;\n            }\n\n            return result;\n        });\n    }\n\n    function _getUserById(id) {\n        return Users.findBy('id', id);\n    }\n\n    function _removeUser(id) {\n        var index = Users.indexBy('id', id);\n        \n        if(index >= 0) {\n            delete Users[index];\n        }\n    }\n\n    function _promoteUser(id, roles) {\n        var index = Users.indexBy('id', id);\n\n        if(Users[index] && Array.isArray(Users[index].roles)) {\n\n            Users[index].roles.merge(roles);\n        }\n    }\n\n    function _demoteUser(id, roles) {\n        var index = Users.indexBy('id', id);\n\n        if(Users[index] && Array.isArray(Users[index].roles)) {\n\n            Users[index].roles.removeAll(roles);\n        }\n    }\n\n    var MiitTeamStore = injector.resolve(\n        ['object-assign', 'key-mirror', 'miit-storage', 'miit-dispatcher', 'miit-user-store', 'miit-team-constants'],\n        function(ObjectAssign, KeyMirror, MiitStorage, MiitDispatcher, MiitUserStore, MiitTeamConstants) {\n            var ActionTypes = MiitTeamConstants.ActionTypes;\n\n            var events = KeyMirror({\n                // Tean updated\n                TEAM_UPDATED: null,\n                TEAM_NOT_UPDATED: null,\n                // Users refreshed\n                REFRESHED: null,\n                NOT_REFRESHED: null,\n                // User invited\n                INVITED: null,\n                NOT_INVITED: null,\n                // User promote\n                PROMOTED: null,\n                NOT_PROMOTED: null,\n                // User demote\n                DEMOTED: null,\n                NOT_DEMOTED: null,\n                // User removed\n                REMOVED: null,\n                NOT_REMOVED: null\n            });\n\n            var TeamStore = ObjectAssign({}, EventEmitter.prototype, {\n                getTeam: function() {\n                    if(!Team) {\n                        Team = MiitStorage.shared.get('team');\n                    }\n                    return Team || {};\n                },\n\n                isPublic: function() {\n                    return true === this.getTeam().public;\n                },\n\n                getUser: function(id) {\n                    return _getUserById(id);\n                },\n\n                getUsers: function() {\n                    return Users;\n                },\n\n                getUsersByRole: function(role, inverse) {\n                    return _filterbyRoleUser(role, inverse);\n                }\n            });\n\n            TeamStore.generateNamedFunctions(events.REFRESHED);\n            TeamStore.generateNamedFunctions(events.NOT_REFRESHED);\n\n            TeamStore.generateNamedFunctions(events.TEAM_UPDATED);\n            TeamStore.generateNamedFunctions(events.TEAM_NOT_UPDATED);\n\n            TeamStore.generateNamedFunctions(events.INVITED);\n            TeamStore.generateNamedFunctions(events.NOT_INVITED);\n\n            TeamStore.generateNamedFunctions(events.PROMOTED);\n            TeamStore.generateNamedFunctions(events.NOT_PROMOTED);\n            \n            TeamStore.generateNamedFunctions(events.DEMOTED);\n            TeamStore.generateNamedFunctions(events.NOT_DEMOTED);\n            \n            TeamStore.generateNamedFunctions(events.REMOVED);\n            TeamStore.generateNamedFunctions(events.NOT_REMOVED);\n\n            TeamStore.dispatchToken = MiitDispatcher.register(function(action){\n\n                switch(action.type) {\n                    case ActionTypes.REFRESH_USERS_COMPLETED:\n                        _replaceUsers(action.users);\n                        TeamStore.emitRefreshed();\n                        break;\n\n                    case ActionTypes.UPDATE_TEAM_COMPLETED:\n                        _update(action.name, action.public);\n                        TeamStore.emitTeamUpdated();\n                        break;\n                    case ActionTypes.UPDATE_TEAM_ERROR:\n                        TeamStore.emitTeamNotUpdated();\n                        break;\n\n                    case ActionTypes.INVITE_USER_COMPLETED:\n                        _addUser(action.user);\n                        TeamStore.emitInvited();\n                        break;\n                    case ActionTypes.INVITE_USER_ERROR:\n                        TeamStore.emitNotInvited();\n                        break;\n\n                    case ActionTypes.PROMOTE_USER_COMPLETED:\n                        _promoteUser(action.id, action.roles);\n                        TeamStore.emitPromoted();\n                        break;\n                    case ActionTypes.PROMOTE_USER_ERROR:\n                        TeamStore.emitNotPromoted();\n                        break;\n\n                    case ActionTypes.DEMOTE_USER_COMPLETED:\n                        _demoteUser(action.id, action.roles);\n                        TeamStore.emitDemoted();\n                        break;\n                    case ActionTypes.DEMOTE_USER_ERROR:\n                        TeamStore.emitNotDemoted();\n                        break;\n\n                    case ActionTypes.REMOVE_USER_COMPLETED:\n                        _removeUser(action.id);\n                        TeamStore.emitRemoved();\n                        break;\n                    case ActionTypes.REMOVE_USER_ERROR:\n                        TeamStore.emitNotRemoved();\n                        break;\n                }\n\n            });\n\n            return TeamStore;\n        }\n    );\n\n    injector.register('miit-team-store', MiitTeamStore);\n})();","(function(){\n    var UserStatus = [];\n\n    function _changeStatus(status) {\n        var count = UserStatus.length;\n\n        for(var i = 0; i < count; i++)\n        {\n            if(UserStatus[i].userId === status.userId)\n            {\n                UserStatus[i].status = status.status;\n                return;\n            }\n        }\n\n        // if not in, add it\n        UserStatus.push(status);\n    }\n\n    function _getStatusOf(userId) {\n        var count = UserStatus.length;\n\n        for(var i = 0; i < count; i++)\n        {\n            if(UserStatus[i].userId === userId)\n            {\n                return UserStatus[i].status;\n            }\n        }\n\n        return 'OFFLINE';\n    }\n\n    function _replaceStatus(status) {\n        if(Array.isArray(status))\n        {\n            UserStatus = status;\n        }\n    }\n\n    var MiitUserStatusStore = injector.resolve(\n        ['object-assign', 'key-mirror', 'miit-utils', 'miit-dispatcher', 'miit-user-status-constants'],\n        function(ObjectAssign, KeyMirror, MiitUtils, MiitDispatcher, MiitUserStatusConstants) {\n            // All action types\n            var ActionTypes = MiitUserStatusConstants.ActionTypes;\n\n            var events = KeyMirror({\n                STATUS_CHANGED: null\n            });\n\n            // The UserStatusStore Object\n            var UserStatusStore = ObjectAssign({}, EventEmitter.prototype, {\n                getUserStatus: function() {\n                    return UserStatus;\n                },\n\n                getUserStatusByUserId: function(userId) {\n                    return _getStatusOf(userId);\n                }\n            });\n\n            // Register Functions based on event\n            UserStatusStore.generateNamedFunctions(events.STATUS_CHANGED);\n\n            // Handle actions\n            UserStatusStore.dispatchToken = MiitDispatcher.register(function(action){\n                switch(action.type) {\n                    case ActionTypes.REFRESH_USER_STATUS:\n                        \n                        // Replace all status\n                        _replaceStatus(action.status);\n\n                        // Emit the status changed event\n                        UserStatusStore.emitStatusChanged(); \n                        break;\n\n                    case ActionTypes.UPDATE_USER_STATUS:\n                        \n                        // Change the status\n                        _changeStatus(action.status);\n\n                        // Emit the status changed event\n                        UserStatusStore.emitStatusChanged(); \n                        break;\n                }\n            });\n\n            return UserStatusStore;\n        }\n    );\n\n    injector.register('miit-user-status-store', MiitUserStatusStore);\n})();","(function(){\n    var Me, Utils, Token, LoggedIn = false;\n\n    // Generate the validator for user's role\n    function _isUserGenerator(role) {\n        return function(user) {\n            var roles = (user || Me || {}).roles || [];\n\n            return roles.indexOf(role) >= 0;\n        };\n    }\n\n    function _isAnonymous(user) {\n        return _isUserGenerator('ANONYM')(user);\n    }\n\n    // Check if this is the same user\n    function _isItMe(user) {\n        var me  = (Me || {}).id || null;\n        var you = (user || {}).id || null;\n\n        return me === you;\n    }\n\n    function _getName(user) {\n        // Get user or me\n        user = user || Me || {};\n        // Check if anonym\n        if(_isAnonymous(user)) {\n            return 'Anonyme';\n        }\n        return user.name;\n    }\n\n    function _update(name) {\n        Me.name = name;\n    }\n\n    function _connect(token, user) {\n        Me       = user;\n        Token    = token;\n        LoggedIn = true;\n\n        // Save in the local storage\n        localStorage.setItem('token', Token);\n    }\n\n    function _disconnect() {\n        Me       = null;\n        Token    = null;\n        LoggedIn = false;\n\n        // Erase from local storage\n        localStorage.removeItem('token');\n    }\n\n    var MiitUserStore = injector.resolve(\n        ['object-assign', 'key-mirror', 'miit-storage', 'miit-dispatcher', 'miit-user-constants'],\n        function(ObjectAssign, KeyMirror, MiitStorage, MiitDispatcher, MiitUserConstants) {\n            var ActionTypes = MiitUserConstants.ActionTypes;\n\n            var events = KeyMirror({\n                // Event on login\n                LOGGED_IN: null,\n                LOGIN_ERROR: null,\n                // Event on password change\n                PASSWORD_CHANGED: null,\n                PASSWORD_NOT_CHANGED: null,\n                // Event on update\n                USER_UPDATED: null,\n                USER_NOT_UPDATED: null,\n            });\n\n            var UserStore = ObjectAssign({}, EventEmitter.prototype, {\n                isLoggedIn: function() {\n                    return LoggedIn;\n                },\n\n                getUser: function() {\n                    if(!Me) {\n                        Me = MiitStorage.shared.get('user');\n                    }\n                    return Me;\n                },\n\n                getToken: function() {\n                    if(!Token) {\n                        Token = localStorage.getItem('token');\n                    }\n                    return Token;\n                },\n                \n                isOwner:  _isUserGenerator('OWNER'),\n\n                isAdmin:  _isUserGenerator('ADMIN'),\n\n                isUser:   _isUserGenerator('USER'),\n                \n                isAnonym: _isAnonymous,\n                \n                isItMe:   _isItMe,\n\n                getName:  _getName\n            });\n\n            UserStore.generateNamedFunctions(events.LOGGED_IN);\n            UserStore.generateNamedFunctions(events.LOGIN_ERROR);\n\n            UserStore.generateNamedFunctions(events.PASSWORD_CHANGED);\n            UserStore.generateNamedFunctions(events.PASSWORD_NOT_CHANGED);\n\n            UserStore.generateNamedFunctions(events.USER_UPDATED);\n            UserStore.generateNamedFunctions(events.USER_NOT_UPDATED);\n\n            UserStore.dispatchToken = MiitDispatcher.register(function(action){\n\n                switch(action.type) {\n                    case ActionTypes.REFRESH_USER_COMPLETED:\n                        _connect(action.token, action.user);\n                        UserStore.emitLoggedIn();\n                        break;\n\n                    case ActionTypes.LOGIN_USER_COMPLETED:\n                        _connect(action.token, action.user);\n                        UserStore.emitLoggedIn();\n                        break;\n                    case ActionTypes.LOGIN_USER_ERROR:\n                        UserStore.emitLoginError();\n                        break;\n\n                    case ActionTypes.LOGOUT_USER_COMPLETED:\n                        _disconnect();\n                        window.location.href = '/';\n                        break;\n\n                    case ActionTypes.CHANGE_PASSWORD_USER_COMPLETED:\n                        UserStore.emitPasswordChanged();\n                        break;\n                    case ActionTypes.CHANGE_PASSWORD_USER_ERROR:\n                        UserStore.emitPasswordNotChanged();\n                        break;\n\n                    case ActionTypes.UPDATE_USER_COMPLETED:\n                        _update(action.name);\n                        UserStore.emitUserUpdated();\n                        break;\n                    case ActionTypes.UPDATE_USER_ERROR:\n                        UserStore.emitUserNotUpdated();\n                        break;\n                }\n            });\n\n            return UserStore;\n        }\n    );\n\n    injector.register('miit-user-store', MiitUserStore);\n})();","(function(){\n    var MiitDispatcher = function() {\n        return new Flux.Dispatcher();\n    };\n\n    injector.register('miit-dispatcher', MiitDispatcher);\n})();","(function(){\n    var MiitRealtime = injector.resolve(\n        ['miit-storage', 'miit-user-store', 'miit-team-store'],\n        function(MiitStorage, MiitUserStore, MiitTeamStore) {\n            \n            // Initiliaze primus            \n            var primus = Primus.connect();\n\n            // Bind incoming data\n            var onData = function(data) {\n                console.log(data);\n\n                if(primus.reserved(data.event)) return;\n\n                primus.emit.call(primus, data.event, data);\n            };\n\n            // Listen all data\n            primus.on('data', onData);\n\n            return {\n                send: function(eventName, data) {\n                    if(!data) {\n                        data = {};\n                    }\n\n                    data.event = eventName;\n\n                    primus.write(data);\n                },\n\n                sendIn: function(roomName, eventName, data) {\n                    if(!data) {\n                        data = {};\n                    }\n\n                    data.event = eventName;\n\n                    primus.in(roomName).write(data);\n                },\n\n                on: function(eventName, cb) {\n                    primus.on(eventName, cb);\n                }\n            };\n        }\n    );\n\n    injector.register('miit-realtime', MiitRealtime);\n})();","(function(){\n    var MiitRouter = injector.resolve(\n        ['miit-storage'],\n        function(MiitStorage) {\n            var router, routes = MiitStorage.create('routes');\n            \n            return {\n                init: function() {\n                    router = Router(routes.getData());\n\n                    router.configure({\n                        html5history: true,\n                        run_handler_in_init: true,\n                        convert_hash_in_init: true\n                    });\n\n                    router.init();\n                },\n\n                routes: routes,\n\n                setRoute: function(path) {\n                    if(router) {\n                        router.setRoute(path);\n                    }\n                }\n            };\n        }\n    );\n\n    injector.register('miit-router', MiitRouter);\n})();","(function(){\n    // Database class\n    function Database(name) {\n        var timeoutId = {};\n        var internal  = {};\n\n        this.set = function(key, value, expire) {\n            internal[key] = value;\n            if(undefined !== expire && null !== expire) {\n                this.expire(key, expire);\n            }\n            return this;\n        };\n\n        this.get = function(key) {\n            return internal[key];\n        };\n\n        this.expire = function(key, delay) {\n            if(timeoutId[key]) {\n                clearTimeout(timeoutId[key]);\n            }\n\n            if(undefined !== delay && null !== delay) {\n                // Set the timeout\n                timeoutId[key] = setTimeout(function() {\n                    this.remove(key);\n                }.bind(this), delay);\n            } else {\n                this.remove(key);\n            }\n        };\n\n        this.remove = function(key) {\n            delete internal[key];\n            delete timeoutId[key];\n            return this;\n        };\n\n        this.clear = function() {\n            // Clear all timeout\n            for(var i in timeoutId) {\n                clearTimeout(timeoutId[i]);\n            }\n            // Clear all data\n            internal  = {};\n            timeoutId = {};\n            return this;\n        };\n\n        this.getName = function() {\n            return name;\n        };\n\n        this.getData = function() {\n            return internal;\n        };\n    }\n\n    var MiitStorage = injector.resolve(\n        function() {\n            return {\n                create: function(name) {\n                    return new Database(name);\n                },\n                shared: new Database('shared')\n            };\n        }\n    );\n\n    injector.register('miit-storage', MiitStorage);\n})();","(function(){\n    var MiitUtils = injector.resolve(\n        ['miit-storage'],\n        function(MiitStorage) {\n            /**\n             * Validator part\n             */\n\n            // Regex for email\n            var RegexEmail    = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n\n            // Regex for team name\n            var RegexTeamName = /^[a-z0-9]{4,}$/i;\n\n            // Regex for password\n            var RegexPassword = /^.{6,32}$/;\n\n            // Regex for user name\n            var RegexUserName = /^[0-9a-zA-Z_\\'\\-\\. ]{4,42}$/i;\n\n            // Generate the validator for a regex\n            var validatorGenerator = function(re) {\n                // Return the validation function\n                return function(value) {\n                    // Test the regex\n                    return re.test(value);\n                };\n            };\n\n            var guidGenerator = function() {\n                function s4() {\n                    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n                }\n\n                return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n            };\n\n            /**\n             * Ajax part\n             */\n\n            // get the list of HttpRequestHandlers\n            var XMLHttpFactories = [\n                function () {return new XMLHttpRequest();},\n                function () {return new ActiveXObject('Msxml2.XMLHTTP');},\n                function () {return new ActiveXObject('Msxml3.XMLHTTP');},\n                function () {return new ActiveXObject('Microsoft.XMLHTTP');}\n            ];\n\n            // Generator of HttpRequestHandler\n            function createXMLHTTPObject() {\n                var xmlhttp = false;\n                for (var i = 0; i < XMLHttpFactories.length; i++) {\n                    try {\n                        xmlhttp = XMLHttpFactories[i]();\n                    }\n                    catch (e) {\n                        continue;\n                    }\n                    break;\n                }\n                return xmlhttp;\n            }\n\n            // Send request method\n            var sendRequest = function(url, postData, headers, cb) {\n                var req = createXMLHTTPObject();\n\n                if(!req) return;\n\n                if(typeof headers === 'function') {\n                    cb      = headers;\n                    headers = null;\n                }\n                else if(typeof postData === 'function') {\n                    cb       = postData;\n                    postData = null;\n                }\n                \n                var method = (postData) ? 'POST' : 'GET';\n                \n                req.open(method, url, true);\n                \n                if(postData) {\n                    req.setRequestHeader('Content-type', 'application/json');\n                }\n\n                if(headers) {\n                    // Foreach header\n                    for(var header in headers) {\n                        // Set the header\n                        req.setRequestHeader(header, headers[header]);\n                    }\n                }\n\n                req.onreadystatechange = function () {\n                    if (req.readyState != 4) return;\n                    var result;\n\n                    try {\n                        result = JSON.parse(req.responseText);\n                    } catch(e) { }\n\n                    if(typeof cb === 'function') {\n                        cb(result || {}, req);\n                    }\n                };\n                \n                if (req.readyState == 4) return;\n\n                req.send(JSON.stringify(postData));\n            };\n\n            // Return the public object\n            return {\n                ajax: {\n                    send: sendRequest\n                },\n\n                validator: {\n                    email:    validatorGenerator(RegexEmail),\n                    password: validatorGenerator(RegexPassword),\n                    team:     validatorGenerator(RegexTeamName),\n                    user:     validatorGenerator(RegexUserName)\n                },\n\n                generator: {\n                    guid: guidGenerator\n                }\n            };\n        }\n    );\n\n    injector.register('miit-utils', MiitUtils);\n})();","window.MiitApp = (function() {\n    var MiitApp = injector.resolve(\n        ['miit-router'],\n        function(MiitRouter, MiitRealtime) {\n            var VERSION   = '0.0.0';\n            var COPYRIGTH = 'All rigths reserved to ITEvents.';\n\n            return {\n                COPYRIGTH: COPYRIGTH,\n                VERSION:   VERSION,\n                get: function(serviceName) {\n                    return injector.get(serviceName);\n                },\n                init: function() {\n                    // Initialize the router\n                    MiitRouter.init();\n                }\n            };\n        }\n    );\n\n    return MiitApp();\n})();","var ClockFace = React.createClass({displayName: \"ClockFace\",\n    render: function() {\n        var d = this.props.date;\n        var prefix  = d.getMinutes() < 10 ? '0' :'';\n        var minutes = prefix + d.getMinutes();\n        var hours   = d.getHours();\n\n        return (\n          React.createElement(\"div\", {className: \"miit-component clock\"}, \n              React.createElement(\"i\", {className: \"fa fa-clock-o pull-left\"}), \n              React.createElement(\"span\", null, hours, \":\"), \n              React.createElement(\"span\", null, minutes)\n          )\n        );\n    }\n});\n//# sourceMappingURL=../../team/component/clock-face.js.map","(function(){\n    var ClockIntervalId;\n\n    MiitComponents.Clock = React.createClass({displayName: \"Clock\",\n        getInitialState: function() {\n            return {\n                date: new Date()\n            };\n        },\n\n        componentDidMount: function() {\n            this.tick();\n            ClockIntervalId = setInterval(function() {\n                this.tick();\n            }.bind(this), 5000);\n        },\n\n        componentWillUnmount: function() {\n            clearInterval(ClockIntervalId);\n        },\n\n        tick: function() {\n            this.setState({\n                date: new Date()\n            });\n        },\n\n        render: function() {\n          return (\n              React.createElement(ClockFace, {date: this.state.date})\n          );\n        }\n    });\n})();\n//# sourceMappingURL=../../team/component/clock.js.map","var Dropdown = React.createClass({displayName: \"Dropdown\",\n    timeoutId: null,\n\n    propTypes: {\n        label: React.PropTypes.string.isRequired\n    },\n\n    getDefaultProps: function() {\n        return {\n            angle: 'down'\n        };\n    },\n\n    getInitialState: function () {\n        return {\n            open: false\n        };\n    },\n\n    toggleAngle: function() {\n        var angle = this.props.angle;\n        if(this.state.open) {\n            return (angle === 'up') ? 'down': 'up';\n        }\n        return angle;\n    },\n\n    _onLeave: function() {\n        if(this.isMounted()) {\n            this.setState({\n                open: false\n            });\n        }\n    },\n\n    onLeave: function() {\n        this.timeoutId = setTimeout(this._onLeave, 675);\n    },\n\n    onEnter: function() {\n        clearTimeout(this.timeoutId);\n    },\n\n    onClick: function() {\n        this.onEnter();\n        this.setState({\n            open: !this.state.open\n        });\n    },\n\n    render: function() {\n        var icon = 'fa-angle-' + this.toggleAngle();\n        var open = { open: this.state.open };\n\n        var clIcon     = classNames('pull-right', 'fa', icon);\n        var clDropdown = classNames('miit-component', 'dropdown', open);\n\n        return (\n            React.createElement(\"span\", {onMouseLeave: this.onLeave, onMouseEnter: this.onEnter, onClick: this.onClick, className: clDropdown}, \n                React.createElement(\"span\", {className: \"dropdown-label\"}, \n                    this.props.label, \n                    React.createElement(\"i\", {className: clIcon})\n                ), \n                \n                React.createElement(If, {test: this.state.open}, \n                    React.createElement(\"div\", {className: \"dropdown-inner\"}, \n                        this.props.children\n                    )\n                )\n            )\n        );\n    }\n});\n//# sourceMappingURL=../../team/component/dropdown.js.map","var If = React.createClass({displayName: \"If\",\n    render: function() {\n        if (this.props.test) {\n            return this.props.children;\n        } else {\n            return null;\n        }\n    }\n});\n//# sourceMappingURL=../../team/component/if.js.map","var ActiveGroups = {};\n\nvar Link = React.createClass({displayName: \"Link\",\n    onClick: function(e) {\n        if(this.props.onLinkClick) {\n            this.props.onLinkClick(e);\n        }\n\n        if(!this.props.external) {\n            // If there is an hystory\n            e.preventDefault();\n\n            // Extract the target\n            var target = this.props.href || '';\n            target     = target.substr(target.indexOf('#') + 1);\n            \n            // Set the route in the router\n            injector.get('miit-router').setRoute(target);\n\n            this.setActive();\n        }\n    },\n\n    setActive: function() {\n        if(this.props.activeGroup && this.props.activeName) {\n            // Create if not exist\n            ActiveGroups[this.props.activeGroup] = this.props.activeName;\n        }\n    },\n\n    render: function() {\n        var className = this.props.className;\n\n        if(this.props.activeGroup && this.props.activeName) {\n            // Get the active group\n            var activeGroup = this.props.activeGroup;\n            var activeName = this.props.activeName;\n\n            // Create if not exist\n            if(ActiveGroups[activeGroup] === activeName) {\n                className = classNames(className, 'active');\n            }\n        }\n\n        return (\n            React.createElement(\"a\", React.__spread({},  this.props, {onClick: this.onClick, className: className}), \n                this.props.children\n            )\n        );\n    }\n});\n//# sourceMappingURL=../../team/component/link.js.map","(function(){\n    MiitComponents.Loading = React.createClass({displayName: \"Loading\",\n\n        getDefaultProps: function() {\n            return {\n                loading: 'Chargement...'\n            };\n        },\n\n        render: function() {\n          return (\n              React.createElement(\"div\", {className: \"miit-component loading-container\"}, \n                  React.createElement(\"div\", {className: \"loading\"}, \n                      React.createElement(\"img\", {src: \"/img/logo-miit-outter.png\"}), \n                      React.createElement(\"img\", {className: \"inner\", src: \"/img/logo-miit-inner.png\"})\n                  ), \n                  this.props.loading\n              )\n          );\n        }\n    });\n})();\n//# sourceMappingURL=../../team/component/loading.js.map","(function(){\n    var Utils, HomeRequest;\n\n    function getDomainName(hostName)\n    {\n        return hostName.substring(hostName.lastIndexOf('.', hostName.lastIndexOf('.') - 1) + 1);\n    }\n\n    MiitComponents.CreateTeam = React.createClass({displayName: \"CreateTeam\",\n        getDefaultProps: function() {\n            return {\n                placeholder: {\n                    email: 'Votre addresse mail',\n                    team:  'Le nom de votre équipe'\n                },\n                submit: 'Créer une équipe'\n            };\n        },\n\n        getInitialState: function() {\n\n            return this.getDefaultErrors();\n        },\n\n        getDefaultErrors: function() {\n            return {\n                missing_email: false,\n                missing_team:  false,\n                invalid_email: false,\n                invalid_team:  false\n            };\n        },\n\n        componentWillMount: function() {\n            if(!Utils) {\n                Utils = MiitApp.get('miit-utils');\n            }\n            if(!HomeRequest) {\n                HomeRequest = MiitApp.get('miit-home-request');\n            }\n        },\n\n        handleSubmit: function(e) {\n            e.preventDefault();\n\n            var email = React.findDOMNode(this.refs.email).value.trim();\n            var team  = React.findDOMNode(this.refs.team).value.trim();\n\n            this.setState(this.getDefaultErrors());\n\n            // Check if there is data\n            if (!email || !team) {\n                this.setState({\n                    missing_email: !email,\n                    missing_team:  !team\n                });\n                return;\n            }\n\n            // Check if this is a correct email\n            if(!Utils.validator.email(email)) {\n                this.setState({\n                    invalid_email: true\n                });\n                return;\n            }\n\n            // Check if this is a correct team name\n            if(!Utils.validator.team(team)) {\n                this.setState({\n                    invalid_team: true\n                });\n                return;\n            }\n\n            HomeRequest.registration(email, team, function(data) {\n                if(data.done) {\n                    /** Redirect the user to the team\n                    var scheme = window.location.protocol + '//';\n                    var domain = getDomainName(window.location.host);\n\n                    var url = scheme + data.slug + '.' + domain;\n\n                    window.location = url;\n                    */\n                }   \n            });\n\n            return;\n        },\n\n        render: function() {\n            var classes_email = classNames({\n                'invalid': this.state.missing_email ||\n                           this.state.invalid_email\n            });\n\n            var classes_team = classNames({\n                'invalid':  this.state.missing_team ||\n                            this.state.invalid_team\n            });\n\n            return (\n                React.createElement(\"form\", {className: \"miit-component create-team\", onSubmit: this.handleSubmit}, \n                    \n                        React.createElement(\"div\", {className: \"row pt20 pb20\"}, \n                            React.createElement(\"div\", {className: \"col-md-6 mb10\"}, \n                                React.createElement(\"div\", {className: \"input-field left-icon icon-transparent push0\"}, \n                                    React.createElement(\"i\", {className: \"fa fa-envelope-o\"}), \n                                    React.createElement(\"input\", {type: \"text\", className: classes_email, placeholder: this.props.placeholder.email, ref: \"email\"})\n                                )\n                            ), \n\n                            React.createElement(\"div\", {className: \"col-md-6\"}, \n                                React.createElement(\"div\", {className: \"input-field left-icon icon-transparent col5\"}, \n                                    React.createElement(\"i\", {className: \"fa fa-users\"}), \n                                    React.createElement(\"input\", {type: \"text\", className: classes_team, placeholder: this.props.placeholder.team, ref: \"team\"})\n                                )\n                            )\n                        ), \n\n                        React.createElement(\"button\", {type: \"submit\", className: \"btn btn-dark mt5\"}, this.props.submit)\n                    \n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../www/component/create-team.js.map","(function(){\n    var Utils, HomeRequest;\n\n    MiitComponents.NewsLetter = React.createClass({displayName: \"NewsLetter\",\n        getDefaultProps: function() {\n            return {\n                placeholder: {\n                    email: 'Votre addresse mail'\n                },\n                submit: 'S\\'inscrire à la Newsletter'\n            };\n        },\n\n        getInitialState: function() {\n            var state =  this.getDefaultErrors();\n\n            state.done = false;\n\n            return state;\n        },\n\n        getDefaultErrors: function() {\n            return {\n                missing_email: false,\n                invalid_email: false\n            };\n        },\n\n        componentWillMount: function() {\n            if(!Utils) {\n                Utils = MiitApp.get('miit-utils');\n            }\n            if(!HomeRequest) {\n                HomeRequest = MiitApp.get('miit-home-request');\n            }\n        },\n\n        handleSubmit: function(e) {\n            e.preventDefault();\n\n            var email = React.findDOMNode(this.refs.email).value.trim();\n\n            this.setState(this.getDefaultErrors());\n\n            // Check if there is data\n            if (!email) {\n                this.setState({\n                    missing_email: !email\n                });\n                return;\n            }\n\n            // Check if this is a correct email\n            if(!Utils.validator.email(email)) {\n                this.setState({\n                    invalid_email: true\n                });\n                return;\n            }\n\n            HomeRequest.registration(email, function(data) {\n                if(data.done) {\n                    this.setState({\n                        done: true\n                    });\n                }\n            }.bind(this));\n\n            return;\n        },\n\n        render: function() {\n            var classes_email = classNames({\n                'invalid': this.state.missing_email ||\n                           this.state.invalid_email\n            });\n\n            var done = this.state.done;\n\n            return (\n                React.createElement(\"form\", {className: \"miit-component news-letter\", onSubmit: this.handleSubmit}, \n                    React.createElement(If, {test: !done}, \n                        React.createElement(\"div\", {className: \"row pt30 pb20\"}, \n                            React.createElement(\"div\", {className: \"col-md-9 mb10\"}, \n                                React.createElement(\"div\", {className: classes_email + \" input-field left-icon icon-transparent push0 pt5 pb5\"}, \n                                    React.createElement(\"i\", {className: \"fa fa-envelope-o pt5 pl5 pb5\"}), \n                                    React.createElement(\"input\", {type: \"text\", placeholder: this.props.placeholder.email, ref: \"email\"})\n                                )\n                            ), \n                            React.createElement(\"div\", {className: \"col-md-3 mb10\"}, \n                                React.createElement(\"button\", {type: \"submit\", className: \"btn btn-dark pl10 pr10 pt15 pb15\"}, this.props.submit)\n                            )\n                        )\n                    ), \n                    React.createElement(If, {test: done}, \n                        React.createElement(\"div\", {className: \"mt30\"}, \"Merci beaucoup pour votre confiance.\")\n                    )\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../www/component/news-letter.js.map","(function(){\n    MiitComponents.MiitHome = React.createClass({displayName: \"MiitHome\",\n        getDefaultProps: function () {\n            return {\n                title: 'Welcome',\n                text: {\n                    users: 'Utilisateurs'\n                }\n            };\n        },\n\n        render: function() {\n            return (\n                React.createElement(\"div\", {className: \"container-fluid\"}, \n                    React.createElement(\"div\", {className: \"page-header\"}, \n                        React.createElement(\"a\", {href: \"#\", className: \"minimize-menu\"}, \n                            React.createElement(\"i\", {className: \"fa fa-bars\"})\n                        ), \n                        React.createElement(\"h1\", null, this.props.title), \n                        React.createElement(MiitComponents.Clock, null)\n                    ), \n\n                    React.createElement(\"div\", {className: \"sidr-right\"}, \n                        React.createElement(\"span\", {className: \"sr-label\"}, this.props.text.users), \n                        React.createElement(MiitComponents.UserList, {headers: false, invite: false, roles: false, emails: false, filtered: false, status: true})\n                    )\n                )\n            );\n        }\n    });\n\n    MiitApp\n        .get('miit-page-store')\n        .registerMainPage('home', (React.createElement(MiitComponents.MiitHome, null)));\n})();\n//# sourceMappingURL=../../team/page/miit-home.js.map","(function(){\n    MiitComponents.MiitLogin = React.createClass({displayName: \"MiitLogin\",\n        getDefaultProps: function () {\n            return {\n                title: 'Connexion'\n            };\n        },\n\n        render: function() {\n            return (\n                React.createElement(\"div\", {className: \"container-fluid\"}, \n                    React.createElement(\"div\", {className: \"page-header\"}, \n                        React.createElement(\"a\", {href: \"#\", className: \"minimize-menu\"}, \n                            React.createElement(\"i\", {className: \"fa fa-bars\"})\n                        ), \n                        React.createElement(\"h1\", null, this.props.title), \n                        React.createElement(MiitComponents.Clock, null)\n                    ), \n\n                    React.createElement(MiitComponents.UserLogin, null)\n                )\n            );\n        }\n    });\n\n    MiitApp\n        .get('miit-page-store')\n        .registerMainPage('login', (React.createElement(MiitComponents.MiitLogin, null)));\n})();\n//# sourceMappingURL=../../team/page/miit-login.js.map","(function(){\n    MiitComponents.MiitNotFound = React.createClass({displayName: \"MiitNotFound\",\n        getDefaultProps: function () {\n            return {\n                title: 'Cette page n\\'existe pas.',\n                text: {\n                    home: 'Retour à l\\'accueil'\n                }\n            };\n        },\n\n        render: function() {\n            return (\n                React.createElement(\"div\", {className: \"container-fluid\"}, \n                    React.createElement(\"h1\", {className: \"pt25\"}, this.props.title), \n\n                    React.createElement(\"div\", {className: \"mt50\"}, \n                        React.createElement(Link, {href: \"/\"}, this.props.text.home)\n                    )\n                )\n            );\n        }\n    });\n\n    MiitApp\n        .get('miit-page-store')\n        .registerMainPage('not-found', (React.createElement(MiitComponents.MiitNotFound, null)));\n})();\n//# sourceMappingURL=../../team/page/miit-not-found.js.map","(function(){\n    var UserStore, TeamStore;\n\n    MiitComponents.MiitTeamSettings = React.createClass({displayName: \"MiitTeamSettings\",\n        getDefaultProps: function () {\n            return {\n                text: {\n                    applications:  'Applications',\n                    informations: 'Informations'\n                }\n            };\n        },\n\n        componentWillMount: function() {\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n            if(!TeamStore) {\n                TeamStore = MiitApp.get('miit-team-store');\n            }\n        },\n\n        componentDidMount: function() {\n            TeamStore.addTeamUpdatedListener(this._onChange);\n        },\n\n        componentWillUnmount: function() {\n            TeamStore.removeTeamUpdatedListener(this._onChange);\n        },\n\n        _onChange: function() {\n            this.forceUpdate();\n        },\n\n        render: function() {\n            if(!UserStore.isAdmin()) {\n                return React.createElement(MiitComponents.MiitNotFound, null);\n            }\n\n            var team = TeamStore.getTeam();\n\n            return (\n                React.createElement(\"div\", {className: \"container-fluid\"}, \n                    React.createElement(\"div\", {className: \"page-header\"}, \n                        React.createElement(\"a\", {href: \"#\", className: \"minimize-menu\"}, \n                            React.createElement(\"i\", {className: \"fa fa-bars\"})\n                        ), \n                        React.createElement(\"h1\", null, team.name), \n                        React.createElement(MiitComponents.Clock, null)\n                    ), \n                    \n                    React.createElement(\"div\", {className: \"panel mb30 mt30\"}, \n                        React.createElement(\"h2\", {className: \"panel-title\"}, React.createElement(\"i\", {className: \"fa fa-th pull-left \"}), \" \", this.props.text.applications), \n                        React.createElement(\"div\", {className: \"panel-content\"}, \n                            React.createElement(\"div\", {className: \"row\"}, \n                                React.createElement(\"ul\", {className: \"app-list col-md-12\"}, \n\n                                    React.createElement(\"li\", null, \n                                        React.createElement(\"a\", null, \n                                            React.createElement(\"i\", {className: \"fa fa-weixin bg-blue\"}), \n                                            React.createElement(\"span\", null, \"Chat\")\n                                        )\n                                    ), \n\n                                    React.createElement(\"li\", null, \n                                        React.createElement(\"a\", null, \n                                            React.createElement(\"i\", {className: \"fa fa-question bg-green\"}), \n                                            React.createElement(\"span\", null, \"Quizz\")\n                                        )\n                                    ), \n\n                                    React.createElement(\"li\", null, \n                                        React.createElement(\"a\", {className: \"add-app\"}, \n                                            React.createElement(\"i\", {className: \"fa fa-plus bg-blue-grey\"}), \n                                            React.createElement(\"span\", null, \"Ajouter une App\")\n                                        )\n                                    )\n\n                                )\n                            )\n                        )\n                    ), \n\n                    React.createElement(\"div\", {className: \"panel mt30\"}, \n                        React.createElement(\"h2\", {className: \"panel-title\"}, React.createElement(\"i\", {className: \"fa fa-info pull-left \"}), this.props.text.informations), \n                        React.createElement(\"div\", {className: \"panel-content\"}, \n                            React.createElement(\"h3\", {className: \"mb20\"}, React.createElement(\"i\", {className: \"fa fa-key pull-left\"}), \" Modifier les informations\"), \n                            React.createElement(MiitComponents.TeamUpdate, null), \n\n                            React.createElement(\"h3\", {className: \"mt40 mb10\"}, React.createElement(\"i\", {className: \"fa fa-users pull-left\"}), \" Liste des utilisateurs\"), \n                            React.createElement(MiitComponents.UserList, {autoload: true})\n                        )\n                    )\n                )\n            );\n        }\n    });\n\n    MiitApp\n        .get('miit-page-store')\n        .registerMainPage('settings', (React.createElement(MiitComponents.MiitTeamSettings, null)));\n})();\n//# sourceMappingURL=../../team/page/miit-team-settings.js.map","(function(){\n    var UserStore;\n\n    MiitComponents.MiitUserSettings = React.createClass({displayName: \"MiitUserSettings\",\n        getDefaultProps: function () {\n            return {\n                text: {\n                    informations: 'Informations'\n                }\n            };\n        },\n\n        componentWillMount: function() {\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n        },\n\n        componentDidMount: function() {\n            UserStore.addUserUpdatedListener(this._onChange);\n        },\n\n        componentWillUnmount: function() {\n            UserStore.removeUserUpdatedListener(this._onChange);\n        },\n\n        _onChange: function() {\n            this.forceUpdate();\n        },\n\n        render: function() {\n            if(UserStore.isAnonym()) {\n                return React.createElement(MiitComponents.MiitNotFound, null);\n            }\n\n            var user = UserStore.getUser();\n            var name = UserStore.getName(user);\n\n            return (\n                React.createElement(\"div\", {className: \"container-fluid\"}, \n                    React.createElement(\"div\", {className: \"page-header\"}, \n                        React.createElement(\"a\", {href: \"#\", className: \"minimize-menu\"}, \n                            React.createElement(\"i\", {className: \"fa fa-bars\"})\n                        ), \n                        React.createElement(\"h1\", null, name), \n                        React.createElement(MiitComponents.Clock, null)\n                    ), \n                    \n                    React.createElement(\"div\", {className: \"panel mt30\"}, \n                        React.createElement(\"h2\", {className: \"panel-title\"}, React.createElement(\"i\", {className: \"fa fa-th pull-left \"}), this.props.text.informations), \n                        React.createElement(\"div\", {className: \"panel-content\"}, \n                            React.createElement(\"div\", {className: \"row\"}, \n                                React.createElement(\"div\", {className: \"col-md-7 mb20\"}, \n                                    React.createElement(\"h3\", {className: \"mb20\"}, React.createElement(\"i\", {className: \"fa fa-key pull-left\"}), \" Modifier vos informations\"), \n                                    React.createElement(MiitComponents.UserUpdate, null)\n                                ), \n\n                                React.createElement(\"div\", {className: \"col-md-5\"}, \n                                    React.createElement(\"h3\", {className: \"mb20\"}, React.createElement(\"i\", {className: \"fa fa-key pull-left\"}), \" Changer de mot de passe\"), \n                                    React.createElement(MiitComponents.UserChangePassword, null)\n                                )\n                            )\n                        )\n                    )\n                )\n            );\n        }\n    });\n\n    MiitApp\n        .get('miit-page-store')\n        .registerMainPage('me', (React.createElement(MiitComponents.MiitUserSettings, null)));\n})();\n//# sourceMappingURL=../../team/page/miit-user-settings.js.map","(function(){\n    var TeamStore, UserStore;\n\n    MiitComponents.MenuHeader = React.createClass({displayName: \"MenuHeader\",\n        componentWillMount: function() {\n            if(!TeamStore) {\n                TeamStore = MiitApp.get('miit-team-store');\n            }\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n        },\n\n        componentDidMount: function() {\n            TeamStore.addTeamUpdatedListener(this._onChanged);\n        },\n\n        componentWillUnmount: function() {\n            TeamStore.removeTeamUpdatedListener(this._onChanged);\n        },\n\n        _onChanged: function() {\n            this.forceUpdate();\n        },\n\n        render: function() {\n            var team = TeamStore.getTeam();\n\n            return (\n                React.createElement(\"div\", {className: \"miit-component menu-header sl-header\"}, \n                    React.createElement(If, {test: UserStore.isAdmin()}, \n                        React.createElement(Link, {href: \"#/settings\"}, \n                            team.name, \" \", React.createElement(\"i\", {className: \"fa fa-cogs pull-right\"})\n                        )\n                    ), \n                    React.createElement(If, {test: !UserStore.isAdmin()}, \n                        React.createElement(\"div\", null, \n                            team.name\n                        )\n                    )\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../../team/component/menu/menu-header.js.map","(function(){\n    MiitComponents.MenuLabel = React.createClass({displayName: \"MenuLabel\",\n        render: function() {\n            var classes = classNames('pull-left', 'fa', this.props.icon || '');\n            \n            return (\n                React.createElement(\"span\", {className: \"miit-component menu-label sl-label\"}, \n                    React.createElement(\"i\", {className: classes}), \n                    this.props.label\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../../team/component/menu/menu-label.js.map","(function(){\n    var UserStore, UserActions;\n\n    MiitComponents.MenuTeam = React.createClass({displayName: \"MenuTeam\",\n        getDefaultProps: function () {\n            return {\n                text: {\n                    user_label: 'Utilisateur',\n                    my_account: 'Mon compte',\n                    disconnect: 'Déconnexion',\n                    connect:    'Connexion',\n                    apps_label: 'Applications'\n                }\n            };\n        },\n\n        componentWillMount: function() {\n            // Get the user store\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n            // Get the user actions\n            if(!UserActions) {\n                UserActions = MiitApp.get('miit-user-actions');\n            }\n        },\n\n        render: function() {\n            return (\n                React.createElement(\"div\", {className: \"sidr-left bg-blue-grey\"}, \n                    React.createElement(\"div\", {className: \"sl-wrapper\"}, \n                        React.createElement(MiitComponents.MenuHeader, null), \n                        \n                        React.createElement(MiitComponents.MenuLabel, {label: this.props.text.user_label}), \n                        React.createElement(MiitComponents.MenuUserProfile, null), \n\n                        React.createElement(\"ul\", {className: \"sl-list mb10\"}, \n                            React.createElement(If, {test: !UserStore.isAnonym()}, \n                                React.createElement(\"li\", null, \n                                    React.createElement(Link, {href: \"#/me\", activeGroup: \"menu-team\", activeName: \"me\"}, \n                                        React.createElement(\"i\", {className: \"fa fa-cogs pull-left\"}), \" \", this.props.text.my_account\n                                    )\n                                )\n                            ), \n                            React.createElement(If, {test: !UserStore.isAnonym()}, \n                                React.createElement(\"li\", null, \n                                    React.createElement(Link, {href: \"#/logout\", onLinkClick: UserActions.logout}, \n                                        React.createElement(\"i\", {className: \"fa fa-sign-out pull-left\"}), \" \", this.props.text.disconnect\n                                    )\n                                )\n                            ), \n                            React.createElement(If, {test: UserStore.isAnonym()}, \n                                React.createElement(\"li\", null, \n                                    React.createElement(Link, {href: \"#/login\"}, \n                                        React.createElement(\"i\", {className: \"fa fa-sign-in pull-left\"}), \" \", this.props.text.connect\n                                    )\n                                )\n                            )\n                        ), \n\n                        React.createElement(MiitComponents.MenuLabel, {label: this.props.text.apps_label}), \n                        \n                        React.createElement(\"ul\", {className: \"sl-list\"}, \n                            React.createElement(\"li\", null, \n                                React.createElement(Link, {href: \"#/home\", activeGroup: \"menu-team\", activeName: \"home\"}, \n                                    React.createElement(\"i\", {className: \"fa fa-weixin pull-left\"}), \" Chat\", \n                                    React.createElement(\"span\", {className: \"notification\"}, \"4\")\n                                )\n                            ), \n                            React.createElement(\"li\", null, \n                                React.createElement(Link, {href: \"#/quizz\", activeGroup: \"menu-team\", activeName: \"quizz\"}, \n                                    React.createElement(\"i\", {className: \"fa fa-question pull-left\"}), \" Quizz\"\n                                )\n                            ), \n                            React.createElement(\"li\", null, \n                                React.createElement(Link, {href: \"#/test2/plop\"}, \n                                    React.createElement(\"i\", {className: \"fa fa-folder-o pull-left\"}), \" Documents\", \n                                    React.createElement(\"span\", {className: \"notification\"}, \"18\")\n                                )\n                            ), \n                            React.createElement(If, {test: UserStore.isAdmin()}, \n                                React.createElement(\"li\", null, \n                                    React.createElement(Link, {href: \"/test2/plop\"}, \n                                        React.createElement(\"i\", {className: \"fa fa-plus pull-left\"}), \" Ajouter une App\"\n                                    )\n                                )\n                            )\n                        )\n\n                    )\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../../team/component/menu/menu-team.js.map","(function(){\n    var UserStore;\n\n    MiitComponents.MenuUserProfile = React.createClass({displayName: \"MenuUserProfile\",\n       getDefaultProps: function() {\n            return {\n                text: {\n                    logout:  'Déconnexion',\n                    login:   'Connexion',\n                    profile: 'Modifier mon profile',\n                    team:    'Modifier l\\'équipe'\n                }\n            };\n        },\n\n        componentWillMount: function() {\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n        },\n\n        componentDidMount: function() {\n            UserStore.addUserUpdatedListener(this._onChanged);\n        },\n\n        componentWillUnmount: function() {\n            UserStore.removeUserUpdatedListener(this._onChanged);\n        },\n\n        _onChanged: function() {\n            this.forceUpdate();\n        },\n\n        render: function() {\n            var user = UserStore.getUser();\n            var name = UserStore.getName(user);\n\n            return (\n                React.createElement(\"span\", {className: \"miit-component user-profile\"}, \n                    React.createElement(\"div\", {className: \"avatar\"}, \n                        React.createElement(MiitComponents.UserAvatar, {user: user})\n                    ), \n                    React.createElement(\"span\", {className: \"username\"},  name ), \n                    React.createElement(\"span\", null, React.createElement(\"i\", {className: \"fa fa-circle-thin stat-open mr5\"}), \" Connecté\")\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../../team/component/menu/menu-user-profile.js.map","(function(){\n    MiitComponents.Notification = React.createClass({displayName: \"Notification\",\n        getDefaultProps: function () {\n            return {\n                notification: {\n                    type: 'info',\n                    text: 'Lorem ipsum dolor sit amet, consectetur adipiscing.'\n                }\n            };\n        },\n\n        render: function() {\n            var classes = classNames('miit-component', 'notifications-container', 'notification-dialog', 'nd-' + this.props.notification.type);\n\n            return (\n                React.createElement(\"div\", {className: classes}, \n                    React.createElement(\"span\", null, this.props.notification.text)\n                )\n            );\n        }\n    });\n})();\n\n//# sourceMappingURL=../../../team/component/notifications/miit-notification.js.map","(function(){\n    var NotificationsStore;\n\n    MiitComponents.NotificationsContainer = React.createClass({displayName: \"NotificationsContainer\",\n        componentWillMount: function() {\n            if(!NotificationsStore) {\n                NotificationsStore = MiitApp.get('miit-notifications-store');\n            }\n        },\n\n        componentDidMount: function() {\n            NotificationsStore.addNotificationAddedListener(this._onChanged);\n            NotificationsStore.addNotificationRemovedListener(this._onChanged);\n        },\n\n        componentWillUnmount: function() {\n            NotificationsStore.addNotificationRemovedListener(this._onChanged);\n        },\n\n        _onChanged: function() {\n            this.forceUpdate();\n        },\n        \n        render: function() {\n            var notifications = NotificationsStore.getNotifications() || [];\n\n            return (\n                React.createElement(\"div\", {className: \"miit-component notifications-container dialog-container\"}, \n                    notifications.map(function(notification){\n                        return (React.createElement(MiitComponents.Notification, {key: notification.id, notification: notification}));\n                    })\n                )\n            );\n        }\n    });\n})();\n\n//# sourceMappingURL=../../../team/component/notifications/miit-notifications-container.js.map","(function(){\n    var Utils, TeamActions, TeamStore;\n\n    MiitComponents.TeamUpdate = React.createClass({displayName: \"TeamUpdate\",\n        getDefaultProps: function() {\n            return {\n                placeholder: {\n                    name: \"Nom de l'équipe\"\n                },\n                text: {\n                    public:    'Publique',\n                    isPublic:  'Votre Miit est publique et accessible a tout le monde via l\\'URL suivante',\n                    private:   'Privé',\n                    isPrivate: 'Votre Miit est privé et ne sera accessible qu\\'aux personnes de votre choix'\n                },\n                submit: \"Modifier\"\n            };\n        },\n\n        getInitialState: function() {\n            var initial = this.getDefaultErrors();\n\n            initial.value_name = '';\n\n            return initial;\n        },\n\n        getDefaultErrors: function() {\n            return {\n                missing_name:   false,\n                invalid_same:   false,\n                invalid_format: false\n            };\n        },\n        \n        componentWillMount: function() {\n            if(!Utils) {\n                Utils = MiitApp.get('miit-utils');\n            }\n            if(!TeamStore) {\n                TeamStore = MiitApp.get('miit-team-store');\n            }\n            if(!TeamActions) {\n                TeamActions = MiitApp.get('miit-team-actions');\n            }\n            // First define the user name\n            var team  = TeamStore.getTeam();\n\n            this.setState({\n                value_name:   team.name,\n                value_public: team.public\n            });\n        },\n\n        componentDidMount: function() {\n            TeamStore.addTeamUpdatedListener(this._onChanged);\n            TeamStore.addTeamNotUpdatedListener(this._onError);\n        },\n\n        componentWillUnmount: function() {\n            TeamStore.removeTeamUpdatedListener(this._onChanged);\n            TeamStore.removeTeamNotUpdatedListener(this._onError);\n        },\n\n        _onChanged: function() {\n            if(this.isMounted()) {\n                // Be sure that is set\n                var team  = TeamStore.getTeam();\n\n                this.setState({\n                    value_name:   team.name,\n                    value_public: team.public\n                });\n            }\n        },\n\n        _onError: function() {\n            console.log('team not updated.');\n        },\n        \n        handleChange: function(e) {\n            if(e.target && e.target.name) {\n                var update = {};\n                var name   = 'value_' + e.target.name;\n                var value  = e.target.value || '';\n\n                update[name] = value;\n\n                this.setState(update);\n            }\n        },\n        \n        handlePublic: function(value) {\n            this.setState({\n                value_public: value\n            });\n        },\n\n        generateUrl: function() {\n            return window.location.protocol + '//' + window.location.hostname + '/';\n        },\n\n        handleSubmit: function(e) {\n            e.preventDefault();\n\n            var name   = this.state.value_name;\n            var publix = this.state.value_public;\n            var team   = TeamStore.getTeam();\n            \n            this.setState(this.getDefaultErrors());\n\n            // Check if there is data\n            if (!name) {\n                this.setState({\n                    missing_name: !name\n                });\n                return;\n            }\n\n            // Check if the old is the same as the old\n            if(publix === team.public && name === team.name) {\n                this.setState({\n                    invalid_same: true\n                });\n                return;\n            }\n\n            // Check if this is a correct format\n            if(!Utils.validator.team(name)) {\n                this.setState({\n                    invalid_format: true\n                });\n                return;\n            }\n\n            TeamActions.update(name, publix);\n\n            return;\n        },\n\n        render: function() {\n            var value_name   = this.state.value_name;\n            var classes_name = classNames({\n                'invalid': this.state.missing_name ||\n                           this.state.invalid_same ||\n                           this.state.invalid_format\n            });\n\n            var value_public = this.state.value_public;\n\n            return (\n                React.createElement(\"form\", {className: \"miit-component user-update\", onSubmit: this.handleSubmit}, \n                    React.createElement(\"div\", {className: \"mb20\"}, \n                        React.createElement(\"input\", {type: \"text\", className: classes_name, value: value_name, placeholder: this.props.placeholder.name, onChange: this.handleChange, name: \"name\"})\n                    ), \n\n                    React.createElement(\"div\", {className: \"checkbox-field mb20\"}, \n                        React.createElement(\"label\", null, \n                            React.createElement(\"input\", {type: \"radio\", name: \"confid\", className: \"option-input radio\", defaultChecked: value_public, onChange: this.handlePublic.bind(this, true)}), \n                            this.props.text.public\n                        ), \n                        React.createElement(\"label\", {className: \"ml40\"}, \n                            React.createElement(\"input\", {type: \"radio\", name: \"confid\", className: \"option-input radio\", defaultChecked: !value_public, onChange: this.handlePublic.bind(this, false)}), \n                            this.props.text.private\n                        )\n                    ), \n\n                    React.createElement(If, {test: value_public}, \n                        React.createElement(\"div\", {className: \"mb20\"}, \n                            React.createElement(\"p\", {className: \"mb10\"}, this.props.text.isPublic), \n                            \n                            React.createElement(\"div\", {className: \"col8 col16-md\"}, \n                                React.createElement(\"div\", {className: \"input-field left-icon\"}, \n                                    React.createElement(\"i\", {className: \"fa fa-link\"}), \n                                    React.createElement(\"input\", {value: this.generateUrl(), type: \"text\", disabled: true})\n                                )\n                            )\n                        )\n                    ), \n\n                    React.createElement(If, {test: !value_public}, \n                        React.createElement(\"p\", {className: \"mb10\"}, this.props.text.isPrivate)\n                    ), \n\n                    React.createElement(\"div\", null, \n                        React.createElement(\"button\", {type: \"submit\", className: \"btn btn-info mt20\"}, \n                            this.props.submit\n                        )\n                    )\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../../team/component/team/team-update.js.map","(function(){\n    var UserStore;\n\n    MiitComponents.UserAvatar = React.createClass({displayName: \"UserAvatar\",\n        componentWillMount: function() {\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n        },\n\n        render: function() {\n            var user   = this.props.user || UserStore.getUser();\n            var avatar;\n\n            if(user.avatar) {\n                avatar = 'http://www.gravatar.com/avatar/' + user.avatar + '?s=128&d=identicon';\n            }\n\n            avatar = avatar || '/img/logo-miit-light.png';\n\n            return (\n                React.createElement(\"span\", {className: \"miit-component user-avatar\"}, \n                    React.createElement(\"img\", React.__spread({src: avatar},  this.props))\n                )\n            );\n        }\n    });\n})();\n\n//# sourceMappingURL=../../../team/component/user/user-avatar.js.map","(function(){\n    var Utils, UserActions, UserStore;\n\n    MiitComponents.UserChangePassword = React.createClass({displayName: \"UserChangePassword\",\n        getDefaultProps: function() {\n            return {\n                placeholder: {\n                    old:    'Votre mot de passe',\n                    first:  'Le nouveau mot de passe',\n                    second: 'Entrez le mot de passe à nouveau'\n                },\n                submit: 'Changer le mot de passe'\n            };\n        },\n\n        getInitialState: function() {\n            var initial = this.getDefaultErrors();\n\n            initial.value_old    = '';\n            initial.value_first  = '';\n            initial.value_second = '';\n\n            return initial;\n        },\n\n        getDefaultErrors: function() {\n            return {\n                missing_old:      false,\n                missing_first:    false,\n                missing_second:   false,\n                invalid_old:      false,\n                invalid_same:     false,\n                invalid_repeated: false,\n                invalid_format:   false\n            };\n        },\n        \n        componentWillMount: function() {\n            if(!Utils) {\n                Utils = MiitApp.get('miit-utils');\n            }\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n            if(!UserActions) {\n                UserActions = MiitApp.get('miit-user-actions');\n            }\n        },\n\n        componentDidMount: function() {\n            UserStore.addPasswordChangedListener(this._onChanged);\n            UserStore.addPasswordNotChangedListener(this._onError);\n        },\n\n        componentWillUnmount: function() {\n            UserStore.removePasswordChangedListener(this._onChanged);\n            UserStore.removePasswordNotChangedListener(this._onError);\n        },\n\n        _onChanged: function() {\n            if(this.isMounted()) {\n                // Reset value\n                this.setState({\n                    value_old:    '',\n                    value_first:  '',\n                    value_second: ''\n                });\n            }\n        },\n\n        _onError: function() {\n            console.log('password not changed.');\n        },\n        \n        handleChange: function(e) {\n            if(e.target && e.target.name) {\n                var update = {};\n                var name   = 'value_' + e.target.name;\n                var value  = e.target.value || '';\n\n                update[name] = value;\n\n                this.setState(update);\n            }\n        },\n\n        handleSubmit: function(e) {\n            e.preventDefault();\n\n            var old    = this.state.value_old;\n            var first  = this.state.value_first;\n            var second = this.state.value_second;\n            \n            this.setState(this.getDefaultErrors());\n\n            // Check if there is data\n            if (!old || !first || !second) {\n                this.setState({\n                    missing_old:    !old,\n                    missing_first:  !first,\n                    missing_second: !second\n                });\n                return;\n            }\n\n            // Check if this is a correct repeated\n            if(first !== second) {\n                this.setState({\n                    invalid_repeated: true\n                });\n                return;\n            }\n\n            // Check if the old is the same as the old\n            if(first === old) {\n                this.setState({\n                    invalid_same: true\n                });\n                return;\n            }\n\n            // Check if this is a correct format\n            if(!Utils.validator.password(first)) {\n                this.setState({\n                    invalid_format: true\n                });\n                return;\n            }\n\n            UserActions.changePassword(old, first);\n\n            return;\n        },\n\n        render: function() {\n            var value_old      = this.state.value_old;\n            var classes_old    = classNames({\n                'invalid': this.state.missing_old ||\n                           this.state.invalid_old\n            });\n\n            var value_first    = this.state.value_first;\n            var classes_first  = classNames({\n                'invalid': this.state.missing_first ||\n                           this.state.invalid_same  ||\n                           this.state.invalid_format\n            });\n\n            var value_second   = this.state.value_second;\n            var classes_second = classNames({\n                'invalid': this.state.missing_second ||\n                           this.state.invalid_repeated\n            });\n\n            return (\n                React.createElement(\"form\", {className: \"miit-component change-password\", onSubmit: this.handleSubmit}, \n                    React.createElement(\"input\", {type: \"password\", className: classes_old + \" mb15\", value: value_old, placeholder: this.props.placeholder.old, onChange: this.handleChange, name: \"old\"}), \n                    React.createElement(\"input\", {type: \"password\", className: classes_first + \" mb15\", value: value_first, placeholder: this.props.placeholder.first, onChange: this.handleChange, name: \"first\"}), \n                    React.createElement(\"input\", {type: \"password\", className: classes_second + \" mb20\", value: value_second, placeholder: this.props.placeholder.second, onChange: this.handleChange, name: \"second\"}), \n                    React.createElement(\"button\", {className: \"btn btn-warning\", type: \"submit\"}, this.props.submit)\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../../team/component/user/user-change-password.js.map","(function(){\n    var UserStore;\n\n    MiitComponents.UserListHeader = React.createClass({displayName: \"UserListHeader\",\n        getDefaultProps: function() {\n            return {\n                text: {\n                    avatar: 'Avatar',\n                    name:   'Name',\n                    email:  'Email',\n                    action: 'Action'\n                },\n                email: true,\n                roles: true\n            };\n        },\n        \n        componentWillMount: function() {\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n        },\n\n        render: function() {\n            return (\n                React.createElement(\"div\", {className: \"miit-component user-list-header\"}, \n                    React.createElement(\"span\", null, this.props.text.avatar), \n                    React.createElement(\"span\", null, this.props.text.name), \n                    React.createElement(If, {test: this.props.email && UserStore.isUser()}, \n                        React.createElement(\"span\", null, this.props.text.email)\n                    ), \n                    React.createElement(If, {test: this.props.roles && UserStore.isAdmin()}, \n                        React.createElement(\"span\", null, this.props.text.action)\n                    )\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../../team/component/user/user-list-header.js.map","(function(){\n    var Utils, UserStore, TeamStore, TeamActions;\n\n    MiitComponents.UserListInvite = React.createClass({displayName: \"UserListInvite\",\n        getDefaultProps: function() {\n            return {\n                placeholder: {\n                    email: 'Addresse mail'\n                },\n                submit: 'Inviter l\\'utilisateur'\n            };\n        },\n\n        getInitialState: function() {\n            var initial = this.getDefaultErrors();\n\n            initial.email = '';\n\n            return initial;\n        },\n\n        getDefaultErrors: function() {\n            return {\n                missing_email: false,\n                invalid_email: false\n            };\n        },\n\n        componentWillMount: function() {\n            if(!Utils) {\n                Utils = MiitApp.get('miit-utils');\n            }\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n            if(!TeamStore) {\n                TeamStore = MiitApp.get('miit-team-store');\n            }\n            if(!TeamActions) {\n                TeamActions = MiitApp.get('miit-team-actions');\n            }\n        },\n\n        componentDidMount: function() {\n            TeamStore.addInvitedListener(this._onInvited);\n            TeamStore.addNotInvitedListener(this._onError);\n        },\n\n        componentWillUnmount: function() {\n            TeamStore.removeInvitedListener(this._onInvited);\n            TeamStore.removeNotInvitedListener(this._onError);\n        },\n\n        handleChange: function(newValue) {\n            this.setState({\n                email: newValue.trim()\n            });\n        },\n\n        handleSubmit: function(e) {\n            e.preventDefault();\n\n            var email = this.state.email;\n            \n            this.setState(this.getDefaultErrors());\n\n            // Check if this is an admin\n            if(!UserStore.isAdmin()){\n                return;\n            }\n\n            // Check if there is data\n            if (!email) {\n                this.setState({\n                    missing_email: true\n                });\n                return;\n            }\n\n            // Check if this is a correct format\n            if(!Utils.validator.email(email)) {\n                this.setState({\n                    invalid_email: true\n                });\n                return;\n            }\n\n            TeamActions.invite(email);\n\n            return;\n        },\n\n        _onInvited: function() {\n            this.setState({\n                email: ''\n            });\n\n            if(typeof this.props.onInvite === 'function') {\n                this.props.onInvite(email);\n            }\n        },\n\n        _onError: function() {\n            console.log('Can not invite the user.');\n        },\n\n        render: function() {\n            // Check if this is an admin\n            if(!UserStore.isAdmin()){\n                return null;\n            }\n\n            var classes_invalid = classNames({\n                'invalid': this.state.missing_email ||\n                           this.state.invalid_email\n            });\n\n            var valueLinkEmail  = {\n                value:         this.state.email,\n                requestChange: this.handleChange\n            };\n\n            return (\n                React.createElement(\"div\", {className: \"miit-component user-list-invite mt20\"}, \n                    React.createElement(\"form\", {onSubmit: this.handleSubmit}, \n\n                        React.createElement(\"div\", {className: \"input-field left-icon col-md-7 mb10\"}, \n                            React.createElement(\"i\", {className: \"fa fa-user-plus\"}), \n                            React.createElement(\"input\", {type: \"text\", className: classes_invalid, placeholder: this.props.placeholder.email, valueLink: valueLinkEmail})\n                        ), \n\n                        React.createElement(\"button\", {type: \"submit\", className: \"btn btn-info btn-large ml15\"}, this.props.submit)\n                    )\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../../team/component/user/user-list-invite.js.map","(function() {\n    var UserStore, TeamStore, TeamActions;\n\n    MiitComponents.UserListItemRoles = React.createClass({displayName: \"UserListItemRoles\",\n        getDefaultProps: function() {\n            return {\n                text: {\n                    admin:  'Administrateur',\n                    user:   'Utilisateur',\n                    remove: 'Supprimer'\n                },\n                user: {\n                    id:    '',\n                    roles: []\n                }\n            };\n        },\n\n        getInitialState: function() {\n            return {\n                loading: false\n            };\n        },\n\n        componentWillMount: function() {\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n            if(!TeamStore) {\n                TeamStore = MiitApp.get('miit-team-store');\n            }\n            if(!TeamActions) {\n                TeamActions = MiitApp.get('miit-team-actions');\n            }\n        },\n\n        componentDidMount: function() {\n            // Promote\n            TeamStore.addPromotedListener(this._onPromoted);\n            TeamStore.addNotPromotedListener(this._onError);\n            // Demote\n            TeamStore.addDemotedListener(this._onDemoted);\n            TeamStore.addNotDemotedListener(this._onError);\n        },\n\n        componentWillUnmount: function() {\n            // Promote\n            TeamStore.removePromotedListener(this._onPromoted);\n            TeamStore.removeNotPromotedListener(this._onError);\n            // Demote\n            TeamStore.removeDemotedListener(this._onDemoted);\n            TeamStore.removeNotDemotedListener(this._onError);\n        },\n\n        _stopLoading: function() {\n            if(this.isMounted()) {\n                this.setState({\n                    loading: false\n                });\n            }\n        },\n\n        _onPromoted: function() {\n            this._stopLoading();\n        },\n\n        _onDemoted: function() {\n            this._stopLoading();\n        },\n\n        _onError: function() {\n            this._stopLoading();\n            console.log('Can not promote or demote the user.');\n        },\n\n        toggleRole: function(role, cb) {\n            var action = 'promote';\n\n            if(this.props.user.roles.indexOf(role) >= 0) {\n                action = 'demote';\n            }\n\n            TeamActions[action](this.props.user.id, [role]);\n        },\n\n        handleClick: function(action, e) {\n            e.preventDefault();\n\n            // Don't load twice\n            if(this.state.loading)\n                return;\n\n            var IAmAdmin    = UserStore.isAdmin();\n            var userIsOwner = UserStore.isOwner(this.props.user);\n            var userIsAdmin = UserStore.isAdmin(this.props.user);\n            var userIsMe    = UserStore.isItMe(this.props.user);\n\n            // Check if I am an admin and not myself or an owner\n            if(!IAmAdmin || userIsMe || userIsOwner)\n                return;\n\n            // Check if I want to remove an admin\n            if(action === 'REMOVE' && userIsAdmin)\n                return;\n\n            this.setState({\n                loading: true\n            });\n\n            switch(action) {\n                case 'ADMIN':\n                case 'USER':\n                    this.toggleRole(action);\n                    break;\n\n                case 'REMOVE':\n                    TeamActions.remove(this.props.user.id);\n                    break;\n            }\n        },\n\n        render: function() {\n            var IAmAdmin    = UserStore.isAdmin();\n\n            if(false === IAmAdmin) {\n                return null;\n            }\n\n            var userIsAdmin = UserStore.isAdmin(this.props.user);\n            var userIsUser  = UserStore.isUser(this.props.user);\n            var userIsMe    = UserStore.isItMe(this.props.user);\n\n            var user_active = classNames({\n                disable: !IAmAdmin || userIsMe || userIsAdmin,\n                active:  userIsUser\n            });\n\n            var admin_active = classNames({\n                disable: !IAmAdmin || userIsMe,\n                active:  userIsAdmin\n            });\n\n            var remove_active = classNames({\n                disable: !IAmAdmin || userIsMe || userIsAdmin\n            });\n\n            return (\n                React.createElement(\"span\", {className: \"miit-component user-list-item-roles\"}, \n                    React.createElement(\"div\", {className: \"checkbox-field pull-left\", onClick: this.handleClick.bind(this, 'USER')}, \n                        React.createElement(\"label\", null, \n                            React.createElement(\"input\", {type: \"checkbox\", className: \"option-input checkbox\", checked: userIsUser, readOnly: true}), \n                            this.props.text.user\n                        )\n                    ), \n\n                    React.createElement(\"div\", {className: \"checkbox-field pull-left ml20\", onClick: this.handleClick.bind(this, 'ADMIN')}, \n                        React.createElement(\"label\", null, \n                            React.createElement(\"input\", {type: \"checkbox\", className: \"option-input checkbox\", checked: userIsAdmin, readOnly: true}), \n                            this.props.text.admin\n                        )\n                    ), \n\n                    React.createElement(\"button\", {onClick: this.handleClick.bind(this, 'REMOVE'), className: \"btn btn-danger ml20\", disabled: remove_active}, \n                        React.createElement(\"i\", {className: \"fa fa-trash-o\"})\n                    )\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../../team/component/user/user-list-item-roles.js.map","(function(){\n    var UserStore, UserStatusStore;\n\n    MiitComponents.UserListItem = React.createClass({displayName: \"UserListItem\",\n        getDefaultProps: function() {\n            return {\n                user: {\n                    id:    '',\n                    name:  'unknow',\n                    roles: []\n                },\n                email: true,\n                roles: true,\n                status: false\n            };\n        },\n\n        componentWillMount: function() {\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n            if(!UserStatusStore) {\n                UserStatusStore = MiitApp.get('miit-user-status-store');\n            }\n        },\n\n        componentDidMount: function() {\n            UserStatusStore.addStatusChangedListener(this._onChanged);\n        },\n\n        componentWillUnmount: function() {\n            UserStatusStore.removeStatusChangedListener(this._onChanged);\n        },\n\n        _onChanged: function() {\n            this.forceUpdate();\n        },\n\n        render: function() {\n            var classes;\n                var name   = UserStore.getName(this.props.user);\n\n            if(this.props.status) {\n                var userId = this.props.user.id;\n                var status = UserStatusStore.getUserStatusByUserId(userId);\n\n                classes = classNames('status pl10', status.toLowerCase());\n            }\n\n            return (\n                React.createElement(\"div\", {className: \"miit-component user-list-item\"}, \n                    React.createElement(MiitComponents.UserAvatar, {user: this.props.user}), \n                    React.createElement(\"span\", {className: \"pl10\"}, name), \n\n                    React.createElement(If, {test: this.props.status}, \n                        React.createElement(\"span\", {className: classes}, React.createElement(\"i\", {className: \"icon-logo-miit\"}))\n                    ), \n                    \n                    React.createElement(If, {test: this.props.email && UserStore.isUser()}, \n                        React.createElement(\"span\", {className: \"pl10\"}, this.props.user.email)\n                    ), \n                    \n                    React.createElement(If, {test: this.props.roles && UserStore.isAdmin()}, \n                        React.createElement(MiitComponents.UserListItemRoles, {user: this.props.user})\n                    )\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../../team/component/user/user-list-item.js.map","(function(){\n    var TeamStore, TeamActions, UserStatusStore, UserStatusActions;\n\n    MiitComponents.UserList = React.createClass({displayName: \"UserList\",\n        getDefaultProps: function() {\n            return {\n                users:    [],\n                loading:  'Chargement...',\n                headers:  true,\n                invite:   true,\n                roles:    true,\n                emails:   true,\n                filtered: true,\n                status:   false\n            };\n        },\n\n        getInitialState: function() {\n            return {\n                users:  [],\n                loaded: false\n            };\n        },\n\n        componentWillMount: function() {\n            if(!TeamStore) {\n                TeamStore = MiitApp.get('miit-team-store');\n            }\n            if(!TeamActions) {\n                TeamActions = MiitApp.get('miit-team-actions');\n            }\n            if(!UserStatusStore) {\n                UserStatusStore = MiitApp.get('miit-user-status-store');\n            }\n            if(!UserStatusActions) {\n                UserStatusActions = MiitApp.get('miit-user-status-actions');\n            }\n            this.setState({\n                users: TeamStore.getUsers(this.props.filtered)\n            });\n        },\n\n        componentDidMount: function() {\n            // Invited\n            TeamStore.addInvitedListener(this._refresh);\n            // Promoted\n            TeamStore.addPromotedListener(this._refresh);\n            // Demoted\n            TeamStore.addDemotedListener(this._refresh);\n            // Removed\n            TeamStore.addRemovedListener(this._refresh);\n            // Refresh\n            TeamStore.addRefreshedListener(this._refresh);\n            // Refresh the list\n            TeamActions.refresh();\n        },\n\n        componentWillUnmount: function() {\n            // Invited\n            TeamStore.removeInvitedListener(this._refresh);\n            // Promoted\n            TeamStore.removePromotedListener(this._refresh);\n            // Demoted\n            TeamStore.removeDemotedListener(this._refresh);\n            // Removed\n            TeamStore.removeRemovedListener(this._refresh);\n            // Refresh\n            TeamStore.removeRefreshedListener(this._refresh);\n        },\n\n        _refresh: function() {\n            if(this.isMounted()) {\n                this.setState({\n                    users:  TeamStore.getUsers(this.props.filtered).sortBy('name'),\n                    loaded: true\n                });\n            }\n        },\n\n        render: function() {\n            return (\n                React.createElement(\"div\", {className: \"miit-component user-list\"}, \n                    React.createElement(If, {test: this.props.headers}, \n                        React.createElement(MiitComponents.UserListHeader, {email: this.props.emails, roles: this.props.roles})\n                    ), \n                    this.state.users.map(function(user) {\n                        return React.createElement(MiitComponents.UserListItem, {key: user.id, user: user, email: this.props.emails, roles: this.props.roles, status: this.props.status});\n                    }.bind(this)), \n                    React.createElement(If, {test: !this.state.loaded}, \n                        React.createElement(MiitComponents.Loading, null)\n                    ), \n                    React.createElement(If, {test: this.props.invite}, \n                        React.createElement(MiitComponents.UserListInvite, {onInvite: this.allowRefresh})\n                    )\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../../team/component/user/user-list.js.map","(function(){\n    var Utils, TeamStore, UserStore, UserActions;\n\n    MiitComponents.UserLogin = React.createClass({displayName: \"UserLogin\",\n        getDefaultProps: function() {\n            return {\n                text: {\n                    title: 'Connexion au Miit'\n                },\n                placeholder: {\n                    email:    'Adresse email',\n                    password: 'Mot de passe'\n                },\n                submit: 'Se connecter'\n            };\n        },\n\n        getInitialState: function() {\n            var initial = this.getDefaultErrors();\n\n            initial.value_email    = '';\n            initial.value_password = '';\n\n            return initial;\n        },\n\n        getDefaultErrors: function() {\n            return {\n                login_error:      false,\n                missing_email:    false,\n                missing_password: false,\n                invalid_format:   false\n            };\n        },\n\n        componentWillMount: function() {\n            if(!Utils) {\n                Utils = MiitApp.get('miit-utils');\n            }\n            if(!TeamStore) {\n                TeamStore = MiitApp.get('miit-team-store');\n            }\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n            if(!UserActions) {\n                UserActions = MiitApp.get('miit-user-actions');\n            }\n        },\n\n        componentDidMount: function() {\n            UserStore.addLoggedInListener(this._onLoggedIn);\n            UserStore.addLoginErrorListener(this._onError);\n        },\n\n        componentWillUnmount: function() {\n            UserStore.removeLoggedInListener(this._onLoggedIn);\n            UserStore.removeLoginErrorListener(this._onError);\n        },\n\n        _onLoggedIn: function() {\n            if(this.isMounted()) {\n                this.forceUpdate();\n            }\n        },\n\n        _onError: function() {\n            if(this.isMounted()) {\n                this.setState({\n                    login_error:    true,\n                    value_password: ''\n                });\n            }\n        },\n        \n        handleChange: function(e) {\n            if(e.target && e.target.name) {\n                var update = {};\n                var name   = 'value_' + e.target.name;\n                var value  = e.target.value || '';\n\n                update[name] = value;\n\n                this.setState(update);\n            }\n        },\n\n        handleSubmit: function(e) {\n            e.preventDefault();\n\n            var email    = this.state.value_email;\n            var password = this.state.value_password;\n            \n            this.setState(this.getDefaultErrors());\n\n            // Check if there is data\n            if (!email || !password) {\n                this.setState({\n                    missing_email:    !email,\n                    missing_password: !password,\n                });\n                return;\n            }\n\n            // Check if this is a correct format\n            if(!Utils.validator.email(email)) {\n                this.setState({\n                    invalid_format: true\n                });\n                return;\n            }\n\n            UserActions.login(email, password);\n\n            return;\n        },\n\n        render: function() {\n            // Don't display if Logged In\n            if(UserStore.isLoggedIn()) {\n                return null;\n            }\n\n            var value_email    = this.state.value_email;\n            var classes_email  = classNames({\n                'invalid': this.state.missing_email ||\n                           this.state.invalid_format\n            });\n\n            var value_password   = this.state.value_password;\n            var classes_password = classNames({\n                'invalid': this.state.missing_password\n            });\n\n            return (\n                React.createElement(\"span\", {className: \"miit-component user-login\"}, \n                    React.createElement(\"div\", {className: \"panel mb30 mt30\"}, \n                        React.createElement(\"h2\", {className: \"panel-title\"}, React.createElement(\"i\", {className: \"fa fa-lock pull-left \"}), \" \", this.props.text.title), \n                        React.createElement(\"div\", {className: \"panel-content\"}, \n                            React.createElement(\"form\", {onSubmit: this.handleSubmit}, \n                                React.createElement(\"input\", {type: \"text\", className: classes_email + \" mb15\", value: value_email, placeholder: this.props.placeholder.email, onChange: this.handleChange, name: \"email\"}), \n                                React.createElement(\"input\", {type: \"password\", className: classes_password + \" mb15\", value: value_password, placeholder: this.props.placeholder.password, onChange: this.handleChange, name: \"password\"}), \n                                React.createElement(\"button\", {className: \"btn btn-warning\", type: \"submit\"}, this.props.submit)\n                            )\n                        )\n                    )\n                )\n            );\n        }\n    });\n})();\n\n//# sourceMappingURL=../../../team/component/user/user-login.js.map","(function(){\n    var Utils, UserActions, UserStore;\n\n    MiitComponents.UserUpdate = React.createClass({displayName: \"UserUpdate\",\n        getDefaultProps: function() {\n            return {\n                placeholder: {\n                    name: 'Votre nom'\n                },\n                submit: 'Modifier'\n            };\n        },\n\n        getInitialState: function() {\n            var initial = this.getDefaultErrors();\n\n            initial.value_name = '';\n\n            return initial;\n        },\n\n        getDefaultErrors: function() {\n            return {\n                missing_name:   false,\n                invalid_same:   false,\n                invalid_format: false\n            };\n        },\n        \n        componentWillMount: function() {\n            if(!Utils) {\n                Utils = MiitApp.get('miit-utils');\n            }\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n            if(!UserActions) {\n                UserActions = MiitApp.get('miit-user-actions');\n            }\n            \n            var user = UserStore.getUser();\n\n            // Reset value\n            this.setState({\n                value_name: user.name\n            });\n        },\n\n        componentDidMount: function() {\n            UserStore.addUserUpdatedListener(this._onChanged);\n            UserStore.addUserNotUpdatedListener(this._onError);\n        },\n\n        componentWillUnmount: function() {\n            UserStore.removeUserUpdatedListener(this._onChanged);\n            UserStore.removeUserNotUpdatedListener(this._onError);\n        },\n\n        _onChanged: function() {\n            if(this.isMounted()) {\n                var user = UserStore.getUser();\n\n                // Reset value\n                this.setState({\n                    value_name: user.name\n                });\n            }\n        },\n\n        _onError: function() {\n            console.log('user not updated.');\n        },\n        \n        handleChange: function(e) {\n            if(e.target && e.target.name) {\n                var update = {};\n                var name   = 'value_' + e.target.name;\n                var value  = e.target.value || '';\n\n                update[name] = value;\n\n                this.setState(update);\n            }\n        },\n\n        handleSubmit: function(e) {\n            e.preventDefault();\n\n            var name = this.state.value_name;\n            var user = UserStore.getUser();\n            \n            this.setState(this.getDefaultErrors());\n\n            // Check if there is data\n            if (!name) {\n                this.setState({\n                    missing_name: !name\n                });\n                return;\n            }\n\n            // Check if the old is the same as the old\n            if(name === user.name) {\n                this.setState({\n                    invalid_same: true\n                });\n                return;\n            }\n\n            // Check if this is a correct format\n            if(!Utils.validator.user(name)) {\n                this.setState({\n                    invalid_format: true\n                });\n                return;\n            }\n\n            UserActions.update(name);\n\n            return;\n        },\n\n        render: function() {\n            var value_name   = this.state.value_name;\n            var classes_name = classNames({\n                'invalid': this.state.missing_name ||\n                           this.state.invalid_same ||\n                           this.state.invalid_format\n            });\n\n            return (\n                React.createElement(\"form\", {className: \"miit-component user-update\", onSubmit: this.handleSubmit}, \n                    React.createElement(\"input\", {type: \"text\", className: classes_name, value: value_name, placeholder: this.props.placeholder.name, onChange: this.handleChange, name: \"name\"}), \n                    React.createElement(\"button\", {type: \"submit\", className: \"btn btn-info mt20\"}, this.props.submit)\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../../../team/component/user/user-update.js.map","(function(){\n    var Router, UserStore, UserActions, PageStore, PageActions;\n\n    var defaultPage = 'home';\n\n    MiitComponents.TeamApp = React.createClass({displayName: \"TeamApp\",\n        getInitialState: function() {\n            return {\n                page: null\n            };\n        },\n\n        componentWillMount: function() {\n            // Get the user actions\n            if(!UserStore) {\n                UserStore = MiitApp.get('miit-user-store');\n            }\n            // Get the user actions\n            if(!UserActions) {\n                UserActions = MiitApp.get('miit-user-actions');\n                UserActions.check(UserStore.getToken());\n            }\n            // Get the page store\n            if(!PageStore) {\n                PageStore = MiitApp.get('miit-page-store');\n            }\n            // Get the page actions\n            if(!PageActions) {\n                PageActions = MiitApp.get('miit-page-actions');\n            }\n            // Get the router and handle page change\n            if(!Router) {\n                Router = MiitApp.get('miit-router');\n                Router.routes.set('/([a-zA-Z0-9_\\-]{0,})', function(mainPage) {\n                    var page = mainPage || defaultPage;\n\n                    // Set the current active page of the menu\n                    ActiveGroups['menu-team'] = page;\n\n                    // Set the current active page          \n                    PageActions.changeMainPage(page);\n                });\n            }\n        },\n\n        componentDidMount: function() {\n            UserStore.addLoggedInListener(this._onChange);\n            PageStore.addMainPageChangedListener(this._onChange);\n        },\n\n        componentWillUnmount: function() {\n            UserStore.removeLoggedInListener(this._onChange);\n            PageStore.removeMainPageChangedListener(this._onChange);\n        },\n\n        _onChange: function() {\n            var page = PageStore.getCurrentMainPage();\n\n            if(!page)\n            {\n                setTimeout(function(){\n                    PageActions.changeMainPage('not-found');\n                });\n            }\n            else if(this.isMounted())\n            {\n                this.setState({\n                    page: page\n                });\n            }\n        },\n\n        render: function() {\n            return (\n                React.createElement(\"div\", {className: \"page bg-grey lighten-5\"}, \n                    React.createElement(MiitComponents.MenuTeam, null), \n\n                    React.createElement(\"div\", {className: \"main\"}, \n                        this.state.page\n                    ), \n\n                    React.createElement(MiitComponents.NotificationsContainer, null)\n                )\n            );\n        }\n    });\n})();\n//# sourceMappingURL=../team/team-app.js.map",null],"sourceRoot":"/source/"}